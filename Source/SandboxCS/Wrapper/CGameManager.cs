/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CGameManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CGameManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CGameManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CGameManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CGameManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public bool isSupportShaders {
    set {
      testPINVOKE.CGameManager_isSupportShaders_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CGameManager_isSupportShaders_get(swigCPtr);
      return ret;
    } 
  }

  public static CGameManager Instance() {
    IntPtr cPtr = testPINVOKE.CGameManager_Instance();
    CGameManager ret = (cPtr == IntPtr.Zero) ? null : new CGameManager(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_EngineDevice GetEngineDevice() {
    IntPtr cPtr = testPINVOKE.CGameManager_GetEngineDevice(swigCPtr);
    SWIGTYPE_p_EngineDevice ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_EngineDevice(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_SceneManager GetSceneManager() {
    IntPtr cPtr = testPINVOKE.CGameManager_GetSceneManager(swigCPtr);
    SWIGTYPE_p_SceneManager ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_SceneManager(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_RenderWindow GetRenderWindow() {
    IntPtr cPtr = testPINVOKE.CGameManager_GetRenderWindow(swigCPtr);
    SWIGTYPE_p_RenderWindow ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_RenderWindow(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Timer GetTimer() {
    IntPtr cPtr = testPINVOKE.CGameManager_GetTimer(swigCPtr);
    SWIGTYPE_p_Timer ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Timer(cPtr, false);
    return ret;
  }

  public E_DRIVER_TYPE GetVideoDeviceType() {
    E_DRIVER_TYPE ret = (E_DRIVER_TYPE)testPINVOKE.CGameManager_GetVideoDeviceType(swigCPtr);
    return ret;
  }

  public void SetEngineDevice(SWIGTYPE_p_EngineDevice e) {
    testPINVOKE.CGameManager_SetEngineDevice(swigCPtr, SWIGTYPE_p_EngineDevice.getCPtr(e));
  }

  public void SetSceneManager(SWIGTYPE_p_SceneManager s) {
    testPINVOKE.CGameManager_SetSceneManager(swigCPtr, SWIGTYPE_p_SceneManager.getCPtr(s));
  }

  public void SetRenderWindow(SWIGTYPE_p_RenderWindow r) {
    testPINVOKE.CGameManager_SetRenderWindow(swigCPtr, SWIGTYPE_p_RenderWindow.getCPtr(r));
  }

  public void SetGame(CGame Game) {
    testPINVOKE.CGameManager_SetGame(swigCPtr, CGame.getCPtr(Game));
  }

  public void SetQuit(bool quit) {
    testPINVOKE.CGameManager_SetQuit(swigCPtr, quit);
  }

  public bool GetQuit() {
    bool ret = testPINVOKE.CGameManager_GetQuit(swigCPtr);
    return ret;
  }

  public void AdvanceGameState() {
    testPINVOKE.CGameManager_AdvanceGameState(swigCPtr);
  }

  public void UpdateGame(SWIGTYPE_p_f32 elapsedTime) {
    testPINVOKE.CGameManager_UpdateGame(swigCPtr, SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Shutdown() {
    testPINVOKE.CGameManager_Shutdown(swigCPtr);
  }

  public bool GetConsoleVisible() {
    bool ret = testPINVOKE.CGameManager_GetConsoleVisible(swigCPtr);
    return ret;
  }

  public void SetConsoleVisible(bool Visible) {
    testPINVOKE.CGameManager_SetConsoleVisible(swigCPtr, Visible);
  }

  public void AddResourceArchive(string FileName, string GroupName) {
    testPINVOKE.CGameManager_AddResourceArchive(swigCPtr, FileName, GroupName);
  }

  public void RemoveResourceArchive(string FileName, string GroupName) {
    testPINVOKE.CGameManager_RemoveResourceArchive(swigCPtr, FileName, GroupName);
  }

  public bool SaveGame(string FileName) {
    bool ret = testPINVOKE.CGameManager_SaveGame(swigCPtr, FileName);
    return ret;
  }

  public bool LoadGame(string FileName, SWIGTYPE_p_String ResourceGroupName) {
    bool ret = testPINVOKE.CGameManager_LoadGame(swigCPtr, FileName, SWIGTYPE_p_String.getCPtr(ResourceGroupName));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStaticData(SWIGTYPE_p_String StaticData) {
    testPINVOKE.CGameManager_SetStaticData(swigCPtr, SWIGTYPE_p_String.getCPtr(StaticData));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_String GetStaticData() {
    SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.CGameManager_GetStaticData(swigCPtr), false);
    return ret;
  }

  public void SetBaseResourceName(SWIGTYPE_p_String ResourceName) {
    testPINVOKE.CGameManager_SetBaseResourceName(swigCPtr, SWIGTYPE_p_String.getCPtr(ResourceName));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBaseAudioResourceName(SWIGTYPE_p_String ResourceName) {
    testPINVOKE.CGameManager_SetBaseAudioResourceName(swigCPtr, SWIGTYPE_p_String.getCPtr(ResourceName));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetBaseResourceName() {
    string ret = testPINVOKE.CGameManager_GetBaseResourceName(swigCPtr);
    return ret;
  }

  public string GetBaseAudioResourceName() {
    string ret = testPINVOKE.CGameManager_GetBaseAudioResourceName(swigCPtr);
    return ret;
  }

  public string GetScriptPath() {
    string ret = testPINVOKE.CGameManager_GetScriptPath(swigCPtr);
    return ret;
  }

  public string GetDefaultPhysicsStrategy() {
    string ret = testPINVOKE.CGameManager_GetDefaultPhysicsStrategy(swigCPtr);
    return ret;
  }

  public string GetDefaultDatabaseName() {
    string ret = testPINVOKE.CGameManager_GetDefaultDatabaseName(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_SceneManager CreateScene(string SceneType, string SceneName) {
    IntPtr cPtr = testPINVOKE.CGameManager_CreateScene(swigCPtr, SceneType, SceneName);
    SWIGTYPE_p_SceneManager ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_SceneManager(cPtr, false);
    return ret;
  }

}
