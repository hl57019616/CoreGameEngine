#if 0
#ifndef __CMATERIAL_GENERATOR_H__
#define __CMATERIAL_GENERATOR_H__

#include "Defines.h"

/** Caching, on-the-fly material generator. This is a class that automatically 
	generates and stores different permutations of a material, and its shaders. 
	It can be used if you have a material that has lots of slightly different 
	variations, like whether to use a specular light, skinning, normal mapping 
	and other options. Writing all these out is a tedioius job. Of course it is 
	possible to always use the material with all features, but that might result 
	in large, slow shader programs. This class provides an efficient solution
	to that.
 */
namespace Core
{
namespace Effects
{
	class CMaterialGenerator
	{
	public:
		/** Bitfield used to signify a material permutations */
		typedef u32 Perm;

		~CMaterialGenerator();

		const MaterialPtr &getMaterial(Perm permutation);

		/** Implementation class that takes care of actual generation or lookup
			of the various constituent parts (template material, fragment shader
			and vertex shader). These methods are only called once for every permutation,
			after which the result is stored and re-used.
		*/
		class Impl
		{
		public:
			virtual ~Impl();
			virtual GpuProgramPtr generateVertexShader(Perm permutation) = 0;
			virtual GpuProgramPtr generateFragmentShader(Perm permutation) = 0;
			virtual MaterialPtr generateTemplateMaterial(Perm permutation) = 0;
		};
	protected:
		/** The constructor is protected as this base class should never be constructed
			as-is. It is meant to be subclassed so that values can be assigned to
			the various fields controlling material generator, and most importantly, the
			mImpl field.
		*/
		CMaterialGenerator();

		const GpuProgramPtr& getVertexShader(Perm permutation);
		const GpuProgramPtr& getFragmentShader(Perm permutation);
		const MaterialPtr&   getTemplateMaterial(Perm permutation);
		
		String materialBaseName;	// Base name of materials generated by this
		StringVector bitNames;		// Name of every bit
		Perm vsMask;				// Mask of permutation bits that influence vertex shader choice
		Perm fsMask;				// Mask of permutation bits that influence fragment shader choice
		Perm matMask;				// Mask of permutation bits that influence template material choice
		Impl *mImpl;				// Generator

		typedef std::map<Perm, GpuProgramPtr> ProgramMap;
		typedef std::map<Perm, MaterialPtr> MaterialMap;

		ProgramMap mVs, mFs;
		MaterialMap mTemplateMat, mMaterials;
	};
}
}

#endif // __CMATERIAL_GENERATOR_H__

#endif