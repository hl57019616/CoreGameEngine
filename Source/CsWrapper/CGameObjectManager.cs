/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CGameObjectManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CGameObjectManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CGameObjectManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CGameObjectManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CGameObjectManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static CGameObjectManager Instance() {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_Instance();
    CGameObjectManager ret = (cPtr == IntPtr.Zero) ? null : new CGameObjectManager(cPtr, false);
    return ret;
  }

  public CGameObject CreateObject(string GameObjectType) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_CreateObject__SWIG_0(swigCPtr, GameObjectType);
    CGameObject ret = (cPtr == IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    return ret;
  }

  public CGameObject CreateObject(string GameObjectType, string Name, SWIGTYPE_p_Vector3 Pos) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_CreateObject__SWIG_1(swigCPtr, GameObjectType, Name, SWIGTYPE_p_Vector3.getCPtr(Pos));
    CGameObject ret = (cPtr == IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CGameObject CreateCustomObject(string MeshName) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_CreateCustomObject__SWIG_0(swigCPtr, MeshName);
    CGameObject ret = (cPtr == IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    return ret;
  }

  public CGameObject CreateCustomObject(string MeshName, string Name, SWIGTYPE_p_Vector3 Pos) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_CreateCustomObject__SWIG_1(swigCPtr, MeshName, Name, SWIGTYPE_p_Vector3.getCPtr(Pos));
    CGameObject ret = (cPtr == IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CGameObject GetGameObject(SWIGTYPE_p_Entity entity) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_GetGameObject__SWIG_0(swigCPtr, SWIGTYPE_p_Entity.getCPtr(entity));
    CGameObject ret = (cPtr == IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    return ret;
  }

  public CGameObject GetGameObject(string Name) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_GetGameObject__SWIG_1(swigCPtr, Name);
    CGameObject ret = (cPtr == IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    return ret;
  }

  public CGameObject GetGameObjectByEntityName(string Name) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_GetGameObjectByEntityName(swigCPtr, Name);
    CGameObject ret = (cPtr == IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    return ret;
  }

  public void SetGameObjectUpdatable(CGameObject GameObject, bool Value) {
    testPINVOKE.CGameObjectManager_SetGameObjectUpdatable(swigCPtr, CGameObject.getCPtr(GameObject), Value);
  }

  public void GetGameObjects(SWIGTYPE_p_VectorT_Core__CGameObject_p_t GameObjects) {
    testPINVOKE.CGameObjectManager_GetGameObjects(swigCPtr, SWIGTYPE_p_VectorT_Core__CGameObject_p_t.getCPtr(GameObjects));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetAllObjectTypes(SWIGTYPE_p_VectorT_char_const_p_t ObjectTypes) {
    testPINVOKE.CGameObjectManager_GetAllObjectTypes(swigCPtr, SWIGTYPE_p_VectorT_char_const_p_t.getCPtr(ObjectTypes));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveGameObject(CGameObject GameObject) {
    testPINVOKE.CGameObjectManager_RemoveGameObject(swigCPtr, CGameObject.getCPtr(GameObject));
  }

  public CPlayer CreatePlayer(string Type, E_PLAYER_TEAM Team, string LabelName, SWIGTYPE_p_Core__Physics__IPhysicsStrategy PhysicsStrategy, bool isPlayer) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_CreatePlayer__SWIG_0(swigCPtr, Type, (int)Team, LabelName, SWIGTYPE_p_Core__Physics__IPhysicsStrategy.getCPtr(PhysicsStrategy), isPlayer);
    CPlayer ret = (cPtr == IntPtr.Zero) ? null : new CPlayer(cPtr, false);
    return ret;
  }

  public CPlayer CreatePlayer(string Type, E_PLAYER_TEAM Team, string LabelName, SWIGTYPE_p_Core__Physics__IPhysicsStrategy PhysicsStrategy) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_CreatePlayer__SWIG_1(swigCPtr, Type, (int)Team, LabelName, SWIGTYPE_p_Core__Physics__IPhysicsStrategy.getCPtr(PhysicsStrategy));
    CPlayer ret = (cPtr == IntPtr.Zero) ? null : new CPlayer(cPtr, false);
    return ret;
  }

  public CPlayer CreatePlayer(string Type, E_PLAYER_TEAM Team, string LabelName) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_CreatePlayer__SWIG_2(swigCPtr, Type, (int)Team, LabelName);
    CPlayer ret = (cPtr == IntPtr.Zero) ? null : new CPlayer(cPtr, false);
    return ret;
  }

  public CPlayer CreatePlayer(string Type, E_PLAYER_TEAM Team) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_CreatePlayer__SWIG_3(swigCPtr, Type, (int)Team);
    CPlayer ret = (cPtr == IntPtr.Zero) ? null : new CPlayer(cPtr, false);
    return ret;
  }

  public bool CreateCustomPlayer(CPlayer Player, E_PLAYER_TEAM Team, string LabelName, SWIGTYPE_p_Core__Physics__IPhysicsStrategy PhysicsStrategy, bool isPlayer) {
    bool ret = testPINVOKE.CGameObjectManager_CreateCustomPlayer__SWIG_0(swigCPtr, CPlayer.getCPtr(Player), (int)Team, LabelName, SWIGTYPE_p_Core__Physics__IPhysicsStrategy.getCPtr(PhysicsStrategy), isPlayer);
    return ret;
  }

  public bool CreateCustomPlayer(CPlayer Player, E_PLAYER_TEAM Team, string LabelName, SWIGTYPE_p_Core__Physics__IPhysicsStrategy PhysicsStrategy) {
    bool ret = testPINVOKE.CGameObjectManager_CreateCustomPlayer__SWIG_1(swigCPtr, CPlayer.getCPtr(Player), (int)Team, LabelName, SWIGTYPE_p_Core__Physics__IPhysicsStrategy.getCPtr(PhysicsStrategy));
    return ret;
  }

  public bool CreateCustomPlayer(CPlayer Player, E_PLAYER_TEAM Team, string LabelName) {
    bool ret = testPINVOKE.CGameObjectManager_CreateCustomPlayer__SWIG_2(swigCPtr, CPlayer.getCPtr(Player), (int)Team, LabelName);
    return ret;
  }

  public bool CreateCustomPlayer(CPlayer Player, E_PLAYER_TEAM Team) {
    bool ret = testPINVOKE.CGameObjectManager_CreateCustomPlayer__SWIG_3(swigCPtr, CPlayer.getCPtr(Player), (int)Team);
    return ret;
  }

  public bool AddCustomPlayer(CPlayer Player, E_PLAYER_TEAM Team, bool isPlayer) {
    bool ret = testPINVOKE.CGameObjectManager_AddCustomPlayer__SWIG_0(swigCPtr, CPlayer.getCPtr(Player), (int)Team, isPlayer);
    return ret;
  }

  public bool AddCustomPlayer(CPlayer Player, E_PLAYER_TEAM Team) {
    bool ret = testPINVOKE.CGameObjectManager_AddCustomPlayer__SWIG_1(swigCPtr, CPlayer.getCPtr(Player), (int)Team);
    return ret;
  }

  public void RemovePlayer(CPlayer Player) {
    testPINVOKE.CGameObjectManager_RemovePlayer(swigCPtr, CPlayer.getCPtr(Player));
  }

  public void RemoveAllPlayers() {
    testPINVOKE.CGameObjectManager_RemoveAllPlayers(swigCPtr);
  }

  public void GetTeam(E_PLAYER_TEAM Team, SWIGTYPE_p_std__vectorT_Core__CPlayer_p_t List) {
    testPINVOKE.CGameObjectManager_GetTeam(swigCPtr, (int)Team, SWIGTYPE_p_std__vectorT_Core__CPlayer_p_t.getCPtr(List));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetAllPlayers(SWIGTYPE_p_VectorT_Core__CPlayer_p_t Players) {
    testPINVOKE.CGameObjectManager_GetAllPlayers(swigCPtr, SWIGTYPE_p_VectorT_Core__CPlayer_p_t.getCPtr(Players));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetPlayerTypes(SWIGTYPE_p_VectorT_char_const_p_t PlayerType) {
    testPINVOKE.CGameObjectManager_GetPlayerTypes(swigCPtr, SWIGTYPE_p_VectorT_char_const_p_t.getCPtr(PlayerType));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public CPlayer GetHumanPlayer() {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_GetHumanPlayer(swigCPtr);
    CPlayer ret = (cPtr == IntPtr.Zero) ? null : new CPlayer(cPtr, false);
    return ret;
  }

  public CPlayer GetPlayerByName(string Name) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_GetPlayerByName(swigCPtr, Name);
    CPlayer ret = (cPtr == IntPtr.Zero) ? null : new CPlayer(cPtr, false);
    return ret;
  }

  public CPlayer GetPlayerByEntityName(string EntityName) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_GetPlayerByEntityName(swigCPtr, EntityName);
    CPlayer ret = (cPtr == IntPtr.Zero) ? null : new CPlayer(cPtr, false);
    return ret;
  }

  public CPlayer GetClosestVisibleEnemy(CPlayer Player) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_GetClosestVisibleEnemy(swigCPtr, CPlayer.getCPtr(Player));
    CPlayer ret = (cPtr == IntPtr.Zero) ? null : new CPlayer(cPtr, false);
    return ret;
  }

  public CPlayer GetClosestEnemy(CPlayer Player) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_GetClosestEnemy(swigCPtr, CPlayer.getCPtr(Player));
    CPlayer ret = (cPtr == IntPtr.Zero) ? null : new CPlayer(cPtr, false);
    return ret;
  }

  public void SetHumanPlayer(CPlayer Player) {
    testPINVOKE.CGameObjectManager_SetHumanPlayer(swigCPtr, CPlayer.getCPtr(Player));
  }

  public void ChangePlayerTeam(CPlayer Player, E_PLAYER_TEAM Team) {
    testPINVOKE.CGameObjectManager_ChangePlayerTeam(swigCPtr, CPlayer.getCPtr(Player), (int)Team);
  }

  public CBuilding CreateBuilding(string Type, E_PLAYER_TEAM Team, string LabelName, SWIGTYPE_p_Core__Physics__IPhysicsStrategy PhysicsStrategy) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_CreateBuilding(swigCPtr, Type, (int)Team, LabelName, SWIGTYPE_p_Core__Physics__IPhysicsStrategy.getCPtr(PhysicsStrategy));
    CBuilding ret = (cPtr == IntPtr.Zero) ? null : new CBuilding(cPtr, false);
    return ret;
  }

  public CBuilding GetBuildingByEntityName(string EntityName) {
    IntPtr cPtr = testPINVOKE.CGameObjectManager_GetBuildingByEntityName(swigCPtr, EntityName);
    CBuilding ret = (cPtr == IntPtr.Zero) ? null : new CBuilding(cPtr, false);
    return ret;
  }

  public void RemoveBuilding(CBuilding Building) {
    testPINVOKE.CGameObjectManager_RemoveBuilding(swigCPtr, CBuilding.getCPtr(Building));
  }

  public void RemoveAddBuildings() {
    testPINVOKE.CGameObjectManager_RemoveAddBuildings(swigCPtr);
  }

  public void GetAllBuildingTypes(SWIGTYPE_p_VectorT_char_const_p_t ObjectTypes) {
    testPINVOKE.CGameObjectManager_GetAllBuildingTypes(swigCPtr, SWIGTYPE_p_VectorT_char_const_p_t.getCPtr(ObjectTypes));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_VectorT_Core__CBuilding_p_t GetAllBuildings() {
    SWIGTYPE_p_VectorT_Core__CBuilding_p_t ret = new SWIGTYPE_p_VectorT_Core__CBuilding_p_t(testPINVOKE.CGameObjectManager_GetAllBuildings(swigCPtr), false);
    return ret;
  }

  public void Update(SWIGTYPE_p_f32 elapsedTime) {
    testPINVOKE.CGameObjectManager_Update(swigCPtr, SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Shutdown() {
    testPINVOKE.CGameObjectManager_Shutdown(swigCPtr);
  }

  public void Restart() {
    testPINVOKE.CGameObjectManager_Restart(swigCPtr);
  }

  public void AddSphereObstacle(CGameObject GameObject) {
    testPINVOKE.CGameObjectManager_AddSphereObstacle(swigCPtr, CGameObject.getCPtr(GameObject));
  }

  public void AddBoxObstacle(CGameObject GameObject) {
    testPINVOKE.CGameObjectManager_AddBoxObstacle(swigCPtr, CGameObject.getCPtr(GameObject));
  }

  public void GetObstacles(SWIGTYPE_p_VectorT_Core__AI__Obstacle_p_t list) {
    testPINVOKE.CGameObjectManager_GetObstacles(swigCPtr, SWIGTYPE_p_VectorT_Core__AI__Obstacle_p_t.getCPtr(list));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetSphereObstacles(SWIGTYPE_p_VectorT_Core__AI__Obstacle_p_t list) {
    testPINVOKE.CGameObjectManager_GetSphereObstacles(swigCPtr, SWIGTYPE_p_VectorT_Core__AI__Obstacle_p_t.getCPtr(list));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveObstacle(CGameObject GameObject) {
    testPINVOKE.CGameObjectManager_RemoveObstacle(swigCPtr, CGameObject.getCPtr(GameObject));
  }

  public void AddWall(SWIGTYPE_p_Vector3 From, SWIGTYPE_p_Vector3 To, bool LeftNormal) {
    testPINVOKE.CGameObjectManager_AddWall__SWIG_0(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(From), SWIGTYPE_p_Vector3.getCPtr(To), LeftNormal);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddWall(SWIGTYPE_p_Vector3 From, SWIGTYPE_p_Vector3 To) {
    testPINVOKE.CGameObjectManager_AddWall__SWIG_1(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(From), SWIGTYPE_p_Vector3.getCPtr(To));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetWalls(SWIGTYPE_p_VectorT_Core__AI__Wall_p_t Walls) {
    testPINVOKE.CGameObjectManager_GetWalls(swigCPtr, SWIGTYPE_p_VectorT_Core__AI__Wall_p_t.getCPtr(Walls));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveWalls() {
    testPINVOKE.CGameObjectManager_RemoveWalls(swigCPtr);
  }

}
