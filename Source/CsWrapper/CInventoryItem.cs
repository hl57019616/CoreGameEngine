/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CInventoryItem : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CInventoryItem(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CInventoryItem obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CInventoryItem() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CInventoryItem(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void Update(SWIGTYPE_p_f32 elapsedTime) {
    testPINVOKE.CInventoryItem_Update(swigCPtr, SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool Use(SWIGTYPE_p_Vector3 Target) {
    bool ret = testPINVOKE.CInventoryItem_Use(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Target));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void PickedUp(CPlayer Player) {
    testPINVOKE.CInventoryItem_PickedUp(swigCPtr, CPlayer.getCPtr(Player));
  }

  public void ShowSight(bool Show) {
    testPINVOKE.CInventoryItem_ShowSight(swigCPtr, Show);
  }

  public SWIGTYPE_p_f32 GetRange() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CInventoryItem_GetRange(swigCPtr), true);
    return ret;
  }

  public CGameObject GetGameObject() {
    IntPtr cPtr = testPINVOKE.CInventoryItem_GetGameObject(swigCPtr);
    CGameObject ret = (cPtr == IntPtr.Zero) ? null : new CGameObject(cPtr, false);
    return ret;
  }

  public INVENTORY_TYPE GetType() {
    INVENTORY_TYPE ret = (INVENTORY_TYPE)testPINVOKE.CInventoryItem_GetType(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_String Name {
    set {
      testPINVOKE.CInventoryItem_Name_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.CInventoryItem_Name_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String Desc {
    set {
      testPINVOKE.CInventoryItem_Desc_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.CInventoryItem_Desc_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 Power {
    set {
      testPINVOKE.CInventoryItem_Power_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CInventoryItem_Power_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public E_ITEM_USE_RESULT UseResult {
    set {
      testPINVOKE.CInventoryItem_UseResult_set(swigCPtr, (int)value);
    } 
    get {
      E_ITEM_USE_RESULT ret = (E_ITEM_USE_RESULT)testPINVOKE.CInventoryItem_UseResult_get(swigCPtr);
      return ret;
    } 
  }

}
