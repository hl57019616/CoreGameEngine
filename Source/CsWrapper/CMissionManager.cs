/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CMissionManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CMissionManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CMissionManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CMissionManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CMissionManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static CMissionManager Instance() {
    IntPtr cPtr = testPINVOKE.CMissionManager_Instance();
    CMissionManager ret = (cPtr == IntPtr.Zero) ? null : new CMissionManager(cPtr, false);
    return ret;
  }

  public bool StartMission(string MissionLabel, CPlayer Player) {
    bool ret = testPINVOKE.CMissionManager_StartMission(swigCPtr, MissionLabel, CPlayer.getCPtr(Player));
    return ret;
  }

  public void ListAllAvailableMissions(SWIGTYPE_p_VectorT_String_t List) {
    testPINVOKE.CMissionManager_ListAllAvailableMissions(swigCPtr, SWIGTYPE_p_VectorT_String_t.getCPtr(List));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool FindActivePlayerMissions(CPlayer Player, SWIGTYPE_p_VectorT_Core__Mission__IMission_p_t Missions) {
    bool ret = testPINVOKE.CMissionManager_FindActivePlayerMissions(swigCPtr, CPlayer.getCPtr(Player), SWIGTYPE_p_VectorT_Core__Mission__IMission_p_t.getCPtr(Missions));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Update() {
    testPINVOKE.CMissionManager_Update(swigCPtr);
  }

  public void RegisterEvent(CPlayer Owner, MISSION_TYPE MissionType, CPlayer PlayerKilled, CInventoryItem InventoryItem, CProjectile Projectile, SWIGTYPE_p_void UserData) {
    testPINVOKE.CMissionManager_RegisterEvent__SWIG_0(swigCPtr, CPlayer.getCPtr(Owner), (int)MissionType, CPlayer.getCPtr(PlayerKilled), CInventoryItem.getCPtr(InventoryItem), CProjectile.getCPtr(Projectile), SWIGTYPE_p_void.getCPtr(UserData));
  }

  public void RegisterEvent(CPlayer Owner, MISSION_TYPE MissionType, CPlayer PlayerKilled, CInventoryItem InventoryItem, CProjectile Projectile) {
    testPINVOKE.CMissionManager_RegisterEvent__SWIG_1(swigCPtr, CPlayer.getCPtr(Owner), (int)MissionType, CPlayer.getCPtr(PlayerKilled), CInventoryItem.getCPtr(InventoryItem), CProjectile.getCPtr(Projectile));
  }

  public void RegisterEvent(CPlayer Owner, MISSION_TYPE MissionType, CPlayer PlayerKilled, CInventoryItem InventoryItem) {
    testPINVOKE.CMissionManager_RegisterEvent__SWIG_2(swigCPtr, CPlayer.getCPtr(Owner), (int)MissionType, CPlayer.getCPtr(PlayerKilled), CInventoryItem.getCPtr(InventoryItem));
  }

  public void RegisterEvent(CPlayer Owner, MISSION_TYPE MissionType, CPlayer PlayerKilled) {
    testPINVOKE.CMissionManager_RegisterEvent__SWIG_3(swigCPtr, CPlayer.getCPtr(Owner), (int)MissionType, CPlayer.getCPtr(PlayerKilled));
  }

  public void RegisterEvent(CPlayer Owner, MISSION_TYPE MissionType) {
    testPINVOKE.CMissionManager_RegisterEvent__SWIG_4(swigCPtr, CPlayer.getCPtr(Owner), (int)MissionType);
  }

}
