/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class HEIGHT_TERRAIN : TERRAIN_TYPE {
  private HandleRef swigCPtr;

  internal HEIGHT_TERRAIN(IntPtr cPtr, bool cMemoryOwn) : base(testPINVOKE.HEIGHT_TERRAIN_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(HEIGHT_TERRAIN obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HEIGHT_TERRAIN() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_HEIGHT_TERRAIN(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SWIGTYPE_p_String Name {
    set {
      testPINVOKE.HEIGHT_TERRAIN_Name_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HEIGHT_TERRAIN_Name_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String HeightmapImage {
    set {
      testPINVOKE.HEIGHT_TERRAIN_HeightmapImage_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HEIGHT_TERRAIN_HeightmapImage_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String WorldTexture {
    set {
      testPINVOKE.HEIGHT_TERRAIN_WorldTexture_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HEIGHT_TERRAIN_WorldTexture_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String DetailTexture {
    set {
      testPINVOKE.HEIGHT_TERRAIN_DetailTexture_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HEIGHT_TERRAIN_DetailTexture_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_s32 DetailTile {
    set {
      testPINVOKE.HEIGHT_TERRAIN_DetailTile_set(swigCPtr, SWIGTYPE_p_s32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_s32 ret = new SWIGTYPE_p_s32(testPINVOKE.HEIGHT_TERRAIN_DetailTile_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 HeightmapRawSize {
    set {
      testPINVOKE.HEIGHT_TERRAIN_HeightmapRawSize_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HEIGHT_TERRAIN_HeightmapRawSize_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String HeightmapRawBpp {
    set {
      testPINVOKE.HEIGHT_TERRAIN_HeightmapRawBpp_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HEIGHT_TERRAIN_HeightmapRawBpp_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_s32 PageSize {
    set {
      testPINVOKE.HEIGHT_TERRAIN_PageSize_set(swigCPtr, SWIGTYPE_p_s32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_s32 ret = new SWIGTYPE_p_s32(testPINVOKE.HEIGHT_TERRAIN_PageSize_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 TileSize {
    set {
      testPINVOKE.HEIGHT_TERRAIN_TileSize_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HEIGHT_TERRAIN_TileSize_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 MaxPixelError {
    set {
      testPINVOKE.HEIGHT_TERRAIN_MaxPixelError_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HEIGHT_TERRAIN_MaxPixelError_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 PageWorldX {
    set {
      testPINVOKE.HEIGHT_TERRAIN_PageWorldX_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HEIGHT_TERRAIN_PageWorldX_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 PageWorldZ {
    set {
      testPINVOKE.HEIGHT_TERRAIN_PageWorldZ_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HEIGHT_TERRAIN_PageWorldZ_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 MaxHeight {
    set {
      testPINVOKE.HEIGHT_TERRAIN_MaxHeight_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HEIGHT_TERRAIN_MaxHeight_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_s32 MaxMipMapLevel {
    set {
      testPINVOKE.HEIGHT_TERRAIN_MaxMipMapLevel_set(swigCPtr, SWIGTYPE_p_s32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_s32 ret = new SWIGTYPE_p_s32(testPINVOKE.HEIGHT_TERRAIN_MaxMipMapLevel_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool VertexNormals {
    set {
      testPINVOKE.HEIGHT_TERRAIN_VertexNormals_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HEIGHT_TERRAIN_VertexNormals_get(swigCPtr);
      return ret;
    } 
  }

  public bool VertexColors {
    set {
      testPINVOKE.HEIGHT_TERRAIN_VertexColors_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HEIGHT_TERRAIN_VertexColors_get(swigCPtr);
      return ret;
    } 
  }

  public bool UseTriStrips {
    set {
      testPINVOKE.HEIGHT_TERRAIN_UseTriStrips_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HEIGHT_TERRAIN_UseTriStrips_get(swigCPtr);
      return ret;
    } 
  }

  public bool VertexProgramMorph {
    set {
      testPINVOKE.HEIGHT_TERRAIN_VertexProgramMorph_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HEIGHT_TERRAIN_VertexProgramMorph_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 LODMorphStart {
    set {
      testPINVOKE.HEIGHT_TERRAIN_LODMorphStart_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HEIGHT_TERRAIN_LODMorphStart_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String MorphLODFactorParamName {
    set {
      testPINVOKE.HEIGHT_TERRAIN_MorphLODFactorParamName_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HEIGHT_TERRAIN_MorphLODFactorParamName_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 MorphLODFactorParamIndex {
    set {
      testPINVOKE.HEIGHT_TERRAIN_MorphLODFactorParamIndex_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HEIGHT_TERRAIN_MorphLODFactorParamIndex_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String CustomMaterialName {
    set {
      testPINVOKE.HEIGHT_TERRAIN_CustomMaterialName_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HEIGHT_TERRAIN_CustomMaterialName_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_VectorT_String_t Splatting {
    set {
      testPINVOKE.HEIGHT_TERRAIN_Splatting_set(swigCPtr, SWIGTYPE_p_VectorT_String_t.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_VectorT_String_t ret = new SWIGTYPE_p_VectorT_String_t(testPINVOKE.HEIGHT_TERRAIN_Splatting_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public HEIGHT_TERRAIN() : this(testPINVOKE.new_HEIGHT_TERRAIN(), true) {
  }

}
