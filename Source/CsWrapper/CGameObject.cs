/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CGameObject : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CGameObject(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CGameObject obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CGameObject() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CGameObject(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public CGameObject(string Name) : this(testPINVOKE.new_CGameObject(Name), true) {
  }

  public void SetIsUpdatable(bool Value) {
    testPINVOKE.CGameObject_SetIsUpdatable(swigCPtr, Value);
  }

  public void SetPosition(SWIGTYPE_p_Vector3 Position) {
    testPINVOKE.CGameObject_SetPosition(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Position));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAnimationState(E_ANIM_STATE State) {
    testPINVOKE.CGameObject_SetAnimationState(swigCPtr, (int)State);
  }

  public void SetAnimationMappings(SWIGTYPE_p_MapT_Core__E_ANIM_STATE_Core__SoundToAnimation_p_t AnimationMaps, bool Loop) {
    testPINVOKE.CGameObject_SetAnimationMappings(swigCPtr, SWIGTYPE_p_MapT_Core__E_ANIM_STATE_Core__SoundToAnimation_p_t.getCPtr(AnimationMaps), Loop);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Update(SWIGTYPE_p_f32 elapsedTime) {
    testPINVOKE.CGameObject_Update(swigCPtr, SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_String Name {
    set {
      testPINVOKE.CGameObject_Name_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.CGameObject_Name_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String GameObjectType {
    set {
      testPINVOKE.CGameObject_GameObjectType_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.CGameObject_GameObjectType_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_SceneNode Node {
    set {
      testPINVOKE.CGameObject_Node_set(swigCPtr, SWIGTYPE_p_SceneNode.getCPtr(value));
    } 
    get {
      IntPtr cPtr = testPINVOKE.CGameObject_Node_get(swigCPtr);
      SWIGTYPE_p_SceneNode ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_SceneNode(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_Entity Entity {
    set {
      testPINVOKE.CGameObject_Entity_set(swigCPtr, SWIGTYPE_p_Entity.getCPtr(value));
    } 
    get {
      IntPtr cPtr = testPINVOKE.CGameObject_Entity_get(swigCPtr);
      SWIGTYPE_p_Entity ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Entity(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_void AttachedData {
    set {
      testPINVOKE.CGameObject_AttachedData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = testPINVOKE.CGameObject_AttachedData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public CPhysicsProfile PhysicsProfile {
    set {
      testPINVOKE.CGameObject_PhysicsProfile_set(swigCPtr, CPhysicsProfile.getCPtr(value));
    } 
    get {
      IntPtr cPtr = testPINVOKE.CGameObject_PhysicsProfile_get(swigCPtr);
      CPhysicsProfile ret = (cPtr == IntPtr.Zero) ? null : new CPhysicsProfile(cPtr, false);
      return ret;
    } 
  }

  public ENVIRONMENT_ATTRIBUTE_TYPE EnvironmentType {
    set {
      testPINVOKE.CGameObject_EnvironmentType_set(swigCPtr, (int)value);
    } 
    get {
      ENVIRONMENT_ATTRIBUTE_TYPE ret = (ENVIRONMENT_ATTRIBUTE_TYPE)testPINVOKE.CGameObject_EnvironmentType_get(swigCPtr);
      return ret;
    } 
  }

}
