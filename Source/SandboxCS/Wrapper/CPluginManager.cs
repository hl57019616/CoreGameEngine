/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CPluginManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CPluginManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CPluginManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CPluginManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CPluginManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static CPluginManager Instance() {
    IntPtr cPtr = testPINVOKE.CPluginManager_Instance();
    CPluginManager ret = (cPtr == IntPtr.Zero) ? null : new CPluginManager(cPtr, false);
    return ret;
  }

  public bool LoadPlugin(string FileName) {
    bool ret = testPINVOKE.CPluginManager_LoadPlugin(swigCPtr, FileName);
    return ret;
  }

  public SWIGTYPE_p_VectorT_Core__Plugin__IGameObjectFactory_p_t GetGameObjectFactories() {
    SWIGTYPE_p_VectorT_Core__Plugin__IGameObjectFactory_p_t ret = new SWIGTYPE_p_VectorT_Core__Plugin__IGameObjectFactory_p_t(testPINVOKE.CPluginManager_GetGameObjectFactories(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_VectorT_Core__Plugin__IConsoleParser_p_t GetConsoleParsers() {
    SWIGTYPE_p_VectorT_Core__Plugin__IConsoleParser_p_t ret = new SWIGTYPE_p_VectorT_Core__Plugin__IConsoleParser_p_t(testPINVOKE.CPluginManager_GetConsoleParsers(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_VectorT_Core__Plugin__IMissionFactory_p_t GetMissionFactories() {
    SWIGTYPE_p_VectorT_Core__Plugin__IMissionFactory_p_t ret = new SWIGTYPE_p_VectorT_Core__Plugin__IMissionFactory_p_t(testPINVOKE.CPluginManager_GetMissionFactories(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_VectorT_Core__Plugin__IAiStateFactory_p_t GetAiStateFactories() {
    SWIGTYPE_p_VectorT_Core__Plugin__IAiStateFactory_p_t ret = new SWIGTYPE_p_VectorT_Core__Plugin__IAiStateFactory_p_t(testPINVOKE.CPluginManager_GetAiStateFactories(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_VectorT_Core__Plugin__IPlayerFactory_p_t GetPlayerFactories() {
    SWIGTYPE_p_VectorT_Core__Plugin__IPlayerFactory_p_t ret = new SWIGTYPE_p_VectorT_Core__Plugin__IPlayerFactory_p_t(testPINVOKE.CPluginManager_GetPlayerFactories(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_VectorT_Core__Plugin__IBuildingFactory_p_t GetBuildingFactories() {
    SWIGTYPE_p_VectorT_Core__Plugin__IBuildingFactory_p_t ret = new SWIGTYPE_p_VectorT_Core__Plugin__IBuildingFactory_p_t(testPINVOKE.CPluginManager_GetBuildingFactories(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_VectorT_Core__Plugin__IParticleFactory_p_t GetParticleFactories() {
    SWIGTYPE_p_VectorT_Core__Plugin__IParticleFactory_p_t ret = new SWIGTYPE_p_VectorT_Core__Plugin__IParticleFactory_p_t(testPINVOKE.CPluginManager_GetParticleFactories(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_VectorT_Core__Plugin__ICameraFactory_p_t GetCameraFactories() {
    SWIGTYPE_p_VectorT_Core__Plugin__ICameraFactory_p_t ret = new SWIGTYPE_p_VectorT_Core__Plugin__ICameraFactory_p_t(testPINVOKE.CPluginManager_GetCameraFactories(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_VectorT_Core__Plugin__IPostEffectFactory_p_t GetPostEffectFactories() {
    SWIGTYPE_p_VectorT_Core__Plugin__IPostEffectFactory_p_t ret = new SWIGTYPE_p_VectorT_Core__Plugin__IPostEffectFactory_p_t(testPINVOKE.CPluginManager_GetPostEffectFactories(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_VectorT_Core__Plugin__IPhysicsStrategyFactory_p_t GetPhysicsStrategyFactoryies() {
    SWIGTYPE_p_VectorT_Core__Plugin__IPhysicsStrategyFactory_p_t ret = new SWIGTYPE_p_VectorT_Core__Plugin__IPhysicsStrategyFactory_p_t(testPINVOKE.CPluginManager_GetPhysicsStrategyFactoryies(swigCPtr), false);
    return ret;
  }

}
