#if 0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#include "AnimationMapping.h"
#include "CBuilding.h"
#include "CCameraManager.h"
#include "CCharacterState.h"
#include "CCharacterStateManager.h"
#include "CEffectsManager.h"
#include "CEntityEffect.h"
#include "CGame.h"
#include "CGameManager.h"
#include "CGameObject.h"
#include "CGameObjectManager.h"
#include "CGameState.h"
#include "CGuiManager.h"
#include "CGuiStrategy_MyGui.h"
#include "CInputManager.h"
#include "CInventoryItem.h"
#include "CItemProfile.h"
#include "CItemsManager.h"
#include "CLoadingScreen.h"
#include "CLuaConsole.h"
#include "CMagazine.h"
#include "CMenuState.h"
#include "CMissionManager.h"
#include "CNatureManager.h"
#include "CoreEngine.h"
#include "CoreStructures.h"
#include "CParticleEffect.h"
#include "CPhysicsManager.h"
#include "CPhysicsProfile.h"
#include "CPlayer.h"
#include "CPlayerPimpl.h"
#include "CPlayerSoundComponent.h"
#include "CPluginManager.h"
#include "CPostEffect.h"
#include "CPrecisionTimer.h"
#include "CProjectile.h"
#include "CScrollingMessage.h"
#include "CSpawnManager.h"
#include "CTrainingManager.h"
#include "CVolumeObject.h"
#include "CWeapon.h"
#include "CWeaponProfile.h"
#include "CWorldProfile.h"
#include "IAgentSteer.h"
#include "MissionEvents.h"
#include "MovableTextOverlay.h"
#include "PhysicsStructures.h"
#include "PlayerEnums.h"
#include "SceneImporterPackage.h"
#include "Structures.h"


//using namespace Core;

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __cdecl
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_test(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_test(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_test(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoundToAnimation(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::SoundToAnimation *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::SoundToAnimation *)new Core::SoundToAnimation((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundToAnimation_Animation_set(void * jarg1, char * jarg2) {
  Core::SoundToAnimation *arg1 = (Core::SoundToAnimation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::SoundToAnimation *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->Animation = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->Animation, (const char *)arg2);
    } else {
      arg1->Animation = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SoundToAnimation_Animation_get(void * jarg1) {
  char * jresult ;
  Core::SoundToAnimation *arg1 = (Core::SoundToAnimation *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::SoundToAnimation *)jarg1; 
  result = (char *) ((arg1)->Animation);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundToAnimation_AnimSound_set(void * jarg1, char * jarg2) {
  Core::SoundToAnimation *arg1 = (Core::SoundToAnimation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::SoundToAnimation *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->AnimSound = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->AnimSound, (const char *)arg2);
    } else {
      arg1->AnimSound = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SoundToAnimation_AnimSound_get(void * jarg1) {
  char * jresult ;
  Core::SoundToAnimation *arg1 = (Core::SoundToAnimation *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::SoundToAnimation *)jarg1; 
  result = (char *) ((arg1)->AnimSound);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoundToAnimation(void * jarg1) {
  Core::SoundToAnimation *arg1 = (Core::SoundToAnimation *) 0 ;
  
  arg1 = (Core::SoundToAnimation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CBuilding(void * jarg1) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_Update(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  f32 *arg2 = 0 ;
  OIS::Keyboard *arg3 = (OIS::Keyboard *) 0 ;
  OIS::Mouse *arg4 = (OIS::Mouse *) 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg3 = (OIS::Keyboard *)jarg3; 
  arg4 = (OIS::Mouse *)jarg4; 
  (arg1)->Update((f32 const &)*arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBuilding_GetNode(void * jarg1) {
  void * jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  SceneNode *result = 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (SceneNode *)(arg1)->GetNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBuilding_GetEntity(void * jarg1) {
  void * jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Entity *result = 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (Entity *)(arg1)->GetEntity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBuilding_GetHealth(void * jarg1) {
  void * jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  f32 result;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (arg1)->GetHealth();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBuilding_GetViewRange(void * jarg1) {
  void * jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  f32 result;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (arg1)->GetViewRange();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CBuilding_GetState(void * jarg1) {
  int jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::E_BUILDING_STATE result;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (Core::E_BUILDING_STATE)(arg1)->GetState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBuilding_GetAiVehicle(void * jarg1) {
  void * jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::AI::CFpsVehicle *result = 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (Core::AI::CFpsVehicle *)(arg1)->GetAiVehicle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CBuilding_GetTeam(void * jarg1) {
  int jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::E_PLAYER_TEAM result;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (Core::E_PLAYER_TEAM)(arg1)->GetTeam();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBuilding_GetPosition(void * jarg1) {
  void * jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (arg1)->GetPosition();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CBuilding_GetName(void * jarg1) {
  char * jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CBuilding_GetBuildingType(void * jarg1) {
  char * jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (char *)(arg1)->GetBuildingType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBuilding_GetIsVisible(void * jarg1) {
  unsigned int jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  bool result;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (bool)(arg1)->GetIsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBuilding_GetItems(void * jarg1) {
  void * jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  SwigValueWrapper< Vector< Core::CInventoryItem * > > result;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (arg1)->GetItems();
  jresult = new Vector< Core::CInventoryItem * >((const Vector< Core::CInventoryItem * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBuilding_GetAiTarget(void * jarg1) {
  void * jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::AI::CFpsVehicle *result = 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (Core::AI::CFpsVehicle *)(arg1)->GetAiTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CBuilding_GetLoSType(void * jarg1) {
  int jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::E_LOS_TYPE result;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (Core::E_LOS_TYPE)(arg1)->GetLoSType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CBuilding_GetCategory(void * jarg1) {
  int jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::E_BUILDING_CATEGORY result;
  
  arg1 = (Core::CBuilding *)jarg1; 
  result = (Core::E_BUILDING_CATEGORY)(arg1)->GetCategory();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_SetHealth(void * jarg1, void * jarg2) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetHealth((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_SetViewRange(void * jarg1, void * jarg2) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetViewRange((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_SetTeam(void * jarg1, int jarg2) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::E_PLAYER_TEAM arg2 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::E_PLAYER_TEAM)jarg2; 
  (arg1)->SetTeam(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_SetAiTarget(void * jarg1, void * jarg2) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::AI::CFpsVehicle *arg2 = (Core::AI::CFpsVehicle *) 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::AI::CFpsVehicle *)jarg2; 
  (arg1)->SetAiTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_SetPosition(void * jarg1, void * jarg2) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPosition((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_SetCategory(void * jarg1, int jarg2) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::E_BUILDING_CATEGORY arg2 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::E_BUILDING_CATEGORY)jarg2; 
  (arg1)->SetCategory(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBuilding_CanSee(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->CanSee((Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_AddItem(void * jarg1, void * jarg2) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  (arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_RemoveItem(void * jarg1, void * jarg2) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  (arg1)->RemoveItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_RemoveAllItems(void * jarg1) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  (arg1)->RemoveAllItems();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_UseItem__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *arg3 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::CInventoryItem *)jarg3; 
  (arg1)->UseItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_UseItem__SWIG_1(void * jarg1, void * jarg2) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  (arg1)->UseItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_UseItem__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::CGameObject *arg2 = (Core::CGameObject *) 0 ;
  Core::CInventoryItem *arg3 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::CGameObject *)jarg2; 
  arg3 = (Core::CInventoryItem *)jarg3; 
  (arg1)->UseItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_UseItem__SWIG_3(void * jarg1, void * jarg2) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::CGameObject *arg2 = (Core::CGameObject *) 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::CGameObject *)jarg2; 
  (arg1)->UseItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_OnHit__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::CProjectile *arg2 = (Core::CProjectile *) 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::CProjectile *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->OnHit(arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_OnHit__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  arg3 = (Core::CPlayer *)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->OnHit(arg2,arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_OnKill__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CProjectile *arg3 = (Core::CProjectile *) 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::CProjectile *)jarg3; 
  (arg1)->OnKill(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBuilding_OnKill__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Core::CBuilding *arg1 = (Core::CBuilding *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *arg3 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CBuilding *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::CInventoryItem *)jarg3; 
  (arg1)->OnKill(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCameraManager_Instance() {
  void * jresult ;
  Core::CCameraManager *result = 0 ;
  
  result = (Core::CCameraManager *)Core::CCameraManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCameraManager(void * jarg1) {
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCameraManager_GetMode(void * jarg1) {
  int jresult ;
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  Core::E_CAMERA_MODE result;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  result = (Core::E_CAMERA_MODE)(arg1)->GetMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCameraManager_GetCamera(void * jarg1) {
  void * jresult ;
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  Camera *result = 0 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  result = (Camera *)(arg1)->GetCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCameraManager_GetViewport(void * jarg1) {
  void * jresult ;
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  Viewport *result = 0 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  result = (Viewport *)(arg1)->GetViewport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCameraManager_GetCameraPos(void * jarg1) {
  void * jresult ;
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  result = (arg1)->GetCameraPos();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCameraManager_GetCameras(void * jarg1) {
  void * jresult ;
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  Vector< Core::ICamera * > *result = 0 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  result = (Vector< Core::ICamera * > *) &(arg1)->GetCameras();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCameraManager_GetIsPlayerFriendly(void * jarg1) {
  unsigned int jresult ;
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  bool result;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  result = (bool)(arg1)->GetIsPlayerFriendly();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCameraManager_GetCameraNode(void * jarg1) {
  void * jresult ;
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  SceneNode *result = 0 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  result = (SceneNode *)(arg1)->GetCameraNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCameraManager_GetTargetNode(void * jarg1) {
  void * jresult ;
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  SceneNode *result = 0 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  result = (SceneNode *)(arg1)->GetTargetNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCameraManager_GetFarClipDistance(void * jarg1) {
  void * jresult ;
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  f32 result;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  result = (arg1)->GetFarClipDistance();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCameraManager_SetMoveSpeed(void * jarg1, void * jarg2) {
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetMoveSpeed((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCameraManager_SetEnabled(void * jarg1, unsigned int jarg2) {
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEnabled(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCameraManager_SetCameraPos(void * jarg1, void * jarg2) {
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  (arg1)->SetCameraPos(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCameraManager_SetCurrCamera(void * jarg1, void * jarg2) {
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetCurrCamera(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCameraManager_IsHaveMode(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  Core::E_CAMERA_MODE arg2 ;
  bool result;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  arg2 = (Core::E_CAMERA_MODE)jarg2; 
  result = (bool)(arg1)->IsHaveMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCameraManager_RemoveAllCameras(void * jarg1) {
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  (arg1)->RemoveAllCameras();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCameraManager_Shutdown(void * jarg1) {
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCameraManager_Restart(void * jarg1) {
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  (arg1)->Restart();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCameraManager_CreateCamera__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  Core::E_CAMERA_MODE arg2 ;
  SceneNode *arg3 = (SceneNode *) 0 ;
  s32 result;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  arg2 = (Core::E_CAMERA_MODE)jarg2; 
  arg3 = (SceneNode *)jarg3; 
  result = (arg1)->CreateCamera(arg2,arg3);
  jresult = new s32((const s32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCameraManager_CreateCamera__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  Core::E_CAMERA_MODE arg2 ;
  s32 result;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  arg2 = (Core::E_CAMERA_MODE)jarg2; 
  result = (arg1)->CreateCamera(arg2);
  jresult = new s32((const s32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCameraManager_Update__SWIG_0(void * jarg1, void * jarg2) {
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCameraManager_Update__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  Core::CCameraManager *arg1 = (Core::CCameraManager *) 0 ;
  f32 *arg2 = 0 ;
  Core::E_CAMERA_MODE arg3 ;
  
  arg1 = (Core::CCameraManager *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg3 = (Core::E_CAMERA_MODE)jarg3; 
  (arg1)->Update((f32 const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterState_Update(void * jarg1, void * jarg2) {
  int jresult ;
  Core::AI::CCharacterState *arg1 = (Core::AI::CCharacterState *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterState *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->Update(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterState_GetOutcomeState(void * jarg1) {
  int jresult ;
  Core::AI::CCharacterState *arg1 = (Core::AI::CCharacterState *) 0 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterState *)jarg1; 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->GetOutcomeState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterState_GetStateType(void * jarg1) {
  int jresult ;
  Core::AI::CCharacterState *arg1 = (Core::AI::CCharacterState *) 0 ;
  Core::E_PLAYER_STATE result;
  
  arg1 = (Core::AI::CCharacterState *)jarg1; 
  result = (Core::E_PLAYER_STATE)(arg1)->GetStateType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCharacterState_GetStateName(void * jarg1) {
  char * jresult ;
  Core::AI::CCharacterState *arg1 = (Core::AI::CCharacterState *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::AI::CCharacterState *)jarg1; 
  result = (char *)(arg1)->GetStateName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCharacterState_GetLevel(void * jarg1) {
  void * jresult ;
  Core::AI::CCharacterState *arg1 = (Core::AI::CCharacterState *) 0 ;
  u32 result;
  
  arg1 = (Core::AI::CCharacterState *)jarg1; 
  result = (arg1)->GetLevel();
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCharacterState(void * jarg1) {
  Core::AI::CCharacterState *arg1 = (Core::AI::CCharacterState *) 0 ;
  
  arg1 = (Core::AI::CCharacterState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCharacterStateManager_Instance() {
  void * jresult ;
  Core::AI::CCharacterStateManager *result = 0 ;
  
  result = (Core::AI::CCharacterStateManager *)Core::AI::CCharacterStateManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCharacterStateManager(void * jarg1) {
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCharacterStateManager_GetState__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Core::E_PLAYER_STATE arg2 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  u32 arg4 ;
  u32 *argp4 ;
  Core::AI::CCharacterState *result = 0 ;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Core::E_PLAYER_STATE)jarg2; 
  arg3 = (Core::CPlayer *)jarg3; 
  argp4 = (u32 *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (Core::AI::CCharacterState *)(arg1)->GetState(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCharacterStateManager_GetState__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Core::E_PLAYER_STATE arg2 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  Core::AI::CCharacterState *result = 0 ;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Core::E_PLAYER_STATE)jarg2; 
  arg3 = (Core::CPlayer *)jarg3; 
  result = (Core::AI::CCharacterState *)(arg1)->GetState(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCharacterStateManager_GetState__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  Core::AI::CCharacterState *result = 0 ;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Core::CPlayer *)jarg3; 
  result = (Core::AI::CCharacterState *)(arg1)->GetState((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCharacterStateManager_GetAllStates(void * jarg1, void * jarg2) {
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Vector< char const * > *arg2 = 0 ;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Vector< char const * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< char const * > & type is null", 0);
    return ;
  } 
  (arg1)->GetAllStates(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCharacterStateManager_GetLoadedStates(void * jarg1, void * jarg2) {
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Vector< String > *arg2 = 0 ;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Vector< String > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< String > & type is null", 0);
    return ;
  } 
  (arg1)->GetLoadedStates(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCharacterStateManager_AddPath(void * jarg1, char * jarg2, void * jarg3) {
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Vector< Vector3 > *arg3 = 0 ;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Vector< Vector3 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Vector3 > const & type is null", 0);
    return ;
  } 
  (arg1)->AddPath((char const *)arg2,(Vector< Vector3 > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCharacterStateManager_GetPathCount(void * jarg1) {
  void * jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  u32 result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  result = (arg1)->GetPathCount();
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCharacterStateManager_GetPathByName(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Vector< Vector3 > *arg3 = 0 ;
  bool result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Vector< Vector3 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Vector3 > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetPathByName((char const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCharacterStateManager_GetPathByIndex__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  u32 arg2 ;
  Vector< Vector3 > *arg3 = 0 ;
  char **arg4 = (char **) 0 ;
  u32 *argp2 ;
  bool result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Vector< Vector3 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Vector3 > & type is null", 0);
    return 0;
  } 
  arg4 = (char **)jarg4; 
  result = (bool)(arg1)->GetPathByIndex(arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCharacterStateManager_GetPathByIndex__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  u32 arg2 ;
  Vector< Vector3 > *arg3 = 0 ;
  u32 *argp2 ;
  bool result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Vector< Vector3 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Vector3 > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetPathByIndex(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCharacterStateManager_GetPathByPoint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector< Vector3 > *arg3 = 0 ;
  char **arg4 = (char **) 0 ;
  bool result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector< Vector3 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Vector3 > & type is null", 0);
    return 0;
  } 
  arg4 = (char **)jarg4; 
  result = (bool)(arg1)->GetPathByPoint((Vector3 const &)*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCharacterStateManager_GetPathByPoint__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector< Vector3 > *arg3 = 0 ;
  bool result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector< Vector3 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Vector3 > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetPathByPoint((Vector3 const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCharacterStateManager_GetAllPaths(void * jarg1, void * jarg2) {
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Core::AI::PathDefinition *arg2 = 0 ;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Core::AI::PathDefinition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Core::AI::PathDefinition & type is null", 0);
    return ;
  } 
  (arg1)->GetAllPaths(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCharacterStateManager_SetName(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->SetName((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterStateManager_SeekVehicle__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  f32 *arg3 = 0 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (f32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->SeekVehicle(arg2,(f32 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterStateManager_SeekVehicle__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  f32 *arg3 = 0 ;
  f32 *arg4 = 0 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (f32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->SeekVehicle(arg2,(f32 const &)*arg3,(f32 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterStateManager_SeekPosition(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Vector3 *arg3 = 0 ;
  f32 *arg4 = 0 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->SeekPosition(arg2,(Vector3 const &)*arg3,(f32 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterStateManager_Wander(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  f32 *arg3 = 0 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (f32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->Wander(arg2,(f32 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterStateManager_Search(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  f32 *arg3 = 0 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (f32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->Search(arg2,(f32 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterStateManager_CenterOfMass__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  SwigValueWrapper< Vector< Core::CPlayer * > > arg2 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  f32 *arg4 = 0 ;
  f32 *arg5 = 0 ;
  f32 *arg6 = 0 ;
  Vector< Core::CPlayer * > const *argp2 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  argp2 = (Vector< Core::CPlayer * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector< Core::CPlayer * > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Core::CPlayer *)jarg3; 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg5 = (f32 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg6 = (f32 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->CenterOfMass(arg2,arg3,(f32 const &)*arg4,(f32 const &)*arg5,(f32 const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterStateManager_CenterOfMass__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  SwigValueWrapper< Vector< Core::CPlayer * > > arg2 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  f32 *arg4 = 0 ;
  f32 *arg5 = 0 ;
  Vector< Core::CPlayer * > const *argp2 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  argp2 = (Vector< Core::CPlayer * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector< Core::CPlayer * > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Core::CPlayer *)jarg3; 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg5 = (f32 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->CenterOfMass(arg2,arg3,(f32 const &)*arg4,(f32 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterStateManager_AlignWithGroup__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  SwigValueWrapper< Vector< Core::CPlayer * > > arg2 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  f32 *arg4 = 0 ;
  f32 *arg5 = 0 ;
  f32 *arg6 = 0 ;
  Vector< Core::CPlayer * > const *argp2 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  argp2 = (Vector< Core::CPlayer * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector< Core::CPlayer * > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Core::CPlayer *)jarg3; 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg5 = (f32 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg6 = (f32 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->AlignWithGroup(arg2,arg3,(f32 const &)*arg4,(f32 const &)*arg5,(f32 const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterStateManager_AlignWithGroup__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  SwigValueWrapper< Vector< Core::CPlayer * > > arg2 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  f32 *arg4 = 0 ;
  f32 *arg5 = 0 ;
  Vector< Core::CPlayer * > const *argp2 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  argp2 = (Vector< Core::CPlayer * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector< Core::CPlayer * > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Core::CPlayer *)jarg3; 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg5 = (f32 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->AlignWithGroup(arg2,arg3,(f32 const &)*arg4,(f32 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterStateManager_SeparateFromGroup__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  SwigValueWrapper< Vector< Core::CPlayer * > > arg2 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  f32 *arg4 = 0 ;
  f32 *arg5 = 0 ;
  f32 *arg6 = 0 ;
  Vector< Core::CPlayer * > const *argp2 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  argp2 = (Vector< Core::CPlayer * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector< Core::CPlayer * > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Core::CPlayer *)jarg3; 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg5 = (f32 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg6 = (f32 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->SeparateFromGroup(arg2,arg3,(f32 const &)*arg4,(f32 const &)*arg5,(f32 const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterStateManager_SeparateFromGroup__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  SwigValueWrapper< Vector< Core::CPlayer * > > arg2 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  f32 *arg4 = 0 ;
  f32 *arg5 = 0 ;
  Vector< Core::CPlayer * > const *argp2 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  argp2 = (Vector< Core::CPlayer * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector< Core::CPlayer * > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Core::CPlayer *)jarg3; 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg5 = (f32 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->SeparateFromGroup(arg2,arg3,(f32 const &)*arg4,(f32 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCharacterStateManager_EvadeVehicle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  Core::AI::CCharacterStateManager *arg1 = (Core::AI::CCharacterStateManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  f32 *arg4 = 0 ;
  f32 *arg5 = 0 ;
  Core::AI::E_CHARACTER_STATE_OUTCOME result;
  
  arg1 = (Core::AI::CCharacterStateManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::CPlayer *)jarg3; 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg5 = (f32 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::AI::E_CHARACTER_STATE_OUTCOME)(arg1)->EvadeVehicle(arg2,arg3,(f32 const &)*arg4,(f32 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEffectsManager_Instance() {
  void * jresult ;
  Core::Effects::CEffectsManager *result = 0 ;
  
  result = (Core::Effects::CEffectsManager *)Core::Effects::CEffectsManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CEffectsManager(void * jarg1) {
  Core::Effects::CEffectsManager *arg1 = (Core::Effects::CEffectsManager *) 0 ;
  
  arg1 = (Core::Effects::CEffectsManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEffectsManager_TogglePostEffects(void * jarg1, char * jarg2, unsigned int jarg3) {
  Core::Effects::CEffectsManager *arg1 = (Core::Effects::CEffectsManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (Core::Effects::CEffectsManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->TogglePostEffects((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEffectsManager_GetPostEffect(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::Effects::CEffectsManager *arg1 = (Core::Effects::CEffectsManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::Effects::CPostEffect *result = 0 ;
  
  arg1 = (Core::Effects::CEffectsManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::Effects::CPostEffect *)(arg1)->GetPostEffect((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEffectsManager_CreateParticle(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::Effects::CEffectsManager *arg1 = (Core::Effects::CEffectsManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::Effects::CParticleEffect *result = 0 ;
  
  arg1 = (Core::Effects::CEffectsManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::Effects::CParticleEffect *)(arg1)->CreateParticle((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEffectsManager_GetParticle(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::Effects::CEffectsManager *arg1 = (Core::Effects::CEffectsManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::Effects::CParticleEffect *result = 0 ;
  
  arg1 = (Core::Effects::CEffectsManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::Effects::CParticleEffect *)(arg1)->GetParticle((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEffectsManager_Update(void * jarg1, void * jarg2) {
  Core::Effects::CEffectsManager *arg1 = (Core::Effects::CEffectsManager *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Effects::CEffectsManager *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEffectsManager_ReInit(void * jarg1) {
  Core::Effects::CEffectsManager *arg1 = (Core::Effects::CEffectsManager *) 0 ;
  
  arg1 = (Core::Effects::CEffectsManager *)jarg1; 
  (arg1)->ReInit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEntityEffect_AddEffectToGameObject(void * jarg1, void * jarg2) {
  Core::Effects::CEntityEffect *arg1 = (Core::Effects::CEntityEffect *) 0 ;
  Core::CGameObject *arg2 = (Core::CGameObject *) 0 ;
  
  arg1 = (Core::Effects::CEntityEffect *)jarg1; 
  arg2 = (Core::CGameObject *)jarg2; 
  (arg1)->AddEffectToGameObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEntityEffect_RemoveEffectFromGameObject(void * jarg1) {
  Core::Effects::CEntityEffect *arg1 = (Core::Effects::CEntityEffect *) 0 ;
  
  arg1 = (Core::Effects::CEntityEffect *)jarg1; 
  (arg1)->RemoveEffectFromGameObject();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEntityEffect_GetName(void * jarg1) {
  char * jresult ;
  Core::Effects::CEntityEffect *arg1 = (Core::Effects::CEntityEffect *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::Effects::CEntityEffect *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CEntityEffect(void * jarg1) {
  Core::Effects::CEntityEffect *arg1 = (Core::Effects::CEntityEffect *) 0 ;
  
  arg1 = (Core::Effects::CEntityEffect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CGame() {
  void * jresult ;
  Core::CGame *result = 0 ;
  
  result = (Core::CGame *)new Core::CGame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CGame(void * jarg1) {
  Core::CGame *arg1 = (Core::CGame *) 0 ;
  
  arg1 = (Core::CGame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGame_Run(void * jarg1) {
  Core::CGame *arg1 = (Core::CGame *) 0 ;
  
  arg1 = (Core::CGame *)jarg1; 
  (arg1)->Run();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGame_AddGameState(void * jarg1, void * jarg2) {
  Core::CGame *arg1 = (Core::CGame *) 0 ;
  Core::CGameState *arg2 = (Core::CGameState *) 0 ;
  
  arg1 = (Core::CGame *)jarg1; 
  arg2 = (Core::CGameState *)jarg2; 
  (arg1)->AddGameState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGame_AdvanceState(void * jarg1) {
  Core::CGame *arg1 = (Core::CGame *) 0 ;
  
  arg1 = (Core::CGame *)jarg1; 
  (arg1)->AdvanceState();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_isSupportShaders_set(void * jarg1, unsigned int jarg2) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSupportShaders = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGameManager_isSupportShaders_get(void * jarg1) {
  unsigned int jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  bool result;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (bool) ((arg1)->isSupportShaders);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameManager_Instance() {
  void * jresult ;
  Core::CGameManager *result = 0 ;
  
  result = (Core::CGameManager *)Core::CGameManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CGameManager(void * jarg1) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameManager_GetEngineDevice(void * jarg1) {
  void * jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  EngineDevice *result = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (EngineDevice *)(arg1)->GetEngineDevice();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameManager_GetSceneManager(void * jarg1) {
  void * jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  SceneManager *result = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (SceneManager *)(arg1)->GetSceneManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameManager_GetRenderWindow(void * jarg1) {
  void * jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  RenderWindow *result = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (RenderWindow *)(arg1)->GetRenderWindow();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameManager_GetTimer(void * jarg1) {
  void * jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  Timer *result = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (Timer *)(arg1)->GetTimer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CGameManager_GetVideoDeviceType(void * jarg1) {
  int jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  Core::E_DRIVER_TYPE result;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (Core::E_DRIVER_TYPE)(arg1)->GetVideoDeviceType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_SetEngineDevice(void * jarg1, void * jarg2) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  EngineDevice *arg2 = (EngineDevice *) 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (EngineDevice *)jarg2; 
  (arg1)->SetEngineDevice(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_SetSceneManager(void * jarg1, void * jarg2) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  SceneManager *arg2 = (SceneManager *) 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (SceneManager *)jarg2; 
  (arg1)->SetSceneManager(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_SetRenderWindow(void * jarg1, void * jarg2) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  RenderWindow *arg2 = (RenderWindow *) 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (RenderWindow *)jarg2; 
  (arg1)->SetRenderWindow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_SetGame(void * jarg1, void * jarg2) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  Core::CGame *arg2 = (Core::CGame *) 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (Core::CGame *)jarg2; 
  (arg1)->SetGame(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_SetQuit(void * jarg1, unsigned int jarg2) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetQuit(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGameManager_GetQuit(void * jarg1) {
  unsigned int jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  bool result;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (bool)(arg1)->GetQuit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_AdvanceGameState(void * jarg1) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  (arg1)->AdvanceGameState();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_UpdateGame(void * jarg1, void * jarg2) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->UpdateGame((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_Shutdown(void * jarg1) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGameManager_GetConsoleVisible(void * jarg1) {
  unsigned int jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  bool result;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (bool)(arg1)->GetConsoleVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_SetConsoleVisible(void * jarg1, unsigned int jarg2) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConsoleVisible(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_AddResourceArchive(void * jarg1, char * jarg2, char * jarg3) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->AddResourceArchive((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_RemoveResourceArchive(void * jarg1, char * jarg2, char * jarg3) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->RemoveResourceArchive((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGameManager_SaveGame(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SaveGame((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGameManager_LoadGame(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  char *arg2 = (char *) 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->LoadGame((char const *)arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_SetStaticData(void * jarg1, void * jarg2) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return ;
  } 
  (arg1)->SetStaticData((String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameManager_GetStaticData(void * jarg1) {
  void * jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  String *result = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (String *) &(arg1)->GetStaticData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_SetBaseResourceName(void * jarg1, void * jarg2) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return ;
  } 
  (arg1)->SetBaseResourceName((String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameManager_SetBaseAudioResourceName(void * jarg1, void * jarg2) {
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return ;
  } 
  (arg1)->SetBaseAudioResourceName((String const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGameManager_GetBaseResourceName(void * jarg1) {
  char * jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (char *)(arg1)->GetBaseResourceName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGameManager_GetBaseAudioResourceName(void * jarg1) {
  char * jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (char *)(arg1)->GetBaseAudioResourceName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGameManager_GetScriptPath(void * jarg1) {
  char * jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (char *)(arg1)->GetScriptPath();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGameManager_GetDefaultPhysicsStrategy(void * jarg1) {
  char * jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (char *)(arg1)->GetDefaultPhysicsStrategy();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CGameManager_GetDefaultDatabaseName(void * jarg1) {
  char * jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  result = (char *)(arg1)->GetDefaultDatabaseName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameManager_CreateScene(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Core::CGameManager *arg1 = (Core::CGameManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  SceneManager *result = 0 ;
  
  arg1 = (Core::CGameManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (SceneManager *)(arg1)->CreateScene((char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CGameObject(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  Core::CGameObject *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (Core::CGameObject *)new Core::CGameObject((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CGameObject(void * jarg1) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObject_SetIsUpdatable(void * jarg1, unsigned int jarg2) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsUpdatable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObject_SetPosition(void * jarg1, void * jarg2) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPosition((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObject_SetAnimationState(void * jarg1, int jarg2) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  Core::E_ANIM_STATE arg2 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  arg2 = (Core::E_ANIM_STATE)jarg2; 
  (arg1)->SetAnimationState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObject_SetAnimationMappings(void * jarg1, void * jarg2, unsigned int jarg3) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  Map< Core::E_ANIM_STATE,Core::SoundToAnimation * > *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  arg2 = (Map< Core::E_ANIM_STATE,Core::SoundToAnimation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Map< Core::E_ANIM_STATE,Core::SoundToAnimation * > const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetAnimationMappings((Map< Core::E_ANIM_STATE,Core::SoundToAnimation * > const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObject_Update(void * jarg1, void * jarg2) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObject_Name_set(void * jarg1, void * jarg2) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObject_Name_get(void * jarg1) {
  void * jresult ;
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  String result;
  
  arg1 = (Core::CGameObject *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObject_GameObjectType_set(void * jarg1, void * jarg2) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->GameObjectType = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObject_GameObjectType_get(void * jarg1) {
  void * jresult ;
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  String result;
  
  arg1 = (Core::CGameObject *)jarg1; 
  result =  ((arg1)->GameObjectType);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObject_Node_set(void * jarg1, void * jarg2) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  SceneNode *arg2 = (SceneNode *) 0 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  arg2 = (SceneNode *)jarg2; 
  if (arg1) (arg1)->Node = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObject_Node_get(void * jarg1) {
  void * jresult ;
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  SceneNode *result = 0 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  result = (SceneNode *) ((arg1)->Node);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObject_Entity_set(void * jarg1, void * jarg2) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  Entity *arg2 = (Entity *) 0 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  arg2 = (Entity *)jarg2; 
  if (arg1) (arg1)->Entity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObject_Entity_get(void * jarg1) {
  void * jresult ;
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  Entity *result = 0 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  result = (Entity *) ((arg1)->Entity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObject_AttachedData_set(void * jarg1, void * jarg2) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->AttachedData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObject_AttachedData_get(void * jarg1) {
  void * jresult ;
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  void *result = 0 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  result = (void *) ((arg1)->AttachedData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObject_PhysicsProfile_set(void * jarg1, void * jarg2) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  Core::Physics::CPhysicsProfile *arg2 = (Core::Physics::CPhysicsProfile *) 0 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  arg2 = (Core::Physics::CPhysicsProfile *)jarg2; 
  if (arg1) (arg1)->PhysicsProfile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObject_PhysicsProfile_get(void * jarg1) {
  void * jresult ;
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  Core::Physics::CPhysicsProfile *result = 0 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  result = (Core::Physics::CPhysicsProfile *) ((arg1)->PhysicsProfile);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObject_EnvironmentType_set(void * jarg1, int jarg2) {
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  Core::ENVIRONMENT_ATTRIBUTE_TYPE arg2 ;
  
  arg1 = (Core::CGameObject *)jarg1; 
  arg2 = (Core::ENVIRONMENT_ATTRIBUTE_TYPE)jarg2; 
  if (arg1) (arg1)->EnvironmentType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CGameObject_EnvironmentType_get(void * jarg1) {
  int jresult ;
  Core::CGameObject *arg1 = (Core::CGameObject *) 0 ;
  Core::ENVIRONMENT_ATTRIBUTE_TYPE result;
  
  arg1 = (Core::CGameObject *)jarg1; 
  result = (Core::ENVIRONMENT_ATTRIBUTE_TYPE) ((arg1)->EnvironmentType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDummyGameObject__SWIG_0() {
  void * jresult ;
  Core::CDummyGameObject *result = 0 ;
  
  result = (Core::CDummyGameObject *)new Core::CDummyGameObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDummyGameObject__SWIG_1(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  SceneNode *arg2 = (SceneNode *) 0 ;
  Ogre::Entity *arg3 = (Ogre::Entity *) 0 ;
  Core::CDummyGameObject *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (SceneNode *)jarg2; 
  arg3 = (Ogre::Entity *)jarg3; 
  result = (Core::CDummyGameObject *)new Core::CDummyGameObject((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CDummyGameObject(void * jarg1) {
  Core::CDummyGameObject *arg1 = (Core::CDummyGameObject *) 0 ;
  
  arg1 = (Core::CDummyGameObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_Instance() {
  void * jresult ;
  Core::CGameObjectManager *result = 0 ;
  
  result = (Core::CGameObjectManager *)Core::CGameObjectManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CGameObjectManager(void * jarg1) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_CreateObject__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CGameObject *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::CGameObject *)(arg1)->CreateObject((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_CreateObject__SWIG_1(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Vector3 *arg4 = 0 ;
  Core::CGameObject *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return 0;
  } 
  result = (Core::CGameObject *)(arg1)->CreateObject((char const *)arg2,(char const *)arg3,*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_CreateCustomObject__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CGameObject *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::CGameObject *)(arg1)->CreateCustomObject((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_CreateCustomObject__SWIG_1(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Vector3 *arg4 = 0 ;
  Core::CGameObject *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return 0;
  } 
  result = (Core::CGameObject *)(arg1)->CreateCustomObject((char const *)arg2,(char const *)arg3,*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_GetGameObject__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Entity *arg2 = (Entity *) 0 ;
  Core::CGameObject *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Entity *)jarg2; 
  result = (Core::CGameObject *)(arg1)->GetGameObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_GetGameObject__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CGameObject *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::CGameObject *)(arg1)->GetGameObject((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_GetGameObjectByEntityName(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CGameObject *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::CGameObject *)(arg1)->GetGameObjectByEntityName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_SetGameObjectUpdatable(void * jarg1, void * jarg2, unsigned int jarg3) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CGameObject *arg2 = (Core::CGameObject *) 0 ;
  bool arg3 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CGameObject *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetGameObjectUpdatable(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_GetGameObjects(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Vector< Core::CGameObject * > *arg2 = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Vector< Core::CGameObject * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Core::CGameObject * > & type is null", 0);
    return ;
  } 
  (arg1)->GetGameObjects(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_GetAllObjectTypes(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Vector< char const * > *arg2 = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Vector< char const * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< char const * > & type is null", 0);
    return ;
  } 
  (arg1)->GetAllObjectTypes(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_RemoveGameObject(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CGameObject *arg2 = (Core::CGameObject *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CGameObject *)jarg2; 
  (arg1)->RemoveGameObject(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_CreatePlayer__SWIG_0(void * jarg1, char * jarg2, int jarg3, char * jarg4, void * jarg5, unsigned int jarg6) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  char *arg4 = (char *) 0 ;
  Core::Physics::IPhysicsStrategy *arg5 = (Core::Physics::IPhysicsStrategy *) 0 ;
  bool arg6 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (Core::Physics::IPhysicsStrategy *)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (Core::CPlayer *)(arg1)->CreatePlayer((char const *)arg2,arg3,(char const *)arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_CreatePlayer__SWIG_1(void * jarg1, char * jarg2, int jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  char *arg4 = (char *) 0 ;
  Core::Physics::IPhysicsStrategy *arg5 = (Core::Physics::IPhysicsStrategy *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (Core::Physics::IPhysicsStrategy *)jarg5; 
  result = (Core::CPlayer *)(arg1)->CreatePlayer((char const *)arg2,arg3,(char const *)arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_CreatePlayer__SWIG_2(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  char *arg4 = (char *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  arg4 = (char *)jarg4; 
  result = (Core::CPlayer *)(arg1)->CreatePlayer((char const *)arg2,arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_CreatePlayer__SWIG_3(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  result = (Core::CPlayer *)(arg1)->CreatePlayer((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGameObjectManager_CreateCustomPlayer__SWIG_0(void * jarg1, void * jarg2, int jarg3, char * jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  char *arg4 = (char *) 0 ;
  Core::Physics::IPhysicsStrategy *arg5 = (Core::Physics::IPhysicsStrategy *) 0 ;
  bool arg6 ;
  bool result;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (Core::Physics::IPhysicsStrategy *)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->CreateCustomPlayer(arg2,arg3,(char const *)arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGameObjectManager_CreateCustomPlayer__SWIG_1(void * jarg1, void * jarg2, int jarg3, char * jarg4, void * jarg5) {
  unsigned int jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  char *arg4 = (char *) 0 ;
  Core::Physics::IPhysicsStrategy *arg5 = (Core::Physics::IPhysicsStrategy *) 0 ;
  bool result;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (Core::Physics::IPhysicsStrategy *)jarg5; 
  result = (bool)(arg1)->CreateCustomPlayer(arg2,arg3,(char const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGameObjectManager_CreateCustomPlayer__SWIG_2(void * jarg1, void * jarg2, int jarg3, char * jarg4) {
  unsigned int jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  arg4 = (char *)jarg4; 
  result = (bool)(arg1)->CreateCustomPlayer(arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGameObjectManager_CreateCustomPlayer__SWIG_3(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  bool result;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  result = (bool)(arg1)->CreateCustomPlayer(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGameObjectManager_AddCustomPlayer__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->AddCustomPlayer(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGameObjectManager_AddCustomPlayer__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  bool result;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  result = (bool)(arg1)->AddCustomPlayer(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_RemovePlayer(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  (arg1)->RemovePlayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_RemoveAllPlayers(void * jarg1) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  (arg1)->RemoveAllPlayers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_GetTeam(void * jarg1, int jarg2, void * jarg3) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::E_PLAYER_TEAM arg2 ;
  std::vector< Core::CPlayer * > *arg3 = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::E_PLAYER_TEAM)jarg2; 
  arg3 = (std::vector< Core::CPlayer * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Core::CPlayer * > & type is null", 0);
    return ;
  } 
  (arg1)->GetTeam(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_GetAllPlayers(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Vector< Core::CPlayer * > *arg2 = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Vector< Core::CPlayer * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Core::CPlayer * > & type is null", 0);
    return ;
  } 
  (arg1)->GetAllPlayers(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_GetPlayerTypes(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Vector< char const * > *arg2 = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Vector< char const * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< char const * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPlayerTypes(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_GetHumanPlayer(void * jarg1) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  result = (Core::CPlayer *)(arg1)->GetHumanPlayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_GetPlayerByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::CPlayer *)(arg1)->GetPlayerByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_GetPlayerByEntityName(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::CPlayer *)(arg1)->GetPlayerByEntityName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_GetClosestVisibleEnemy(void * jarg1, void * jarg2) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  result = (Core::CPlayer *)(arg1)->GetClosestVisibleEnemy(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_GetClosestEnemy(void * jarg1, void * jarg2) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  result = (Core::CPlayer *)(arg1)->GetClosestEnemy(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_SetHumanPlayer(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  (arg1)->SetHumanPlayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_ChangePlayerTeam(void * jarg1, void * jarg2, int jarg3) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  (arg1)->ChangePlayerTeam(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_CreateBuilding(void * jarg1, char * jarg2, int jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  char *arg4 = (char *) 0 ;
  Core::Physics::IPhysicsStrategy *arg5 = (Core::Physics::IPhysicsStrategy *) 0 ;
  Core::CBuilding *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (Core::Physics::IPhysicsStrategy *)jarg5; 
  result = (Core::CBuilding *)(arg1)->CreateBuilding((char const *)arg2,arg3,(char const *)arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_GetBuildingByEntityName(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CBuilding *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::CBuilding *)(arg1)->GetBuildingByEntityName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_RemoveBuilding(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CBuilding *arg2 = (Core::CBuilding *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CBuilding *)jarg2; 
  (arg1)->RemoveBuilding(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_RemoveAddBuildings(void * jarg1) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  (arg1)->RemoveAddBuildings();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_GetAllBuildingTypes(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Vector< char const * > *arg2 = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Vector< char const * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< char const * > & type is null", 0);
    return ;
  } 
  (arg1)->GetAllBuildingTypes(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGameObjectManager_GetAllBuildings(void * jarg1) {
  void * jresult ;
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Vector< Core::CBuilding * > *result = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  result = (Vector< Core::CBuilding * > *) &(arg1)->GetAllBuildings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_Update(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_Shutdown(void * jarg1) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_Restart(void * jarg1) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  (arg1)->Restart();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_AddSphereObstacle(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CGameObject *arg2 = (Core::CGameObject *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CGameObject *)jarg2; 
  (arg1)->AddSphereObstacle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_AddBoxObstacle(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CGameObject *arg2 = (Core::CGameObject *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CGameObject *)jarg2; 
  (arg1)->AddBoxObstacle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_GetObstacles(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Vector< Core::AI::Obstacle * > *arg2 = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Vector< Core::AI::Obstacle * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Core::AI::Obstacle * > & type is null", 0);
    return ;
  } 
  (arg1)->GetObstacles(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_GetSphereObstacles(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Vector< Core::AI::Obstacle * > *arg2 = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Vector< Core::AI::Obstacle * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Core::AI::Obstacle * > & type is null", 0);
    return ;
  } 
  (arg1)->GetSphereObstacles(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_RemoveObstacle(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Core::CGameObject *arg2 = (Core::CGameObject *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Core::CGameObject *)jarg2; 
  (arg1)->RemoveObstacle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_AddWall__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddWall((Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_AddWall__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->AddWall((Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_GetWalls(void * jarg1, void * jarg2) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  Vector< Core::AI::Wall * > *arg2 = 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  arg2 = (Vector< Core::AI::Wall * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Core::AI::Wall * > & type is null", 0);
    return ;
  } 
  (arg1)->GetWalls(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameObjectManager_RemoveWalls(void * jarg1) {
  Core::CGameObjectManager *arg1 = (Core::CGameObjectManager *) 0 ;
  
  arg1 = (Core::CGameObjectManager *)jarg1; 
  (arg1)->RemoveWalls();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CGameState(void * jarg1) {
  Core::CGameState *arg1 = (Core::CGameState *) 0 ;
  
  arg1 = (Core::CGameState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameState_Update(void * jarg1, void * jarg2) {
  Core::CGameState *arg1 = (Core::CGameState *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CGameState *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGameState_Load(void * jarg1) {
  unsigned int jresult ;
  Core::CGameState *arg1 = (Core::CGameState *) 0 ;
  bool result;
  
  arg1 = (Core::CGameState *)jarg1; 
  result = (bool)(arg1)->Load();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGameState_End(void * jarg1) {
  Core::CGameState *arg1 = (Core::CGameState *) 0 ;
  
  arg1 = (Core::CGameState *)jarg1; 
  (arg1)->End();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGuiManager_Instance() {
  void * jresult ;
  Core::GUI::CGuiManager *result = 0 ;
  
  result = (Core::GUI::CGuiManager *)Core::GUI::CGuiManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CGuiManager(void * jarg1) {
  Core::GUI::CGuiManager *arg1 = (Core::GUI::CGuiManager *) 0 ;
  
  arg1 = (Core::GUI::CGuiManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGuiManager_CreateStrategy__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  Core::GUI::CGuiManager *arg1 = (Core::GUI::CGuiManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::GUI::E_GUI_STRATEGY arg3 ;
  Core::GUI::IGuiStrategy *result = 0 ;
  
  arg1 = (Core::GUI::CGuiManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Core::GUI::E_GUI_STRATEGY)jarg3; 
  result = (Core::GUI::IGuiStrategy *)(arg1)->CreateStrategy((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGuiManager_CreateStrategy__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::GUI::CGuiManager *arg1 = (Core::GUI::CGuiManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::GUI::IGuiStrategy *result = 0 ;
  
  arg1 = (Core::GUI::CGuiManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::GUI::IGuiStrategy *)(arg1)->CreateStrategy((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGuiManager_GetStrategy(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::GUI::CGuiManager *arg1 = (Core::GUI::CGuiManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::GUI::IGuiStrategy *result = 0 ;
  
  arg1 = (Core::GUI::CGuiManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::GUI::IGuiStrategy *)(arg1)->GetStrategy((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGuiManager_DeleteStrategy(void * jarg1, char * jarg2) {
  Core::GUI::CGuiManager *arg1 = (Core::GUI::CGuiManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::GUI::CGuiManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DeleteStrategy((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CInputManager_Instance() {
  void * jresult ;
  Core::CInputManager *result = 0 ;
  
  result = (Core::CInputManager *)Core::CInputManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CInputManager(void * jarg1) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_Initialise(void * jarg1) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  (arg1)->Initialise();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_Capture(void * jarg1) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  (arg1)->Capture();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_AddKeyListener(void * jarg1, void * jarg2, char * jarg3) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  OIS::KeyListener *arg2 = (OIS::KeyListener *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  arg2 = (OIS::KeyListener *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->AddKeyListener(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_AddMouseListener(void * jarg1, void * jarg2, char * jarg3) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  OIS::MouseListener *arg2 = (OIS::MouseListener *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  arg2 = (OIS::MouseListener *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->AddMouseListener(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_AddJoystickListener(void * jarg1, void * jarg2, char * jarg3) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  OIS::JoyStickListener *arg2 = (OIS::JoyStickListener *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  arg2 = (OIS::JoyStickListener *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->AddJoystickListener(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_RemoveKeyListener__SWIG_0(void * jarg1, char * jarg2) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->RemoveKeyListener((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_RemoveMouseListener__SWIG_0(void * jarg1, char * jarg2) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->RemoveMouseListener((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_RemoveJoystickListener__SWIG_0(void * jarg1, char * jarg2) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->RemoveJoystickListener((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_RemoveKeyListener__SWIG_1(void * jarg1, void * jarg2) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  OIS::KeyListener *arg2 = (OIS::KeyListener *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  arg2 = (OIS::KeyListener *)jarg2; 
  (arg1)->RemoveKeyListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_RemoveMouseListener__SWIG_1(void * jarg1, void * jarg2) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  OIS::MouseListener *arg2 = (OIS::MouseListener *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  arg2 = (OIS::MouseListener *)jarg2; 
  (arg1)->RemoveMouseListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_RemoveJoystickListener__SWIG_1(void * jarg1, void * jarg2) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  OIS::JoyStickListener *arg2 = (OIS::JoyStickListener *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  arg2 = (OIS::JoyStickListener *)jarg2; 
  (arg1)->RemoveJoystickListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_RemoveAllListeners(void * jarg1) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  (arg1)->RemoveAllListeners();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_RemoveAllKeyListeners(void * jarg1) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  (arg1)->RemoveAllKeyListeners();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_RemoveAllMouseListeners(void * jarg1) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  (arg1)->RemoveAllMouseListeners();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_RemoveAllJoystickListeners(void * jarg1) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  (arg1)->RemoveAllJoystickListeners();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_Shutdown(void * jarg1) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_ResizeWindow(void * jarg1, void * jarg2) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  RenderWindow *arg2 = (RenderWindow *) 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  arg2 = (RenderWindow *)jarg2; 
  (arg1)->ResizeWindow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_SetWindowExtents(void * jarg1, void * jarg2, void * jarg3) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  s32 arg2 ;
  s32 arg3 ;
  s32 *argp2 ;
  s32 *argp3 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  argp2 = (s32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null s32", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (s32 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null s32", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetWindowExtents(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInputManager_GetMouseRay(void * jarg1, void * jarg2) {
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  Ray *arg2 = 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  arg2 = (Ray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ray & type is null", 0);
    return ;
  } 
  (arg1)->GetMouseRay(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CInputManager_GetMouse(void * jarg1) {
  void * jresult ;
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  OIS::Mouse *result = 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  result = (OIS::Mouse *)(arg1)->GetMouse();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CInputManager_GetKeyboard(void * jarg1) {
  void * jresult ;
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  OIS::Keyboard *result = 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  result = (OIS::Keyboard *)(arg1)->GetKeyboard();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CInputManager_GetJoystick(void * jarg1, void * jarg2) {
  void * jresult ;
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  OIS::JoyStick *result = 0 ;
  
  arg1 = (Core::CInputManager *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (OIS::JoyStick *)(arg1)->GetJoystick(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CInputManager_GetNumOfJoysticks(void * jarg1) {
  void * jresult ;
  Core::CInputManager *arg1 = (Core::CInputManager *) 0 ;
  u32 result;
  
  arg1 = (Core::CInputManager *)jarg1; 
  result = (arg1)->GetNumOfJoysticks();
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CInventoryItem(void * jarg1) {
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInventoryItem_Update(void * jarg1, void * jarg2) {
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CInventoryItem_Use(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Use((Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInventoryItem_PickedUp(void * jarg1, void * jarg2) {
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  (arg1)->PickedUp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInventoryItem_ShowSight(void * jarg1, unsigned int jarg2) {
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ShowSight(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CInventoryItem_GetRange(void * jarg1) {
  void * jresult ;
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  f32 result;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  result = (arg1)->GetRange();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CInventoryItem_GetGameObject(void * jarg1) {
  void * jresult ;
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  Core::CGameObject *result = 0 ;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  result = (Core::CGameObject *)(arg1)->GetGameObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CInventoryItem_GetType(void * jarg1) {
  int jresult ;
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  Core::INVENTORY_TYPE result;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  result = (Core::INVENTORY_TYPE)(arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInventoryItem_Name_set(void * jarg1, void * jarg2) {
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CInventoryItem_Name_get(void * jarg1) {
  void * jresult ;
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  String result;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInventoryItem_Desc_set(void * jarg1, void * jarg2) {
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Desc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CInventoryItem_Desc_get(void * jarg1) {
  void * jresult ;
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  String result;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  result =  ((arg1)->Desc);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInventoryItem_Power_set(void * jarg1, void * jarg2) {
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Power = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CInventoryItem_Power_get(void * jarg1) {
  void * jresult ;
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  f32 result;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  result =  ((arg1)->Power);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CInventoryItem_UseResult_set(void * jarg1, int jarg2) {
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  Core::E_ITEM_USE_RESULT arg2 ;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  arg2 = (Core::E_ITEM_USE_RESULT)jarg2; 
  if (arg1) (arg1)->UseResult = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CInventoryItem_UseResult_get(void * jarg1) {
  int jresult ;
  Core::CInventoryItem *arg1 = (Core::CInventoryItem *) 0 ;
  Core::E_ITEM_USE_RESULT result;
  
  arg1 = (Core::CInventoryItem *)jarg1; 
  result = (Core::E_ITEM_USE_RESULT) ((arg1)->UseResult);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CItemProfile(int jarg1) {
  void * jresult ;
  Core::INVENTORY_TYPE arg1 ;
  Core::CItemProfile *result = 0 ;
  
  arg1 = (Core::INVENTORY_TYPE)jarg1; 
  result = (Core::CItemProfile *)new Core::CItemProfile(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CItemProfile(void * jarg1) {
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemProfile_Name_set(void * jarg1, void * jarg2) {
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemProfile_Name_get(void * jarg1) {
  void * jresult ;
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  String result;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemProfile_InventoryType_set(void * jarg1, int jarg2) {
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  Core::INVENTORY_TYPE arg2 ;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  arg2 = (Core::INVENTORY_TYPE)jarg2; 
  if (arg1) (arg1)->InventoryType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CItemProfile_InventoryType_get(void * jarg1) {
  int jresult ;
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  Core::INVENTORY_TYPE result;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  result = (Core::INVENTORY_TYPE) ((arg1)->InventoryType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemProfile_Capacity_set(void * jarg1, void * jarg2) {
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemProfile_Capacity_get(void * jarg1) {
  void * jresult ;
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  u32 result;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  result =  ((arg1)->Capacity);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemProfile_Range_set(void * jarg1, void * jarg2) {
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Range = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemProfile_Range_get(void * jarg1) {
  void * jresult ;
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  result =  ((arg1)->Range);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemProfile_UseTime_set(void * jarg1, void * jarg2) {
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->UseTime = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemProfile_UseTime_get(void * jarg1) {
  void * jresult ;
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  result =  ((arg1)->UseTime);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemProfile_Power_set(void * jarg1, void * jarg2) {
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Power = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemProfile_Power_get(void * jarg1) {
  void * jresult ;
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  result =  ((arg1)->Power);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemProfile_MeshName_set(void * jarg1, void * jarg2) {
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MeshName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemProfile_MeshName_get(void * jarg1) {
  void * jresult ;
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  String result;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  result =  ((arg1)->MeshName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemProfile_OverlayName_set(void * jarg1, void * jarg2) {
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->OverlayName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemProfile_OverlayName_get(void * jarg1) {
  void * jresult ;
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  String result;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  result =  ((arg1)->OverlayName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemProfile_Desc_set(void * jarg1, void * jarg2) {
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Desc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemProfile_Desc_get(void * jarg1) {
  void * jresult ;
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  String result;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  result =  ((arg1)->Desc);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemProfile_Scale_set(void * jarg1, void * jarg2) {
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Scale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemProfile_Scale_get(void * jarg1) {
  void * jresult ;
  Core::CItemProfile *arg1 = (Core::CItemProfile *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CItemProfile *)jarg1; 
  result =  ((arg1)->Scale);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemsManager_Instance() {
  void * jresult ;
  Core::CItemsManager *result = 0 ;
  
  result = (Core::CItemsManager *)Core::CItemsManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CItemsManager(void * jarg1) {
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemsManager_Update(void * jarg1, void * jarg2) {
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemsManager_GetItemProfiles(void * jarg1, void * jarg2) {
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  Vector< Core::CItemProfile * > *arg2 = 0 ;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  arg2 = (Vector< Core::CItemProfile * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Core::CItemProfile * > & type is null", 0);
    return ;
  } 
  (arg1)->GetItemProfiles(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemsManager_GetItemProfile(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CItemProfile *result = 0 ;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::CItemProfile *)(arg1)->GetItemProfile((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemsManager_GetPlacedItems(void * jarg1, void * jarg2) {
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  Vector< Core::CInventoryItem * > *arg2 = 0 ;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  arg2 = (Vector< Core::CInventoryItem * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Core::CInventoryItem * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPlacedItems(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemsManager_Pickup(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CInventoryItem *result = 0 ;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::CInventoryItem *)(arg1)->Pickup((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CItemsManager_PickupUnplaced(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CInventoryItem *result = 0 ;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::CInventoryItem *)(arg1)->PickupUnplaced((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CItemsManager_PlaceItem__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Vector3 *arg3 = 0 ;
  Core::Physics::IPhysicsStrategy *arg4 = (Core::Physics::IPhysicsStrategy *) 0 ;
  bool result;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Core::Physics::IPhysicsStrategy *)jarg4; 
  result = (bool)(arg1)->PlaceItem((char const *)arg2,(Vector3 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CItemsManager_PlaceItem__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Vector3 *arg3 = 0 ;
  bool result;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->PlaceItem((char const *)arg2,(Vector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemsManager_RemoveItem(void * jarg1, void * jarg2) {
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  (arg1)->RemoveItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemsManager_AddProfile__SWIG_0(void * jarg1, void * jarg2) {
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  Core::CItemProfile *arg2 = 0 ;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  arg2 = (Core::CItemProfile *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Core::CItemProfile const & type is null", 0);
    return ;
  } 
  (arg1)->AddProfile((Core::CItemProfile const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemsManager_AddProfile__SWIG_1(void * jarg1, void * jarg2) {
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  Core::CWeaponProfile *arg2 = 0 ;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  arg2 = (Core::CWeaponProfile *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Core::CWeaponProfile const & type is null", 0);
    return ;
  } 
  (arg1)->AddProfile((Core::CWeaponProfile const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CItemsManager_Shutdown(void * jarg1) {
  Core::CItemsManager *arg1 = (Core::CItemsManager *) 0 ;
  
  arg1 = (Core::CItemsManager *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LI_PROMPT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(">");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LI_PROMPT2_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(">>");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLuaConsole_Instance() {
  void * jresult ;
  Core::CLuaConsole *result = 0 ;
  
  result = (Core::CLuaConsole *)Core::CLuaConsole::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CLuaConsole(void * jarg1) {
  Core::CLuaConsole *arg1 = (Core::CLuaConsole *) 0 ;
  
  arg1 = (Core::CLuaConsole *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLuaConsole_SetVisible(void * jarg1, unsigned int jarg2) {
  Core::CLuaConsole *arg1 = (Core::CLuaConsole *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CLuaConsole *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVisible(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CLuaConsole_IsVisible(void * jarg1) {
  unsigned int jresult ;
  Core::CLuaConsole *arg1 = (Core::CLuaConsole *) 0 ;
  bool result;
  
  arg1 = (Core::CLuaConsole *)jarg1; 
  result = (bool)(arg1)->IsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLuaConsole_Print(void * jarg1, void * jarg2) {
  Core::CLuaConsole *arg1 = (Core::CLuaConsole *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CLuaConsole *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Print(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CLuaConsole_OnKeyPressed(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CLuaConsole *arg1 = (Core::CLuaConsole *) 0 ;
  OIS::KeyEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CLuaConsole *)jarg1; 
  arg2 = (OIS::KeyEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::KeyEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->OnKeyPressed((OIS::KeyEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CLuaConsole_frameStarted(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CLuaConsole *arg1 = (Core::CLuaConsole *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CLuaConsole *)jarg1; 
  arg2 = (Ogre::FrameEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::FrameEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->frameStarted((Ogre::FrameEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CLuaConsole_frameEnded(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CLuaConsole *arg1 = (Core::CLuaConsole *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CLuaConsole *)jarg1; 
  arg2 = (Ogre::FrameEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::FrameEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->frameEnded((Ogre::FrameEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CMagazine(void * jarg1, void * jarg2) {
  void * jresult ;
  Core::CMagazineProfile *arg1 = 0 ;
  Core::CWeapon *arg2 = (Core::CWeapon *) 0 ;
  Core::CMagazine *result = 0 ;
  
  arg1 = (Core::CMagazineProfile *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMagazineProfile const & type is null", 0);
    return 0;
  } 
  arg2 = (Core::CWeapon *)jarg2; 
  result = (Core::CMagazine *)new Core::CMagazine((Core::CMagazineProfile const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CMagazine(void * jarg1) {
  Core::CMagazine *arg1 = (Core::CMagazine *) 0 ;
  
  arg1 = (Core::CMagazine *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMagazine_Fire(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::CMagazine *arg1 = (Core::CMagazine *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Vector3 *arg3 = 0 ;
  bool result;
  
  arg1 = (Core::CMagazine *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Fire(arg2,(Vector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMagazine_RemoveProjectile(void * jarg1, void * jarg2) {
  Core::CMagazine *arg1 = (Core::CMagazine *) 0 ;
  Core::CProjectile *arg2 = (Core::CProjectile *) 0 ;
  
  arg1 = (Core::CMagazine *)jarg1; 
  arg2 = (Core::CProjectile *)jarg2; 
  (arg1)->RemoveProjectile(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMagazine_GetProjectiles(void * jarg1) {
  void * jresult ;
  Core::CMagazine *arg1 = (Core::CMagazine *) 0 ;
  Vector< Core::CProjectile * > *result = 0 ;
  
  arg1 = (Core::CMagazine *)jarg1; 
  result = (Vector< Core::CProjectile * > *) &(arg1)->GetProjectiles();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMenuState_keyPressed(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CMenuState *arg1 = (Core::CMenuState *) 0 ;
  OIS::KeyEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CMenuState *)jarg1; 
  arg2 = (OIS::KeyEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::KeyEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->keyPressed((OIS::KeyEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMenuState_keyReleased(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CMenuState *arg1 = (Core::CMenuState *) 0 ;
  OIS::KeyEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CMenuState *)jarg1; 
  arg2 = (OIS::KeyEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::KeyEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->keyReleased((OIS::KeyEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMenuState_mouseMoved(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CMenuState *arg1 = (Core::CMenuState *) 0 ;
  OIS::MouseEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CMenuState *)jarg1; 
  arg2 = (OIS::MouseEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::MouseEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->mouseMoved((OIS::MouseEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMenuState_mousePressed(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::CMenuState *arg1 = (Core::CMenuState *) 0 ;
  OIS::MouseEvent *arg2 = 0 ;
  OIS::MouseButtonID arg3 ;
  OIS::MouseButtonID *argp3 ;
  bool result;
  
  arg1 = (Core::CMenuState *)jarg1; 
  arg2 = (OIS::MouseEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::MouseEvent const & type is null", 0);
    return 0;
  } 
  argp3 = (OIS::MouseButtonID *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null OIS::MouseButtonID", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->mousePressed((OIS::MouseEvent const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMenuState_mouseReleased(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::CMenuState *arg1 = (Core::CMenuState *) 0 ;
  OIS::MouseEvent *arg2 = 0 ;
  OIS::MouseButtonID arg3 ;
  OIS::MouseButtonID *argp3 ;
  bool result;
  
  arg1 = (Core::CMenuState *)jarg1; 
  arg2 = (OIS::MouseEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OIS::MouseEvent const & type is null", 0);
    return 0;
  } 
  argp3 = (OIS::MouseButtonID *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null OIS::MouseButtonID", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->mouseReleased((OIS::MouseEvent const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMenuState_frameRenderingQueued(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CMenuState *arg1 = (Core::CMenuState *) 0 ;
  FrameEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CMenuState *)jarg1; 
  arg2 = (FrameEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FrameEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->frameRenderingQueued((FrameEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMenuState_frameEnded(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CMenuState *arg1 = (Core::CMenuState *) 0 ;
  FrameEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CMenuState *)jarg1; 
  arg2 = (FrameEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FrameEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->frameEnded((FrameEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CMenuState(void * jarg1) {
  Core::CMenuState *arg1 = (Core::CMenuState *) 0 ;
  
  arg1 = (Core::CMenuState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMissionManager_Instance() {
  void * jresult ;
  Core::Mission::CMissionManager *result = 0 ;
  
  result = (Core::Mission::CMissionManager *)Core::Mission::CMissionManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CMissionManager(void * jarg1) {
  Core::Mission::CMissionManager *arg1 = (Core::Mission::CMissionManager *) 0 ;
  
  arg1 = (Core::Mission::CMissionManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMissionManager_StartMission(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::Mission::CMissionManager *arg1 = (Core::Mission::CMissionManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  bool result;
  
  arg1 = (Core::Mission::CMissionManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Core::CPlayer *)jarg3; 
  result = (bool)(arg1)->StartMission((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionManager_ListAllAvailableMissions(void * jarg1, void * jarg2) {
  Core::Mission::CMissionManager *arg1 = (Core::Mission::CMissionManager *) 0 ;
  Vector< String > *arg2 = 0 ;
  
  arg1 = (Core::Mission::CMissionManager *)jarg1; 
  arg2 = (Vector< String > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< String > & type is null", 0);
    return ;
  } 
  (arg1)->ListAllAvailableMissions(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMissionManager_FindActivePlayerMissions(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::Mission::CMissionManager *arg1 = (Core::Mission::CMissionManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Vector< Core::Mission::IMission * > *arg3 = 0 ;
  bool result;
  
  arg1 = (Core::Mission::CMissionManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Vector< Core::Mission::IMission * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Core::Mission::IMission * > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->FindActivePlayerMissions(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionManager_Update(void * jarg1) {
  Core::Mission::CMissionManager *arg1 = (Core::Mission::CMissionManager *) 0 ;
  
  arg1 = (Core::Mission::CMissionManager *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionManager_RegisterEvent__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  Core::Mission::CMissionManager *arg1 = (Core::Mission::CMissionManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::Mission::MISSION_TYPE arg3 ;
  Core::CPlayer *arg4 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *arg5 = (Core::CInventoryItem *) 0 ;
  Core::CProjectile *arg6 = (Core::CProjectile *) 0 ;
  void *arg7 = (void *) 0 ;
  
  arg1 = (Core::Mission::CMissionManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::Mission::MISSION_TYPE)jarg3; 
  arg4 = (Core::CPlayer *)jarg4; 
  arg5 = (Core::CInventoryItem *)jarg5; 
  arg6 = (Core::CProjectile *)jarg6; 
  arg7 = (void *)jarg7; 
  (arg1)->RegisterEvent(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionManager_RegisterEvent__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6) {
  Core::Mission::CMissionManager *arg1 = (Core::Mission::CMissionManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::Mission::MISSION_TYPE arg3 ;
  Core::CPlayer *arg4 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *arg5 = (Core::CInventoryItem *) 0 ;
  Core::CProjectile *arg6 = (Core::CProjectile *) 0 ;
  
  arg1 = (Core::Mission::CMissionManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::Mission::MISSION_TYPE)jarg3; 
  arg4 = (Core::CPlayer *)jarg4; 
  arg5 = (Core::CInventoryItem *)jarg5; 
  arg6 = (Core::CProjectile *)jarg6; 
  (arg1)->RegisterEvent(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionManager_RegisterEvent__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  Core::Mission::CMissionManager *arg1 = (Core::Mission::CMissionManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::Mission::MISSION_TYPE arg3 ;
  Core::CPlayer *arg4 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *arg5 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::Mission::CMissionManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::Mission::MISSION_TYPE)jarg3; 
  arg4 = (Core::CPlayer *)jarg4; 
  arg5 = (Core::CInventoryItem *)jarg5; 
  (arg1)->RegisterEvent(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionManager_RegisterEvent__SWIG_3(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Core::Mission::CMissionManager *arg1 = (Core::Mission::CMissionManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::Mission::MISSION_TYPE arg3 ;
  Core::CPlayer *arg4 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::Mission::CMissionManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::Mission::MISSION_TYPE)jarg3; 
  arg4 = (Core::CPlayer *)jarg4; 
  (arg1)->RegisterEvent(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionManager_RegisterEvent__SWIG_4(void * jarg1, void * jarg2, int jarg3) {
  Core::Mission::CMissionManager *arg1 = (Core::Mission::CMissionManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::Mission::MISSION_TYPE arg3 ;
  
  arg1 = (Core::Mission::CMissionManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::Mission::MISSION_TYPE)jarg3; 
  (arg1)->RegisterEvent(arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PLANE_ENTITY_NAME_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("CTerrainSystem_PlaneEntity");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DEFAULT_PLANE_TERRAIN_MATERIAL_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("Demo/Floor");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CNatureManager_Instance() {
  void * jresult ;
  Core::Nature::CNatureManager *result = 0 ;
  
  result = (Core::Nature::CNatureManager *)Core::Nature::CNatureManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CNatureManager(void * jarg1) {
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CNatureManager_GetWorld(void * jarg1) {
  void * jresult ;
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  Core::Nature::CWorld *result = 0 ;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  result = (Core::Nature::CWorld *)(arg1)->GetWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CNatureManager_GetResourceGroupName(void * jarg1) {
  void * jresult ;
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  String result;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  result = (arg1)->GetResourceGroupName();
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CNatureManager_GetTerrainGroup(void * jarg1) {
  void * jresult ;
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  TerrainGroup *result = 0 ;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  result = (TerrainGroup *)(arg1)->GetTerrainGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CNatureManager_GetBottomPlane(void * jarg1) {
  void * jresult ;
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  MovablePlane *result = 0 ;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  result = (MovablePlane *)(arg1)->GetBottomPlane();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CNatureManager_GetTerrainHeightAt__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  Ray *arg2 = 0 ;
  f32 result;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  arg2 = (Ray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ray const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetTerrainHeightAt((Ray const &)*arg2);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CNatureManager_GetTerrainHeightAt__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  f32 arg2 ;
  f32 arg3 ;
  f32 const *argp2 ;
  f32 const *argp3 ;
  f32 result;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (f32 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32 const", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetTerrainHeightAt(arg2,arg3);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CNatureManager_GetTerrainPosition(void * jarg1, void * jarg2) {
  void * jresult ;
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  Ray *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  arg2 = (Ray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ray const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetTerrainPosition((Ray const &)*arg2);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CNatureManager_SetTerrainGroup(void * jarg1, void * jarg2) {
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  TerrainGroup *arg2 = (TerrainGroup *) 0 ;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  arg2 = (TerrainGroup *)jarg2; 
  (arg1)->SetTerrainGroup(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CNatureManager_SetWaterSystem(void * jarg1, void * jarg2) {
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  Core::Nature::CWaterSystem *arg2 = (Core::Nature::CWaterSystem *) 0 ;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  arg2 = (Core::Nature::CWaterSystem *)jarg2; 
  (arg1)->SetWaterSystem(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CNatureManager_GetWaterSystem(void * jarg1) {
  void * jresult ;
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  Core::Nature::CWaterSystem *result = 0 ;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  result = (Core::Nature::CWaterSystem *)(arg1)->GetWaterSystem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CNatureManager_CreateWorld__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  Core::HYDRAX *arg2 = (Core::HYDRAX *) 0 ;
  Core::CAELUM *arg3 = (Core::CAELUM *) 0 ;
  Core::TERRAIN_TYPE *arg4 = (Core::TERRAIN_TYPE *) 0 ;
  String arg5 ;
  String *argp5 ;
  bool result;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  arg2 = (Core::HYDRAX *)jarg2; 
  arg3 = (Core::CAELUM *)jarg3; 
  arg4 = (Core::TERRAIN_TYPE *)jarg4; 
  argp5 = (String *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->CreateWorld(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CNatureManager_CreateWorld__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  Core::HYDRAX *arg2 = (Core::HYDRAX *) 0 ;
  Core::CAELUM *arg3 = (Core::CAELUM *) 0 ;
  Core::TERRAIN_TYPE *arg4 = (Core::TERRAIN_TYPE *) 0 ;
  bool result;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  arg2 = (Core::HYDRAX *)jarg2; 
  arg3 = (Core::CAELUM *)jarg3; 
  arg4 = (Core::TERRAIN_TYPE *)jarg4; 
  result = (bool)(arg1)->CreateWorld(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CNatureManager_DestroyWorld(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  Core::Nature::CWorld *arg2 = (Core::Nature::CWorld *) 0 ;
  bool result;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  arg2 = (Core::Nature::CWorld *)jarg2; 
  result = (bool)(arg1)->DestroyWorld(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CNatureManager_Shutdown(void * jarg1) {
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CNatureManager_Update(void * jarg1, void * jarg2) {
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CNatureManager_AddPagedGeometry(void * jarg1, void * jarg2) {
  Core::Nature::CNatureManager *arg1 = (Core::Nature::CNatureManager *) 0 ;
  Core::GEO_SET *arg2 = (Core::GEO_SET *) 0 ;
  
  arg1 = (Core::Nature::CNatureManager *)jarg1; 
  arg2 = (Core::GEO_SET *)jarg2; 
  (arg1)->AddPagedGeometry(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreEntityObject() {
  void * jresult ;
  Core::CoreEntityObject *result = 0 ;
  
  result = (Core::CoreEntityObject *)new Core::CoreEntityObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEntityObject_QueryType_set(void * jarg1, int jarg2) {
  Core::CoreEntityObject *arg1 = (Core::CoreEntityObject *) 0 ;
  Core::SCENE_QUERY_FLAGS arg2 ;
  
  arg1 = (Core::CoreEntityObject *)jarg1; 
  arg2 = (Core::SCENE_QUERY_FLAGS)jarg2; 
  if (arg1) (arg1)->QueryType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CoreEntityObject_QueryType_get(void * jarg1) {
  int jresult ;
  Core::CoreEntityObject *arg1 = (Core::CoreEntityObject *) 0 ;
  Core::SCENE_QUERY_FLAGS result;
  
  arg1 = (Core::CoreEntityObject *)jarg1; 
  result = (Core::SCENE_QUERY_FLAGS) ((arg1)->QueryType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEntityObject_Player_set(void * jarg1, void * jarg2) {
  Core::CoreEntityObject *arg1 = (Core::CoreEntityObject *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CoreEntityObject *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  if (arg1) (arg1)->Player = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreEntityObject_Player_get(void * jarg1) {
  void * jresult ;
  Core::CoreEntityObject *arg1 = (Core::CoreEntityObject *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CoreEntityObject *)jarg1; 
  result = (Core::CPlayer *) ((arg1)->Player);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreEntityObject_Item_set(void * jarg1, void * jarg2) {
  Core::CoreEntityObject *arg1 = (Core::CoreEntityObject *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CoreEntityObject *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  if (arg1) (arg1)->Item = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreEntityObject_Item_get(void * jarg1) {
  void * jresult ;
  Core::CoreEntityObject *arg1 = (Core::CoreEntityObject *) 0 ;
  Core::CInventoryItem *result = 0 ;
  
  arg1 = (Core::CoreEntityObject *)jarg1; 
  result = (Core::CInventoryItem *) ((arg1)->Item);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreEntityObject(void * jarg1) {
  Core::CoreEntityObject *arg1 = (Core::CoreEntityObject *) 0 ;
  
  arg1 = (Core::CoreEntityObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CParticleEffect_StartTimer(void * jarg1) {
  Core::Effects::CParticleEffect *arg1 = (Core::Effects::CParticleEffect *) 0 ;
  
  arg1 = (Core::Effects::CParticleEffect *)jarg1; 
  (arg1)->StartTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CParticleEffect_Update(void * jarg1, void * jarg2) {
  Core::Effects::CParticleEffect *arg1 = (Core::Effects::CParticleEffect *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Effects::CParticleEffect *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CParticleEffect_UpdateAll(void * jarg1) {
  f32 *arg1 = 0 ;
  
  arg1 = (f32 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  Core::Effects::CParticleEffect::UpdateAll((f32 const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CParticleEffect_AddDynamicEffect(void * jarg1) {
  Core::Effects::CParticleEffect *arg1 = (Core::Effects::CParticleEffect *) 0 ;
  
  arg1 = (Core::Effects::CParticleEffect *)jarg1; 
  Core::Effects::CParticleEffect::AddDynamicEffect(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CParticleEffect_GetTimer(void * jarg1) {
  void * jresult ;
  Core::Effects::CParticleEffect *arg1 = (Core::Effects::CParticleEffect *) 0 ;
  f32 result;
  
  arg1 = (Core::Effects::CParticleEffect *)jarg1; 
  result = (arg1)->GetTimer();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CParticleEffect_SetTimer(void * jarg1, void * jarg2) {
  Core::Effects::CParticleEffect *arg1 = (Core::Effects::CParticleEffect *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Effects::CParticleEffect *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetTimer((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CParticleEffect_SetPosition__SWIG_0(void * jarg1, void * jarg2) {
  Core::Effects::CParticleEffect *arg1 = (Core::Effects::CParticleEffect *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Effects::CParticleEffect *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  (arg1)->SetPosition(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CParticleEffect_SetPosition__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Core::Effects::CParticleEffect *arg1 = (Core::Effects::CParticleEffect *) 0 ;
  f32 *arg2 = 0 ;
  f32 *arg3 = 0 ;
  f32 *arg4 = 0 ;
  
  arg1 = (Core::Effects::CParticleEffect *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg3 = (f32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPosition((f32 const &)*arg2,(f32 const &)*arg3,(f32 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CParticleEffect_LabelName_set(void * jarg1, void * jarg2) {
  Core::Effects::CParticleEffect *arg1 = (Core::Effects::CParticleEffect *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::Effects::CParticleEffect *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->LabelName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CParticleEffect_LabelName_get(void * jarg1) {
  void * jresult ;
  Core::Effects::CParticleEffect *arg1 = (Core::Effects::CParticleEffect *) 0 ;
  String result;
  
  arg1 = (Core::Effects::CParticleEffect *)jarg1; 
  result =  ((arg1)->LabelName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CParticleEffect_ParticleName_set(void * jarg1, void * jarg2) {
  Core::Effects::CParticleEffect *arg1 = (Core::Effects::CParticleEffect *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::Effects::CParticleEffect *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ParticleName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CParticleEffect_ParticleName_get(void * jarg1) {
  void * jresult ;
  Core::Effects::CParticleEffect *arg1 = (Core::Effects::CParticleEffect *) 0 ;
  String result;
  
  arg1 = (Core::Effects::CParticleEffect *)jarg1; 
  result =  ((arg1)->ParticleName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CParticleEffect(void * jarg1) {
  Core::Effects::CParticleEffect *arg1 = (Core::Effects::CParticleEffect *) 0 ;
  
  arg1 = (Core::Effects::CParticleEffect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CPhysicsManager(void * jarg1) {
  Core::Physics::CPhysicsManager *arg1 = (Core::Physics::CPhysicsManager *) 0 ;
  
  arg1 = (Core::Physics::CPhysicsManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsManager_Instance() {
  void * jresult ;
  Core::Physics::CPhysicsManager *result = 0 ;
  
  result = (Core::Physics::CPhysicsManager *)Core::Physics::CPhysicsManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsManager_CreateStrategy(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::Physics::CPhysicsManager *arg1 = (Core::Physics::CPhysicsManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::Physics::IPhysicsStrategy *result = 0 ;
  
  arg1 = (Core::Physics::CPhysicsManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::Physics::IPhysicsStrategy *)(arg1)->CreateStrategy((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsManager_GetStrategy(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsManager *arg1 = (Core::Physics::CPhysicsManager *) 0 ;
  Core::Physics::IPhysicsStrategy *result = 0 ;
  
  arg1 = (Core::Physics::CPhysicsManager *)jarg1; 
  result = (Core::Physics::IPhysicsStrategy *)((Core::Physics::CPhysicsManager const *)arg1)->GetStrategy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsManager_DeleteStrategy(void * jarg1) {
  Core::Physics::CPhysicsManager *arg1 = (Core::Physics::CPhysicsManager *) 0 ;
  
  arg1 = (Core::Physics::CPhysicsManager *)jarg1; 
  (arg1)->DeleteStrategy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsManager_AddPhysicsProfile(void * jarg1, char * jarg2, void * jarg3) {
  Core::Physics::CPhysicsManager *arg1 = (Core::Physics::CPhysicsManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::Physics::CPhysicsProfile *arg3 = (Core::Physics::CPhysicsProfile *) 0 ;
  
  arg1 = (Core::Physics::CPhysicsManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Core::Physics::CPhysicsProfile *)jarg3; 
  (arg1)->AddPhysicsProfile((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsManager_GetPhysicsProfileList(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsManager *arg1 = (Core::Physics::CPhysicsManager *) 0 ;
  Core::Physics::PhysicsProfileList *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsManager *)jarg1; 
  arg2 = (Core::Physics::PhysicsProfileList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Core::Physics::PhysicsProfileList & type is null", 0);
    return ;
  } 
  ((Core::Physics::CPhysicsManager const *)arg1)->GetPhysicsProfileList(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsManager_GetPhysicsProfile(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::Physics::CPhysicsManager *arg1 = (Core::Physics::CPhysicsManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::Physics::CPhysicsProfile *result = 0 ;
  
  arg1 = (Core::Physics::CPhysicsManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::Physics::CPhysicsProfile *)((Core::Physics::CPhysicsManager const *)arg1)->GetPhysicsProfile((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsManager_Update(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsManager *arg1 = (Core::Physics::CPhysicsManager *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsManager *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  ((Core::Physics::CPhysicsManager const *)arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsManager_DEFAULT_LIGHT_CUBE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      Core::Physics::CPhysicsManager::DEFAULT_LIGHT_CUBE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)Core::Physics::CPhysicsManager::DEFAULT_LIGHT_CUBE, (const char *)arg1);
    } else {
      Core::Physics::CPhysicsManager::DEFAULT_LIGHT_CUBE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPhysicsManager_DEFAULT_LIGHT_CUBE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Core::Physics::CPhysicsManager::DEFAULT_LIGHT_CUBE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsManager_DEFAULT_MEDIUM_CUBE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      Core::Physics::CPhysicsManager::DEFAULT_MEDIUM_CUBE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)Core::Physics::CPhysicsManager::DEFAULT_MEDIUM_CUBE, (const char *)arg1);
    } else {
      Core::Physics::CPhysicsManager::DEFAULT_MEDIUM_CUBE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPhysicsManager_DEFAULT_MEDIUM_CUBE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Core::Physics::CPhysicsManager::DEFAULT_MEDIUM_CUBE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsManager_DEFAULT_HEAVY_CUBE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      Core::Physics::CPhysicsManager::DEFAULT_HEAVY_CUBE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)Core::Physics::CPhysicsManager::DEFAULT_HEAVY_CUBE, (const char *)arg1);
    } else {
      Core::Physics::CPhysicsManager::DEFAULT_HEAVY_CUBE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPhysicsManager_DEFAULT_HEAVY_CUBE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Core::Physics::CPhysicsManager::DEFAULT_HEAVY_CUBE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsManager_DEFAULT_LIGHT_SPHERE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      Core::Physics::CPhysicsManager::DEFAULT_LIGHT_SPHERE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)Core::Physics::CPhysicsManager::DEFAULT_LIGHT_SPHERE, (const char *)arg1);
    } else {
      Core::Physics::CPhysicsManager::DEFAULT_LIGHT_SPHERE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPhysicsManager_DEFAULT_LIGHT_SPHERE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Core::Physics::CPhysicsManager::DEFAULT_LIGHT_SPHERE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsManager_DEFAULT_MEDIUM_SPHERE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      Core::Physics::CPhysicsManager::DEFAULT_MEDIUM_SPHERE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)Core::Physics::CPhysicsManager::DEFAULT_MEDIUM_SPHERE, (const char *)arg1);
    } else {
      Core::Physics::CPhysicsManager::DEFAULT_MEDIUM_SPHERE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPhysicsManager_DEFAULT_MEDIUM_SPHERE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Core::Physics::CPhysicsManager::DEFAULT_MEDIUM_SPHERE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsManager_DEFAULT_HEAVY_SPHERE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      Core::Physics::CPhysicsManager::DEFAULT_HEAVY_SPHERE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)Core::Physics::CPhysicsManager::DEFAULT_HEAVY_SPHERE, (const char *)arg1);
    } else {
      Core::Physics::CPhysicsManager::DEFAULT_HEAVY_SPHERE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPhysicsManager_DEFAULT_HEAVY_SPHERE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Core::Physics::CPhysicsManager::DEFAULT_HEAVY_SPHERE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CPhysicsProfile() {
  void * jresult ;
  Core::Physics::CPhysicsProfile *result = 0 ;
  
  result = (Core::Physics::CPhysicsProfile *)new Core::Physics::CPhysicsProfile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPhysicsProfile_GetShape(void * jarg1) {
  int jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Core::Physics::E_PHYSICS_SHAPE result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (Core::Physics::E_PHYSICS_SHAPE)(arg1)->GetShape();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPhysicsProfile_GetBodyType(void * jarg1) {
  int jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Core::Physics::E_BODY_TYPE result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (Core::Physics::E_BODY_TYPE)(arg1)->GetBodyType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetFriction(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetFriction();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetMass(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetMass();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetDensity(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetDensity();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetRadius(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetRadius();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetSize(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetSize();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetDirection(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetDirection();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetLinearVelocity(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetLinearVelocity();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetAngularVelocity(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetAngularVelocity();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetPositionOffset(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetPositionOffset();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetRestitution(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetRestitution();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetAutoDisableLinearThreshold(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetAutoDisableLinearThreshold();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetAutoDisableAngularThreshold(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetAutoDisableAngularThreshold();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetAutoDisableTime(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetAutoDisableTime();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetAutoDisableSteps(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  u32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetAutoDisableSteps();
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetLinearDamping(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetLinearDamping();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetAngularDamping(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetAngularDamping();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetLinearDampingThreshold(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetLinearDampingThreshold();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetAngularDampingThreshold(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetAngularDampingThreshold();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPhysicsProfile_GetMaxAngularSpeed(void * jarg1) {
  void * jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (arg1)->GetMaxAngularSpeed();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_GetForce(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  (arg1)->GetForce(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_GetForceAtPosition(void * jarg1, void * jarg2, void * jarg3) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  (arg1)->GetForceAtPosition(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_GetRelativeForce(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  (arg1)->GetRelativeForce(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_GetTorque(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  (arg1)->GetTorque(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_GetRelativeTorque(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  (arg1)->GetRelativeTorque(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPhysicsProfile_GetIsStatic(void * jarg1) {
  unsigned int jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  bool result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (bool)(arg1)->GetIsStatic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetShape(void * jarg1, int jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Core::Physics::E_PHYSICS_SHAPE arg2 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Core::Physics::E_PHYSICS_SHAPE)jarg2; 
  (arg1)->SetShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetBodyType(void * jarg1, int jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Core::Physics::E_BODY_TYPE arg2 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Core::Physics::E_BODY_TYPE)jarg2; 
  (arg1)->SetBodyType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetFriction(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetFriction((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetMass(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetMass((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetDensity(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetDensity((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetRadius(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetRadius((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetSize(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetSize((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetDirection(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetDirection((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetLinearVelocity(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetLinearVelocity((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetAngularVelocity(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetAngularVelocity((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetPositionOffset(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPositionOffset((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetRestitution(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetRestitution((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetAutoDisableLinearThreshold(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetAutoDisableLinearThreshold((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetAutoDisableAngularThreshold(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetAutoDisableAngularThreshold((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetAutoDisableTime(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetAutoDisableTime((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetAutoDisableSteps(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  u32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (u32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "u32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetAutoDisableSteps((u32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetLinearDamping(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetLinearDamping((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetAngularDamping(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetAngularDamping((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetLinearDampingThreshold(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetLinearDampingThreshold((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetAngularDampingThreshold(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 arg2 ;
  f32 const *argp2 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32 const", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetAngularDampingThreshold(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetMaxAngularSpeed(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetMaxAngularSpeed((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetForce(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetForce((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetForceAtPosition(void * jarg1, void * jarg2, void * jarg3) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 arg3 ;
  Vector3 const *argp3 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  argp3 = (Vector3 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3 const", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetForceAtPosition((Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetRelativeForce(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetRelativeForce((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetTorque(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetTorque((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetRelativeTorque(void * jarg1, void * jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetRelativeTorque((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_SetIsStatic(void * jarg1, unsigned int jarg2) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsStatic(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPhysicsProfile_IsBasicDirty(void * jarg1) {
  unsigned int jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  bool result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (bool)(arg1)->IsBasicDirty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPhysicsProfile_IsDisabledDirty(void * jarg1) {
  unsigned int jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  bool result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (bool)(arg1)->IsDisabledDirty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPhysicsProfile_IsDampingDirty(void * jarg1) {
  unsigned int jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  bool result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (bool)(arg1)->IsDampingDirty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPhysicsProfile_IsDynamicDirty(void * jarg1) {
  unsigned int jresult ;
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  bool result;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  result = (bool)(arg1)->IsDynamicDirty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsProfile_ResetDirty(void * jarg1) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  (arg1)->ResetDirty();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CPhysicsProfile(void * jarg1) {
  Core::Physics::CPhysicsProfile *arg1 = (Core::Physics::CPhysicsProfile *) 0 ;
  
  arg1 = (Core::Physics::CPhysicsProfile *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CPlayer(void * jarg1) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_Update(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 *arg2 = 0 ;
  OIS::Keyboard *arg3 = (OIS::Keyboard *) 0 ;
  OIS::Mouse *arg4 = (OIS::Mouse *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg3 = (OIS::Keyboard *)jarg3; 
  arg4 = (OIS::Mouse *)jarg4; 
  (arg1)->Update((f32 const &)*arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetPlayerNode(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  SceneNode *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (SceneNode *)(arg1)->GetPlayerNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetPlayerEntity(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Entity *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (Entity *)(arg1)->GetPlayerEntity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetHealth(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetHealth();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetViewRange(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetViewRange();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPlayer_GetPlayerState(void * jarg1) {
  int jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::E_PLAYER_STATE result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (Core::E_PLAYER_STATE)(arg1)->GetPlayerState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetAiVehicle(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::AI::CFpsVehicle *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (Core::AI::CFpsVehicle *)(arg1)->GetAiVehicle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetCharacterState(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::AI::CCharacterState *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (Core::AI::CCharacterState *)(arg1)->GetCharacterState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPlayer_GetPlayerTeam(void * jarg1) {
  int jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::E_PLAYER_TEAM result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (Core::E_PLAYER_TEAM)(arg1)->GetPlayerTeam();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetPosition(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetPosition();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPlayer_GetName(void * jarg1) {
  char * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPlayer_GetMeshName(void * jarg1) {
  char * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (char *)(arg1)->GetMeshName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayer_GetIsVisible(void * jarg1) {
  unsigned int jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (bool)(arg1)->GetIsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayer_GetIsHumanPlayer(void * jarg1) {
  unsigned int jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (bool)(arg1)->GetIsHumanPlayer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetDirection(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetDirection();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetItems(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  SwigValueWrapper< Vector< Core::CInventoryItem * > > result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetItems();
  jresult = new Vector< Core::CInventoryItem * >((const Vector< Core::CInventoryItem * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetHeadPosition(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetHeadPosition();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetHeadRotation(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Quaternion result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetHeadRotation();
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetBodyPosition(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetBodyPosition();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetBodyRotation(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Quaternion result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetBodyRotation();
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetAiTarget(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::AI::CFpsVehicle *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (Core::AI::CFpsVehicle *)(arg1)->GetAiTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_GetAiPathPoints(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Vector< Vector3 > *arg2 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Vector< Vector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Vector3 > & type is null", 0);
    return ;
  } 
  (arg1)->GetAiPathPoints(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetCurrentInventoryItem(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (Core::CInventoryItem *)(arg1)->GetCurrentInventoryItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetEyePosition(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetEyePosition();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetCharacterControllerSize(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetCharacterControllerSize();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPlayer_GetLoSType(void * jarg1) {
  int jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::E_LOS_TYPE result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (Core::E_LOS_TYPE)(arg1)->GetLoSType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayer_GetIsFps(void * jarg1) {
  unsigned int jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (bool)(arg1)->GetIsFps();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPlayer_GetPlayerType(void * jarg1) {
  char * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (char *)(arg1)->GetPlayerType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetPhysicsStrategy(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::Physics::IPhysicsStrategy *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (Core::Physics::IPhysicsStrategy *)(arg1)->GetPhysicsStrategy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetCharacterController(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::Physics::ICharacterController *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (Core::Physics::ICharacterController *)(arg1)->GetCharacterController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetRunSpeed(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetRunSpeed();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetWalkSpeed(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetWalkSpeed();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetSprintSpeed(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetSprintSpeed();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetCrawlSpeed(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetCrawlSpeed();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_GetDieTime(void * jarg1) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (arg1)->GetDieTime();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPlayer_GetMovableText(void * jarg1) {
  char * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  result = (char *)(arg1)->GetMovableText();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetRunSpeed(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetRunSpeed((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetWalkSpeed(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetWalkSpeed((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetSprintSpeed(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetSprintSpeed((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetCrawlSpeed(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetCrawlSpeed((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetDieTime(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetDieTime((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetHealth(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetHealth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetVisible(void * jarg1, unsigned int jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVisible(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetPlayerState(void * jarg1, int jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::E_PLAYER_STATE arg2 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::E_PLAYER_STATE)jarg2; 
  (arg1)->SetPlayerState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetAiVehicle(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::AI::CFpsVehicle *arg2 = (Core::AI::CFpsVehicle *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::AI::CFpsVehicle *)jarg2; 
  (arg1)->SetAiVehicle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetCharacterState(void * jarg1, int jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::E_PLAYER_STATE arg2 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::E_PLAYER_STATE)jarg2; 
  (arg1)->SetCharacterState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetExactCharacterState(void * jarg1, char * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetExactCharacterState((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetPlayerPosition__SWIG_0(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPlayerPosition((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetPlayerPosition__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 *arg2 = 0 ;
  f32 *arg3 = 0 ;
  f32 *arg4 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg3 = (f32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPlayerPosition((f32 const &)*arg2,(f32 const &)*arg3,(f32 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetPlayerTeam(void * jarg1, int jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::E_PLAYER_TEAM arg2 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::E_PLAYER_TEAM)jarg2; 
  (arg1)->SetPlayerTeam(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetHumanPlayer(void * jarg1, unsigned int jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetHumanPlayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetViewRange(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetViewRange((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetTextLabelCaption(void * jarg1, char * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetTextLabelCaption((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetTextLabelEnabled(void * jarg1, unsigned int jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTextLabelEnabled(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetAiTarget(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::AI::CFpsVehicle *arg2 = (Core::AI::CFpsVehicle *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::AI::CFpsVehicle *)jarg2; 
  (arg1)->SetAiTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetAiPathPoints(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Vector< Vector3 > *arg2 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Vector< Vector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< Vector3 > const & type is null", 0);
    return ;
  } 
  (arg1)->SetAiPathPoints((Vector< Vector3 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetName(void * jarg1, char * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetDirection(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetDirection((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_SetLoSType(void * jarg1, int jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::E_LOS_TYPE arg2 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::E_LOS_TYPE)jarg2; 
  (arg1)->SetLoSType(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayer_CanSee__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->CanSee((Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayer_CanSee__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  result = (bool)(arg1)->CanSee(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayer_Duplicate(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::CPlayer *)(arg1)->Duplicate((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_AddItem(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  (arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_RemoveItem(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  (arg1)->RemoveItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_RemoveAllItems(void * jarg1) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  (arg1)->RemoveAllItems();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_DropAllItems(void * jarg1) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  (arg1)->DropAllItems();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_UseItem__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *arg3 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::CInventoryItem *)jarg3; 
  (arg1)->UseItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_UseItem__SWIG_1(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  (arg1)->UseItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_UseItem__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::CGameObject *arg2 = (Core::CGameObject *) 0 ;
  Core::CInventoryItem *arg3 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::CGameObject *)jarg2; 
  arg3 = (Core::CInventoryItem *)jarg3; 
  (arg1)->UseItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_UseItem__SWIG_3(void * jarg1, void * jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::CGameObject *arg2 = (Core::CGameObject *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::CGameObject *)jarg2; 
  (arg1)->UseItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_DebugLoS(void * jarg1, unsigned int jarg2) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->DebugLoS(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_OnHit__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::CProjectile *arg2 = (Core::CProjectile *) 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::CProjectile *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->OnHit(arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_OnHit__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  arg3 = (Core::CPlayer *)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->OnHit(arg2,arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_OnShotFired(void * jarg1) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  (arg1)->OnShotFired();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_OnMove(void * jarg1, void * jarg2, void * jarg3) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  f32 *arg2 = 0 ;
  OIS::Keyboard *arg3 = (OIS::Keyboard *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg3 = (OIS::Keyboard *)jarg3; 
  (arg1)->OnMove((f32 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_OnPickupItem(void * jarg1) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  (arg1)->OnPickupItem();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_OnKill__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CProjectile *arg3 = (Core::CProjectile *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::CProjectile *)jarg3; 
  (arg1)->OnKill(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayer_OnKill__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Core::CPlayer *arg1 = (Core::CPlayer *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *arg3 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CPlayer *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::CInventoryItem *)jarg3; 
  (arg1)->OnKill(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CPlayerPimpl(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  Core::Physics::IPhysicsStrategy *arg2 = (Core::Physics::IPhysicsStrategy *) 0 ;
  Core::CPlayerPimpl *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (Core::Physics::IPhysicsStrategy *)jarg2; 
  result = (Core::CPlayerPimpl *)new Core::CPlayerPimpl((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CPlayerPimpl(void * jarg1) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetDirection(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetDirection((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetLoSType(void * jarg1, int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_LOS_TYPE arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::E_LOS_TYPE)jarg2; 
  (arg1)->SetLoSType(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerPimpl_CanSee__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->CanSee((Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerPimpl_CanSee__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  result = (bool)(arg1)->CanSee(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_Duplicate(void * jarg1, char * jarg2) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  char *arg2 = (char *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Core::CPlayer *)(arg1)->Duplicate((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_PostInit(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  (arg1)->PostInit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_CheckForObjects(void * jarg1) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  (arg1)->CheckForObjects();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_TextLabelSetup(void * jarg1) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  (arg1)->TextLabelSetup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_AddItem(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  (arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_RemoveItem(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  (arg1)->RemoveItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_DropAllItems(void * jarg1) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  (arg1)->DropAllItems();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_RemoveAllItems(void * jarg1) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  (arg1)->RemoveAllItems();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_UseItem__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *arg3 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::CInventoryItem *)jarg3; 
  (arg1)->UseItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_UseItem__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CGameObject *arg2 = (Core::CGameObject *) 0 ;
  Core::CInventoryItem *arg3 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CGameObject *)jarg2; 
  arg3 = (Core::CInventoryItem *)jarg3; 
  (arg1)->UseItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_UseItem__SWIG_2(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CGameObject *arg2 = (Core::CGameObject *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CGameObject *)jarg2; 
  (arg1)->UseItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_OnPickupItem(void * jarg1) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  (arg1)->OnPickupItem();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_OnKill__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CProjectile *arg3 = (Core::CProjectile *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::CProjectile *)jarg3; 
  (arg1)->OnKill(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_OnKill__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CInventoryItem *arg3 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::CInventoryItem *)jarg3; 
  (arg1)->OnKill(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_OnShotFired(void * jarg1) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  (arg1)->OnShotFired();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_OnHit__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CProjectile *arg2 = (Core::CProjectile *) 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CProjectile *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->OnHit(arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_OnHit__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  arg3 = (Core::CPlayer *)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->OnHit(arg2,arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_DebugLoS(void * jarg1, unsigned int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->DebugLoS(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_UpdateDefault(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 *arg2 = 0 ;
  OIS::Keyboard *arg3 = (OIS::Keyboard *) 0 ;
  OIS::Mouse *arg4 = (OIS::Mouse *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg3 = (OIS::Keyboard *)jarg3; 
  arg4 = (OIS::Mouse *)jarg4; 
  (arg1)->UpdateDefault((f32 const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_UpdateTextLabel(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->UpdateTextLabel((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_UpdateMovement(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 *arg2 = 0 ;
  OIS::Keyboard *arg3 = (OIS::Keyboard *) 0 ;
  OIS::Mouse *arg4 = (OIS::Mouse *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg3 = (OIS::Keyboard *)jarg3; 
  arg4 = (OIS::Mouse *)jarg4; 
  (arg1)->UpdateMovement((f32 const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_UpdateAnimationState(void * jarg1, void * jarg2, void * jarg3) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 *arg2 = 0 ;
  OIS::Keyboard *arg3 = (OIS::Keyboard *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg3 = (OIS::Keyboard *)jarg3; 
  (arg1)->UpdateAnimationState((f32 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_UpdateAnimation(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->UpdateAnimation((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_UpdatePhysics(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->UpdatePhysics((f32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_GetPosition(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (arg1)->GetPosition();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_GetHeadPosition(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (arg1)->GetHeadPosition();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_GetHeadRotation(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Quaternion result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (arg1)->GetHeadRotation();
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_GetBodyPosition(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (arg1)->GetBodyPosition();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_GetBodyRotation(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Quaternion result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (arg1)->GetBodyRotation();
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetYAxisFromTerrain_Paged(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetYAxisFromTerrain_Paged(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetYAxisFromTerrain_Height(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetYAxisFromTerrain_Height(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetCharacterState(void * jarg1, int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_PLAYER_STATE arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::E_PLAYER_STATE)jarg2; 
  (arg1)->SetCharacterState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetExactCharacterState(void * jarg1, char * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetExactCharacterState((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetHumanPlayer(void * jarg1, unsigned int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetHumanPlayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetPlayerPosition__SWIG_0(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPlayerPosition((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetPlayerPosition__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 *arg2 = 0 ;
  f32 *arg3 = 0 ;
  f32 *arg4 = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg3 = (f32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPlayerPosition((f32 const &)*arg2,(f32 const &)*arg3,(f32 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetVisible(void * jarg1, unsigned int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVisible(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPlayerPimpl_GetMovableText(void * jarg1) {
  char * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (char *)(arg1)->GetMovableText();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetPlayerState(void * jarg1, int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_PLAYER_STATE arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::E_PLAYER_STATE)jarg2; 
  (arg1)->SetPlayerState(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_GetEyePosition(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (arg1)->GetEyePosition();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetTextLabelEnabled(void * jarg1, unsigned int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTextLabelEnabled(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetPlayerTeam(void * jarg1, int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_PLAYER_TEAM arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::E_PLAYER_TEAM)jarg2; 
  (arg1)->SetPlayerTeam(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_SetTextLabelCaption(void * jarg1, char * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetTextLabelCaption((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_Player_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  if (arg1) (arg1)->m_Player = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_Player_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::CPlayer *) ((arg1)->m_Player);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_Name_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_Name_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  String result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_MeshName_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_MeshName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_MeshName_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  String result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_MeshName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_WalkSpeed_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_WalkSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_WalkSpeed_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_WalkSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_RunSpeed_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_RunSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_RunSpeed_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_RunSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_SprintSpeed_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_SprintSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_SprintSpeed_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_SprintSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_CrawlSpeed_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_CrawlSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_CrawlSpeed_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_CrawlSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_ReloadSpeed_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_ReloadSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_ReloadSpeed_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_ReloadSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_Health_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_Health = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_Health_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_Health);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_PickupRadius_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_PickupRadius = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_PickupRadius_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_PickupRadius);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_DestinationRadius_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_DestinationRadius = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_DestinationRadius_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_DestinationRadius);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_FallVelocity_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_FallVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_FallVelocity_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_FallVelocity);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_DieingTime_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_DieingTime = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_DieingTime_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_DieingTime);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_ViewRange_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_ViewRange = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_ViewRange_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_ViewRange);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_AnimationSpeed_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_AnimationSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_AnimationSpeed_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  f32 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_AnimationSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_SightNode_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  SceneNode *arg2 = (SceneNode *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (SceneNode *)jarg2; 
  if (arg1) (arg1)->m_SightNode = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_SightNode_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  SceneNode *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (SceneNode *) ((arg1)->m_SightNode);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerEntity_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Entity *arg2 = (Entity *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Entity *)jarg2; 
  if (arg1) (arg1)->m_PlayerEntity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerEntity_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Entity *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Entity *) ((arg1)->m_PlayerEntity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerNode_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  SceneNode *arg2 = (SceneNode *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (SceneNode *)jarg2; 
  if (arg1) (arg1)->m_PlayerNode = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerNode_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  SceneNode *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (SceneNode *) ((arg1)->m_PlayerNode);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_isKilled_set(void * jarg1, unsigned int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isKilled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerPimpl_isKilled_get(void * jarg1) {
  unsigned int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (bool) ((arg1)->isKilled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_isVisible_set(void * jarg1, unsigned int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isVisible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerPimpl_isVisible_get(void * jarg1) {
  unsigned int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (bool) ((arg1)->isVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_isMovableText_set(void * jarg1, unsigned int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMovableText = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerPimpl_isMovableText_get(void * jarg1) {
  unsigned int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (bool) ((arg1)->isMovableText);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_isHumanPlayer_set(void * jarg1, unsigned int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isHumanPlayer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerPimpl_isHumanPlayer_get(void * jarg1) {
  unsigned int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (bool) ((arg1)->isHumanPlayer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_isCharacterController_set(void * jarg1, unsigned int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isCharacterController = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerPimpl_isCharacterController_get(void * jarg1) {
  unsigned int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (bool) ((arg1)->isCharacterController);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_isFpsView_set(void * jarg1, unsigned int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isFpsView = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerPimpl_isFpsView_get(void * jarg1) {
  unsigned int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (bool) ((arg1)->isFpsView);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_Movement_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_Movement = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_Movement_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_Movement);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_Direction_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_Direction = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_Direction_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_Direction);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_CCSize_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_CCSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_CCSize_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_CCSize);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_CurrItem_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  if (arg1) (arg1)->m_CurrItem = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_CurrItem_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CInventoryItem *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::CInventoryItem *) ((arg1)->m_CurrItem);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_ItemsManager_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CItemsManager *arg2 = (Core::CItemsManager *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CItemsManager *)jarg2; 
  if (arg1) (arg1)->m_ItemsManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_ItemsManager_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CItemsManager *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::CItemsManager *) ((arg1)->m_ItemsManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_ObjectQuery_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  RaySceneQuery *arg2 = (RaySceneQuery *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (RaySceneQuery *)jarg2; 
  if (arg1) (arg1)->m_ObjectQuery = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_ObjectQuery_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  RaySceneQuery *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (RaySceneQuery *) ((arg1)->m_ObjectQuery);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerQuery_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  RaySceneQuery *arg2 = (RaySceneQuery *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (RaySceneQuery *)jarg2; 
  if (arg1) (arg1)->m_PlayerQuery = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerQuery_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  RaySceneQuery *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (RaySceneQuery *) ((arg1)->m_PlayerQuery);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_TerrainRaySceneQuery_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  RaySceneQuery *arg2 = (RaySceneQuery *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (RaySceneQuery *)jarg2; 
  if (arg1) (arg1)->m_TerrainRaySceneQuery = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_TerrainRaySceneQuery_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  RaySceneQuery *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (RaySceneQuery *) ((arg1)->m_TerrainRaySceneQuery);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerTeam_set(void * jarg1, int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_PLAYER_TEAM arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::E_PLAYER_TEAM)jarg2; 
  if (arg1) (arg1)->m_PlayerTeam = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerTeam_get(void * jarg1) {
  int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_PLAYER_TEAM result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::E_PLAYER_TEAM) ((arg1)->m_PlayerTeam);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerType_set(void * jarg1, char * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->m_PlayerType = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_PlayerType, (const char *)arg2);
    } else {
      arg1->m_PlayerType = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerType_get(void * jarg1) {
  char * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (char *) ((arg1)->m_PlayerType);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_Lineofsight_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  ManualObject *arg2 = (ManualObject *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (ManualObject *)jarg2; 
  if (arg1) (arg1)->m_Lineofsight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_Lineofsight_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  ManualObject *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (ManualObject *) ((arg1)->m_Lineofsight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_RootBoneName_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_RootBoneName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_RootBoneName_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  String result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_RootBoneName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_HeadBoneName_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_HeadBoneName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_HeadBoneName_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  String result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_HeadBoneName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_Target_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::AI::CFpsVehicle *arg2 = (Core::AI::CFpsVehicle *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::AI::CFpsVehicle *)jarg2; 
  if (arg1) (arg1)->m_Target = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_Target_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::AI::CFpsVehicle *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::AI::CFpsVehicle *) ((arg1)->m_Target);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_PathPoints_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector< Vector3 > arg2 ;
  Vector< Vector3 > *argp2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  argp2 = (Vector< Vector3 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector< Vector3 >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_PathPoints = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_PathPoints_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector< Vector3 > result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result =  ((arg1)->m_PathPoints);
  jresult = new Vector< Vector3 >((const Vector< Vector3 > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_LosType_set(void * jarg1, int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_LOS_TYPE arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::E_LOS_TYPE)jarg2; 
  if (arg1) (arg1)->m_LosType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPlayerPimpl_m_LosType_get(void * jarg1) {
  int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_LOS_TYPE result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::E_LOS_TYPE) ((arg1)->m_LosType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_AbstractVehicle_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::AI::CFpsVehicle *arg2 = (Core::AI::CFpsVehicle *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::AI::CFpsVehicle *)jarg2; 
  if (arg1) (arg1)->m_AbstractVehicle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_AbstractVehicle_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::AI::CFpsVehicle *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::AI::CFpsVehicle *) ((arg1)->m_AbstractVehicle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_CharacterStateManager_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::AI::CCharacterStateManager *arg2 = (Core::AI::CCharacterStateManager *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::AI::CCharacterStateManager *)jarg2; 
  if (arg1) (arg1)->m_CharacterStateManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_CharacterStateManager_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::AI::CCharacterStateManager *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::AI::CCharacterStateManager *) ((arg1)->m_CharacterStateManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_AiReactionComponent_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::AI::IAiReactionComponent *arg2 = (Core::AI::IAiReactionComponent *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::AI::IAiReactionComponent *)jarg2; 
  if (arg1) (arg1)->m_AiReactionComponent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_AiReactionComponent_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::AI::IAiReactionComponent *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::AI::IAiReactionComponent *) ((arg1)->m_AiReactionComponent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_CharacterState_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::AI::CCharacterState *arg2 = (Core::AI::CCharacterState *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::AI::CCharacterState *)jarg2; 
  if (arg1) (arg1)->m_CharacterState = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_CharacterState_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::AI::CCharacterState *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::AI::CCharacterState *) ((arg1)->m_CharacterState);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_LineOfSightStrategy_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::ILineOfSightStrategy *arg2 = (Core::ILineOfSightStrategy *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::ILineOfSightStrategy *)jarg2; 
  if (arg1) (arg1)->m_LineOfSightStrategy = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_LineOfSightStrategy_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::ILineOfSightStrategy *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::ILineOfSightStrategy *) ((arg1)->m_LineOfSightStrategy);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_PhysicsStrategy_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::Physics::IPhysicsStrategy *arg2 = (Core::Physics::IPhysicsStrategy *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::Physics::IPhysicsStrategy *)jarg2; 
  if (arg1) (arg1)->m_PhysicsStrategy = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_PhysicsStrategy_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::Physics::IPhysicsStrategy *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::Physics::IPhysicsStrategy *) ((arg1)->m_PhysicsStrategy);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_CharacterController_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::Physics::ICharacterController *arg2 = (Core::Physics::ICharacterController *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::Physics::ICharacterController *)jarg2; 
  if (arg1) (arg1)->m_CharacterController = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_CharacterController_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::Physics::ICharacterController *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::Physics::ICharacterController *) ((arg1)->m_CharacterController);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_PhysicsRagdoll_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::Physics::IPhysicsRagdoll *arg2 = (Core::Physics::IPhysicsRagdoll *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::Physics::IPhysicsRagdoll *)jarg2; 
  if (arg1) (arg1)->m_PhysicsRagdoll = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_PhysicsRagdoll_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::Physics::IPhysicsRagdoll *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::Physics::IPhysicsRagdoll *) ((arg1)->m_PhysicsRagdoll);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_AnimationState_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  AnimationState *arg2 = (AnimationState *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (AnimationState *)jarg2; 
  if (arg1) (arg1)->m_AnimationState = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_AnimationState_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  AnimationState *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (AnimationState *) ((arg1)->m_AnimationState);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_Items_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector< Core::CInventoryItem * > *arg2 = (Vector< Core::CInventoryItem * > *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Vector< Core::CInventoryItem * > *)jarg2; 
  if (arg1) (arg1)->m_Items = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_Items_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Vector< Core::CInventoryItem * > *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Vector< Core::CInventoryItem * > *)& ((arg1)->m_Items);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_Ceo_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CoreEntityObject *arg2 = (Core::CoreEntityObject *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CoreEntityObject *)jarg2; 
  if (arg1) (arg1)->m_Ceo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_Ceo_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CoreEntityObject *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::CoreEntityObject *) ((arg1)->m_Ceo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_GameManager_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CGameManager *arg2 = (Core::CGameManager *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CGameManager *)jarg2; 
  if (arg1) (arg1)->m_GameManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_GameManager_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CGameManager *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::CGameManager *) ((arg1)->m_GameManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_CameraManager_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CCameraManager *arg2 = (Core::CCameraManager *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CCameraManager *)jarg2; 
  if (arg1) (arg1)->m_CameraManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_CameraManager_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CCameraManager *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::CCameraManager *) ((arg1)->m_CameraManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_GameObjectManager_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CGameObjectManager *arg2 = (Core::CGameObjectManager *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CGameObjectManager *)jarg2; 
  if (arg1) (arg1)->m_GameObjectManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_GameObjectManager_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CGameObjectManager *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::CGameObjectManager *) ((arg1)->m_GameObjectManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_EnvironmentObserver_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CEnvironmentObserver *arg2 = (Core::CEnvironmentObserver *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CEnvironmentObserver *)jarg2; 
  if (arg1) (arg1)->m_EnvironmentObserver = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_EnvironmentObserver_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CEnvironmentObserver *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::CEnvironmentObserver *) ((arg1)->m_EnvironmentObserver);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_AnimationMaps_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::AnimationMap *arg2 = (Core::AnimationMap *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::AnimationMap *)jarg2; 
  if (arg1) (arg1)->m_AnimationMaps = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_AnimationMaps_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::AnimationMap *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::AnimationMap *)& ((arg1)->m_AnimationMaps);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_MovableTextOverlay_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::OgreSpecific::MovableTextOverlay *arg2 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::OgreSpecific::MovableTextOverlay *)jarg2; 
  if (arg1) (arg1)->m_MovableTextOverlay = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_MovableTextOverlay_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::OgreSpecific::MovableTextOverlay *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::OgreSpecific::MovableTextOverlay *) ((arg1)->m_MovableTextOverlay);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerSoundComponent_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CPlayerSoundComponent *arg2 = (Core::CPlayerSoundComponent *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CPlayerSoundComponent *)jarg2; 
  if (arg1) (arg1)->m_PlayerSoundComponent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerSoundComponent_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CPlayerSoundComponent *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::CPlayerSoundComponent *) ((arg1)->m_PlayerSoundComponent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_AttributesComponent_set(void * jarg1, void * jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CPlayerAttributesComponent *arg2 = (Core::CPlayerAttributesComponent *) 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::CPlayerAttributesComponent *)jarg2; 
  if (arg1) (arg1)->m_AttributesComponent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPlayerPimpl_m_AttributesComponent_get(void * jarg1) {
  void * jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::CPlayerAttributesComponent *result = 0 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::CPlayerAttributesComponent *) ((arg1)->m_AttributesComponent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_AnimState_set(void * jarg1, int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_ANIM_STATE arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::E_ANIM_STATE)jarg2; 
  if (arg1) (arg1)->m_AnimState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPlayerPimpl_m_AnimState_get(void * jarg1) {
  int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_ANIM_STATE result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::E_ANIM_STATE) ((arg1)->m_AnimState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_CurrAnimState_set(void * jarg1, int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_ANIM_STATE arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::E_ANIM_STATE)jarg2; 
  if (arg1) (arg1)->m_CurrAnimState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPlayerPimpl_m_CurrAnimState_get(void * jarg1) {
  int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_ANIM_STATE result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::E_ANIM_STATE) ((arg1)->m_CurrAnimState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerState_set(void * jarg1, int jarg2) {
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_PLAYER_STATE arg2 ;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  arg2 = (Core::E_PLAYER_STATE)jarg2; 
  if (arg1) (arg1)->m_PlayerState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPlayerPimpl_m_PlayerState_get(void * jarg1) {
  int jresult ;
  Core::CPlayerPimpl *arg1 = (Core::CPlayerPimpl *) 0 ;
  Core::E_PLAYER_STATE result;
  
  arg1 = (Core::CPlayerPimpl *)jarg1; 
  result = (Core::E_PLAYER_STATE) ((arg1)->m_PlayerState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CPlayerSoundComponent() {
  void * jresult ;
  Core::CPlayerSoundComponent *result = 0 ;
  
  result = (Core::CPlayerSoundComponent *)new Core::CPlayerSoundComponent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CPlayerSoundComponent(void * jarg1) {
  Core::CPlayerSoundComponent *arg1 = (Core::CPlayerSoundComponent *) 0 ;
  
  arg1 = (Core::CPlayerSoundComponent *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerSoundComponent_SetMove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Core::CPlayerSoundComponent *arg1 = (Core::CPlayerSoundComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayerSoundComponent *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SetMove((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerSoundComponent_SetShot(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Core::CPlayerSoundComponent *arg1 = (Core::CPlayerSoundComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayerSoundComponent *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SetShot((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerSoundComponent_SetHolsterIn(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Core::CPlayerSoundComponent *arg1 = (Core::CPlayerSoundComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayerSoundComponent *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SetHolsterIn((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerSoundComponent_SetHolsterOut(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Core::CPlayerSoundComponent *arg1 = (Core::CPlayerSoundComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayerSoundComponent *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SetHolsterOut((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPlayerSoundComponent_SetReload(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Core::CPlayerSoundComponent *arg1 = (Core::CPlayerSoundComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Core::CPlayerSoundComponent *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SetReload((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerSoundComponent_PlayMove(void * jarg1) {
  Core::CPlayerSoundComponent *arg1 = (Core::CPlayerSoundComponent *) 0 ;
  
  arg1 = (Core::CPlayerSoundComponent *)jarg1; 
  (arg1)->PlayMove();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerSoundComponent_PlayShot(void * jarg1) {
  Core::CPlayerSoundComponent *arg1 = (Core::CPlayerSoundComponent *) 0 ;
  
  arg1 = (Core::CPlayerSoundComponent *)jarg1; 
  (arg1)->PlayShot();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerSoundComponent_PlayHolsterIn(void * jarg1) {
  Core::CPlayerSoundComponent *arg1 = (Core::CPlayerSoundComponent *) 0 ;
  
  arg1 = (Core::CPlayerSoundComponent *)jarg1; 
  (arg1)->PlayHolsterIn();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerSoundComponent_PlayHolsterOut(void * jarg1) {
  Core::CPlayerSoundComponent *arg1 = (Core::CPlayerSoundComponent *) 0 ;
  
  arg1 = (Core::CPlayerSoundComponent *)jarg1; 
  (arg1)->PlayHolsterOut();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPlayerSoundComponent_PlayReload(void * jarg1) {
  Core::CPlayerSoundComponent *arg1 = (Core::CPlayerSoundComponent *) 0 ;
  
  arg1 = (Core::CPlayerSoundComponent *)jarg1; 
  (arg1)->PlayReload();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPluginManager_Instance() {
  void * jresult ;
  Core::CPluginManager *result = 0 ;
  
  result = (Core::CPluginManager *)Core::CPluginManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CPluginManager(void * jarg1) {
  Core::CPluginManager *arg1 = (Core::CPluginManager *) 0 ;
  
  arg1 = (Core::CPluginManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPluginManager_LoadPlugin(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Core::CPluginManager *arg1 = (Core::CPluginManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Core::CPluginManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->LoadPlugin((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPluginManager_GetGameObjectFactories(void * jarg1) {
  void * jresult ;
  Core::CPluginManager *arg1 = (Core::CPluginManager *) 0 ;
  Vector< Core::Plugin::IGameObjectFactory * > *result = 0 ;
  
  arg1 = (Core::CPluginManager *)jarg1; 
  result = (Vector< Core::Plugin::IGameObjectFactory * > *) &(arg1)->GetGameObjectFactories();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPluginManager_GetConsoleParsers(void * jarg1) {
  void * jresult ;
  Core::CPluginManager *arg1 = (Core::CPluginManager *) 0 ;
  Vector< Core::Plugin::IConsoleParser * > *result = 0 ;
  
  arg1 = (Core::CPluginManager *)jarg1; 
  result = (Vector< Core::Plugin::IConsoleParser * > *) &(arg1)->GetConsoleParsers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPluginManager_GetMissionFactories(void * jarg1) {
  void * jresult ;
  Core::CPluginManager *arg1 = (Core::CPluginManager *) 0 ;
  Vector< Core::Plugin::IMissionFactory * > *result = 0 ;
  
  arg1 = (Core::CPluginManager *)jarg1; 
  result = (Vector< Core::Plugin::IMissionFactory * > *) &(arg1)->GetMissionFactories();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPluginManager_GetAiStateFactories(void * jarg1) {
  void * jresult ;
  Core::CPluginManager *arg1 = (Core::CPluginManager *) 0 ;
  Vector< Core::Plugin::IAiStateFactory * > *result = 0 ;
  
  arg1 = (Core::CPluginManager *)jarg1; 
  result = (Vector< Core::Plugin::IAiStateFactory * > *) &(arg1)->GetAiStateFactories();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPluginManager_GetPlayerFactories(void * jarg1) {
  void * jresult ;
  Core::CPluginManager *arg1 = (Core::CPluginManager *) 0 ;
  Vector< Core::Plugin::IPlayerFactory * > *result = 0 ;
  
  arg1 = (Core::CPluginManager *)jarg1; 
  result = (Vector< Core::Plugin::IPlayerFactory * > *) &(arg1)->GetPlayerFactories();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPluginManager_GetBuildingFactories(void * jarg1) {
  void * jresult ;
  Core::CPluginManager *arg1 = (Core::CPluginManager *) 0 ;
  Vector< Core::Plugin::IBuildingFactory * > *result = 0 ;
  
  arg1 = (Core::CPluginManager *)jarg1; 
  result = (Vector< Core::Plugin::IBuildingFactory * > *) &(arg1)->GetBuildingFactories();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPluginManager_GetParticleFactories(void * jarg1) {
  void * jresult ;
  Core::CPluginManager *arg1 = (Core::CPluginManager *) 0 ;
  Vector< Core::Plugin::IParticleFactory * > *result = 0 ;
  
  arg1 = (Core::CPluginManager *)jarg1; 
  result = (Vector< Core::Plugin::IParticleFactory * > *) &(arg1)->GetParticleFactories();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPluginManager_GetCameraFactories(void * jarg1) {
  void * jresult ;
  Core::CPluginManager *arg1 = (Core::CPluginManager *) 0 ;
  Vector< Core::Plugin::ICameraFactory * > *result = 0 ;
  
  arg1 = (Core::CPluginManager *)jarg1; 
  result = (Vector< Core::Plugin::ICameraFactory * > *) &(arg1)->GetCameraFactories();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPluginManager_GetPostEffectFactories(void * jarg1) {
  void * jresult ;
  Core::CPluginManager *arg1 = (Core::CPluginManager *) 0 ;
  Vector< Core::Plugin::IPostEffectFactory * > *result = 0 ;
  
  arg1 = (Core::CPluginManager *)jarg1; 
  result = (Vector< Core::Plugin::IPostEffectFactory * > *) &(arg1)->GetPostEffectFactories();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CPluginManager_GetPhysicsStrategyFactoryies(void * jarg1) {
  void * jresult ;
  Core::CPluginManager *arg1 = (Core::CPluginManager *) 0 ;
  Vector< Core::Plugin::IPhysicsStrategyFactory * > *result = 0 ;
  
  arg1 = (Core::CPluginManager *)jarg1; 
  result = (Vector< Core::Plugin::IPhysicsStrategyFactory * > *) &(arg1)->GetPhysicsStrategyFactoryies();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPostEffect_RegisterPostEffect(void * jarg1) {
  Core::Effects::CPostEffect *arg1 = (Core::Effects::CPostEffect *) 0 ;
  
  arg1 = (Core::Effects::CPostEffect *)jarg1; 
  (arg1)->RegisterPostEffect();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPostEffect_SetEnabled(void * jarg1, unsigned int jarg2) {
  Core::Effects::CPostEffect *arg1 = (Core::Effects::CPostEffect *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::Effects::CPostEffect *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEnabled(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CPostEffect_GetName(void * jarg1) {
  char * jresult ;
  Core::Effects::CPostEffect *arg1 = (Core::Effects::CPostEffect *) 0 ;
  char *result = 0 ;
  
  arg1 = (Core::Effects::CPostEffect *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CPostEffect(void * jarg1) {
  Core::Effects::CPostEffect *arg1 = (Core::Effects::CPostEffect *) 0 ;
  
  arg1 = (Core::Effects::CPostEffect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CPrecisionTimer() {
  void * jresult ;
  Core::CPrecisionTimer *result = 0 ;
  
  result = (Core::CPrecisionTimer *)new Core::CPrecisionTimer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPrecisionTimer_Start(void * jarg1) {
  Core::CPrecisionTimer *arg1 = (Core::CPrecisionTimer *) 0 ;
  
  arg1 = (Core::CPrecisionTimer *)jarg1; 
  (arg1)->Start();
}


SWIGEXPORT double SWIGSTDCALL CSharp_CPrecisionTimer_Stop(void * jarg1) {
  double jresult ;
  Core::CPrecisionTimer *arg1 = (Core::CPrecisionTimer *) 0 ;
  double result;
  
  arg1 = (Core::CPrecisionTimer *)jarg1; 
  result = (double)(arg1)->Stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CPrecisionTimer(void * jarg1) {
  Core::CPrecisionTimer *arg1 = (Core::CPrecisionTimer *) 0 ;
  
  arg1 = (Core::CPrecisionTimer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CProjectile__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  Core::CProjectileProfile *arg1 = 0 ;
  Core::CWeapon *arg2 = (Core::CWeapon *) 0 ;
  bool arg3 ;
  bool arg4 ;
  Core::CProjectile *result = 0 ;
  
  arg1 = (Core::CProjectileProfile *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Core::CProjectileProfile const & type is null", 0);
    return 0;
  } 
  arg2 = (Core::CWeapon *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (Core::CProjectile *)new Core::CProjectile((Core::CProjectileProfile const &)*arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CProjectile__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  Core::CProjectileProfile *arg1 = 0 ;
  Core::CWeapon *arg2 = (Core::CWeapon *) 0 ;
  bool arg3 ;
  Core::CProjectile *result = 0 ;
  
  arg1 = (Core::CProjectileProfile *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Core::CProjectileProfile const & type is null", 0);
    return 0;
  } 
  arg2 = (Core::CWeapon *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Core::CProjectile *)new Core::CProjectile((Core::CProjectileProfile const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CProjectile__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Core::CProjectileProfile *arg1 = 0 ;
  Core::CWeapon *arg2 = (Core::CWeapon *) 0 ;
  Core::CProjectile *result = 0 ;
  
  arg1 = (Core::CProjectileProfile *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Core::CProjectileProfile const & type is null", 0);
    return 0;
  } 
  arg2 = (Core::CWeapon *)jarg2; 
  result = (Core::CProjectile *)new Core::CProjectile((Core::CProjectileProfile const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CProjectile(void * jarg1) {
  Core::CProjectile *arg1 = (Core::CProjectile *) 0 ;
  
  arg1 = (Core::CProjectile *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CProjectile_Shoot(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::CProjectile *arg1 = (Core::CProjectile *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Vector3 *arg3 = 0 ;
  bool result;
  
  arg1 = (Core::CProjectile *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Shoot(arg2,(Vector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProjectile_Update(void * jarg1, void * jarg2) {
  Core::CProjectile *arg1 = (Core::CProjectile *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CProjectile *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProjectile_GetDamage(void * jarg1) {
  void * jresult ;
  Core::CProjectile *arg1 = (Core::CProjectile *) 0 ;
  f32 result;
  
  arg1 = (Core::CProjectile *)jarg1; 
  result = (arg1)->GetDamage();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProjectile_GetOwner(void * jarg1) {
  void * jresult ;
  Core::CProjectile *arg1 = (Core::CProjectile *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::CProjectile *)jarg1; 
  result = (Core::CPlayer *)(arg1)->GetOwner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProjectile_GetWeapon(void * jarg1) {
  void * jresult ;
  Core::CProjectile *arg1 = (Core::CProjectile *) 0 ;
  Core::CWeapon *result = 0 ;
  
  arg1 = (Core::CProjectile *)jarg1; 
  result = (Core::CWeapon *)(arg1)->GetWeapon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProjectile_GetPosition(void * jarg1) {
  void * jresult ;
  Core::CProjectile *arg1 = (Core::CProjectile *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Core::CProjectile *)jarg1; 
  result = (Vector3 *)(arg1)->GetPosition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProjectile_GetDirection(void * jarg1) {
  void * jresult ;
  Core::CProjectile *arg1 = (Core::CProjectile *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Core::CProjectile *)jarg1; 
  result = (Vector3 *)(arg1)->GetDirection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProjectile_isAlive_set(void * jarg1, unsigned int jarg2) {
  Core::CProjectile *arg1 = (Core::CProjectile *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CProjectile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isAlive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CProjectile_isAlive_get(void * jarg1) {
  unsigned int jresult ;
  Core::CProjectile *arg1 = (Core::CProjectile *) 0 ;
  bool result;
  
  arg1 = (Core::CProjectile *)jarg1; 
  result = (bool) ((arg1)->isAlive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CScrollingMessage() {
  void * jresult ;
  Core::OgreSpecific::CScrollingMessage *result = 0 ;
  
  result = (Core::OgreSpecific::CScrollingMessage *)new Core::OgreSpecific::CScrollingMessage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CScrollingMessage_Init(void * jarg1) {
  Core::OgreSpecific::CScrollingMessage *arg1 = (Core::OgreSpecific::CScrollingMessage *) 0 ;
  
  arg1 = (Core::OgreSpecific::CScrollingMessage *)jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CScrollingMessage_AddText(void * jarg1, void * jarg2) {
  Core::OgreSpecific::CScrollingMessage *arg1 = (Core::OgreSpecific::CScrollingMessage *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Core::OgreSpecific::CScrollingMessage *)jarg1; 
  arg2 = (String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return ;
  } 
  (arg1)->AddText((String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CScrollingMessage_Update(void * jarg1, void * jarg2) {
  Core::OgreSpecific::CScrollingMessage *arg1 = (Core::OgreSpecific::CScrollingMessage *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::OgreSpecific::CScrollingMessage *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CScrollingMessage(void * jarg1) {
  Core::OgreSpecific::CScrollingMessage *arg1 = (Core::OgreSpecific::CScrollingMessage *) 0 ;
  
  arg1 = (Core::OgreSpecific::CScrollingMessage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSpawnManager_Instance() {
  void * jresult ;
  Core::CSpawnManager *result = 0 ;
  
  result = (Core::CSpawnManager *)Core::CSpawnManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CSpawnManager(void * jarg1) {
  Core::CSpawnManager *arg1 = (Core::CSpawnManager *) 0 ;
  
  arg1 = (Core::CSpawnManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSpawnManager_AddSpawnPoint__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  Core::CSpawnManager *arg1 = (Core::CSpawnManager *) 0 ;
  Vector3 *arg2 = 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  f32 *arg4 = 0 ;
  u32 result;
  
  arg1 = (Core::CSpawnManager *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (arg1)->AddSpawnPoint((Vector3 const &)*arg2,arg3,(f32 const &)*arg4);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSpawnManager_AddSpawnPoint__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Core::CSpawnManager *arg1 = (Core::CSpawnManager *) 0 ;
  Vector3 *arg2 = 0 ;
  Core::E_PLAYER_TEAM arg3 ;
  u32 result;
  
  arg1 = (Core::CSpawnManager *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Core::E_PLAYER_TEAM)jarg3; 
  result = (arg1)->AddSpawnPoint((Vector3 const &)*arg2,arg3);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSpawnManager_AddSpawnPoint__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  Core::CSpawnManager *arg1 = (Core::CSpawnManager *) 0 ;
  u32 arg2 ;
  Vector3 *arg3 = 0 ;
  Core::E_PLAYER_TEAM arg4 ;
  f32 *arg5 = 0 ;
  u32 *argp2 ;
  u32 result;
  
  arg1 = (Core::CSpawnManager *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Core::E_PLAYER_TEAM)jarg4; 
  arg5 = (f32 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (arg1)->AddSpawnPoint(arg2,(Vector3 const &)*arg3,arg4,(f32 const &)*arg5);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSpawnManager_AddSpawnPoint__SWIG_3(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  Core::CSpawnManager *arg1 = (Core::CSpawnManager *) 0 ;
  u32 arg2 ;
  Vector3 *arg3 = 0 ;
  Core::E_PLAYER_TEAM arg4 ;
  u32 *argp2 ;
  u32 result;
  
  arg1 = (Core::CSpawnManager *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Core::E_PLAYER_TEAM)jarg4; 
  result = (arg1)->AddSpawnPoint(arg2,(Vector3 const &)*arg3,arg4);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSpawnManager_RemoveSpawnPoint(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CSpawnManager *arg1 = (Core::CSpawnManager *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  bool result;
  
  arg1 = (Core::CSpawnManager *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->RemoveSpawnPoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSpawnManager_GetAllSpawnPoints(void * jarg1) {
  void * jresult ;
  Core::CSpawnManager *arg1 = (Core::CSpawnManager *) 0 ;
  Map< u32,Core::SPAWN_POINT * > *result = 0 ;
  
  arg1 = (Core::CSpawnManager *)jarg1; 
  result = (Map< u32,Core::SPAWN_POINT * > *) &(arg1)->GetAllSpawnPoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSpawnManager_GetSpawnPoint__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Core::CSpawnManager *arg1 = (Core::CSpawnManager *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  Core::SPAWN_POINT *result = 0 ;
  
  arg1 = (Core::CSpawnManager *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Core::SPAWN_POINT *)(arg1)->GetSpawnPoint(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSpawnManager_GetSpawnPoint__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Core::CSpawnManager *arg1 = (Core::CSpawnManager *) 0 ;
  Vector3 *arg2 = 0 ;
  f32 *arg3 = 0 ;
  Core::SPAWN_POINT *result = 0 ;
  
  arg1 = (Core::CSpawnManager *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (f32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::SPAWN_POINT *)(arg1)->GetSpawnPoint((Vector3 const &)*arg2,(f32 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CSpawnManager_GetSpawnPoint__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Core::CSpawnManager *arg1 = (Core::CSpawnManager *) 0 ;
  Vector3 *arg2 = 0 ;
  Core::SPAWN_POINT *result = 0 ;
  
  arg1 = (Core::CSpawnManager *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (Core::SPAWN_POINT *)(arg1)->GetSpawnPoint((Vector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSpawnManager_SpawnPlayer__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::CSpawnManager *arg1 = (Core::CSpawnManager *) 0 ;
  u32 arg2 ;
  Core::CPlayer *arg3 = (Core::CPlayer *) 0 ;
  u32 *argp2 ;
  bool result;
  
  arg1 = (Core::CSpawnManager *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Core::CPlayer *)jarg3; 
  result = (bool)(arg1)->SpawnPlayer(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CSpawnManager_SpawnPlayer__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Core::CSpawnManager *arg1 = (Core::CSpawnManager *) 0 ;
  Vector3 *arg2 = 0 ;
  f32 *arg3 = 0 ;
  Core::CPlayer *arg4 = (Core::CPlayer *) 0 ;
  bool result;
  
  arg1 = (Core::CSpawnManager *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (f32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg4 = (Core::CPlayer *)jarg4; 
  result = (bool)(arg1)->SpawnPlayer((Vector3 const &)*arg2,(f32 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTrainingManager_Instance() {
  void * jresult ;
  Core::Training::CTrainingManager *result = 0 ;
  
  result = (Core::Training::CTrainingManager *)Core::Training::CTrainingManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CTrainingManager(void * jarg1) {
  Core::Training::CTrainingManager *arg1 = (Core::Training::CTrainingManager *) 0 ;
  
  arg1 = (Core::Training::CTrainingManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTrainingManager_AddFacility(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::Training::CTrainingManager *arg1 = (Core::Training::CTrainingManager *) 0 ;
  Core::E_PLAYER_TEAM arg2 ;
  u32 arg3 ;
  u32 *argp3 ;
  bool result;
  
  arg1 = (Core::Training::CTrainingManager *)jarg1; 
  arg2 = (Core::E_PLAYER_TEAM)jarg2; 
  argp3 = (u32 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->AddFacility(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTrainingManager_RemoveFacility(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::Training::CTrainingManager *arg1 = (Core::Training::CTrainingManager *) 0 ;
  Core::E_PLAYER_TEAM arg2 ;
  u32 arg3 ;
  u32 *argp3 ;
  bool result;
  
  arg1 = (Core::Training::CTrainingManager *)jarg1; 
  arg2 = (Core::E_PLAYER_TEAM)jarg2; 
  argp3 = (u32 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->RemoveFacility(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTrainingManager_IsCapable(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Core::Training::CTrainingManager *arg1 = (Core::Training::CTrainingManager *) 0 ;
  Core::E_PLAYER_TEAM arg2 ;
  Core::Training::ET_CAPABILITIES arg3 ;
  bool result;
  
  arg1 = (Core::Training::CTrainingManager *)jarg1; 
  arg2 = (Core::E_PLAYER_TEAM)jarg2; 
  arg3 = (Core::Training::ET_CAPABILITIES)jarg3; 
  result = (bool)(arg1)->IsCapable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTrainingManager_StartPlayerTraining(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Core::Training::CTrainingManager *arg1 = (Core::Training::CTrainingManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  Core::CPlayerAttributesComponent *arg3 = (Core::CPlayerAttributesComponent *) 0 ;
  bool result;
  
  arg1 = (Core::Training::CTrainingManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  arg3 = (Core::CPlayerAttributesComponent *)jarg3; 
  result = (bool)(arg1)->StartPlayerTraining(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTrainingManager_StopPlayerTraining(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::Training::CTrainingManager *arg1 = (Core::Training::CTrainingManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  bool result;
  
  arg1 = (Core::Training::CTrainingManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  result = (bool)(arg1)->StopPlayerTraining(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTrainingManager_IsPlayerTraining(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::Training::CTrainingManager *arg1 = (Core::Training::CTrainingManager *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  bool result;
  
  arg1 = (Core::Training::CTrainingManager *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  result = (bool)(arg1)->IsPlayerTraining(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTrainingManager_GetPlayerTrainingList(void * jarg1, int jarg2, void * jarg3) {
  Core::Training::CTrainingManager *arg1 = (Core::Training::CTrainingManager *) 0 ;
  Core::E_PLAYER_TEAM arg2 ;
  Vector< u32 > *arg3 = 0 ;
  
  arg1 = (Core::Training::CTrainingManager *)jarg1; 
  arg2 = (Core::E_PLAYER_TEAM)jarg2; 
  arg3 = (Vector< u32 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector< u32 > & type is null", 0);
    return ;
  } 
  (arg1)->GetPlayerTrainingList(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTrainingManager_OnPlayerAttributeUpdate(void * jarg1) {
  Core::Training::CTrainingManager *arg1 = (Core::Training::CTrainingManager *) 0 ;
  
  arg1 = (Core::Training::CTrainingManager *)jarg1; 
  (arg1)->OnPlayerAttributeUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTrainingManager_Update(void * jarg1, void * jarg2) {
  Core::Training::CTrainingManager *arg1 = (Core::Training::CTrainingManager *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::Training::CTrainingManager *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVolumeObject_SetEnterFunc(void * jarg1, void * jarg2) {
  Core::Physics::CVolumeObject *arg1 = (Core::Physics::CVolumeObject *) 0 ;
  Core::Physics::CVolumeObject::OnEnterFunc *arg2 = (Core::Physics::CVolumeObject::OnEnterFunc *) 0 ;
  
  arg1 = (Core::Physics::CVolumeObject *)jarg1; 
  arg2 = (Core::Physics::CVolumeObject::OnEnterFunc *)jarg2; 
  (arg1)->SetEnterFunc(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVolumeObject_SetExitFunc(void * jarg1, void * jarg2) {
  Core::Physics::CVolumeObject *arg1 = (Core::Physics::CVolumeObject *) 0 ;
  Core::Physics::CVolumeObject::OnExitFunc *arg2 = (Core::Physics::CVolumeObject::OnExitFunc *) 0 ;
  
  arg1 = (Core::Physics::CVolumeObject *)jarg1; 
  arg2 = (Core::Physics::CVolumeObject::OnExitFunc *)jarg2; 
  (arg1)->SetExitFunc(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVolumeObject_SetPosition(void * jarg1, void * jarg2) {
  Core::Physics::CVolumeObject *arg1 = (Core::Physics::CVolumeObject *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Core::Physics::CVolumeObject *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPosition((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVolumeObject_RemoveVolume(void * jarg1) {
  Core::Physics::CVolumeObject *arg1 = (Core::Physics::CVolumeObject *) 0 ;
  
  arg1 = (Core::Physics::CVolumeObject *)jarg1; 
  (arg1)->RemoveVolume();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CVolumeObject(void * jarg1) {
  Core::Physics::CVolumeObject *arg1 = (Core::Physics::CVolumeObject *) 0 ;
  
  arg1 = (Core::Physics::CVolumeObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CWeapon__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Core::CWeaponProfile *arg1 = 0 ;
  Core::Physics::IPhysicsStrategy *arg2 = (Core::Physics::IPhysicsStrategy *) 0 ;
  Core::CWeapon *result = 0 ;
  
  arg1 = (Core::CWeaponProfile *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Core::CWeaponProfile const & type is null", 0);
    return 0;
  } 
  arg2 = (Core::Physics::IPhysicsStrategy *)jarg2; 
  result = (Core::CWeapon *)new Core::CWeapon((Core::CWeaponProfile const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CWeapon__SWIG_1(void * jarg1) {
  void * jresult ;
  Core::CWeaponProfile *arg1 = 0 ;
  Core::CWeapon *result = 0 ;
  
  arg1 = (Core::CWeaponProfile *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Core::CWeaponProfile const & type is null", 0);
    return 0;
  } 
  result = (Core::CWeapon *)new Core::CWeapon((Core::CWeaponProfile const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CWeapon(void * jarg1) {
  Core::CWeapon *arg1 = (Core::CWeapon *) 0 ;
  
  arg1 = (Core::CWeapon *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWeapon_Update(void * jarg1, void * jarg2) {
  Core::CWeapon *arg1 = (Core::CWeapon *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::CWeapon *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWeapon_ShowSight(void * jarg1, unsigned int jarg2) {
  Core::CWeapon *arg1 = (Core::CWeapon *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CWeapon *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ShowSight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWeapon_SetUsed(void * jarg1, unsigned int jarg2) {
  Core::CWeapon *arg1 = (Core::CWeapon *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CWeapon *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUsed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CWeapon_Use(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Core::CWeapon *arg1 = (Core::CWeapon *) 0 ;
  Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Core::CWeapon *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Use((Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CWeapon_GetMagazine(void * jarg1) {
  void * jresult ;
  Core::CWeapon *arg1 = (Core::CWeapon *) 0 ;
  Core::CMagazine *result = 0 ;
  
  arg1 = (Core::CWeapon *)jarg1; 
  result = (Core::CMagazine *)(arg1)->GetMagazine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWeapon_SetMagazine(void * jarg1, void * jarg2) {
  Core::CWeapon *arg1 = (Core::CWeapon *) 0 ;
  Core::CMagazine *arg2 = (Core::CMagazine *) 0 ;
  
  arg1 = (Core::CWeapon *)jarg1; 
  arg2 = (Core::CMagazine *)jarg2; 
  (arg1)->SetMagazine(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CProjectileProfile() {
  void * jresult ;
  Core::CProjectileProfile *result = 0 ;
  
  result = (Core::CProjectileProfile *)new Core::CProjectileProfile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CProjectileProfile(void * jarg1) {
  Core::CProjectileProfile *arg1 = (Core::CProjectileProfile *) 0 ;
  
  arg1 = (Core::CProjectileProfile *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProjectileProfile_Damage_set(void * jarg1, void * jarg2) {
  Core::CProjectileProfile *arg1 = (Core::CProjectileProfile *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CProjectileProfile *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Damage = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProjectileProfile_Damage_get(void * jarg1) {
  void * jresult ;
  Core::CProjectileProfile *arg1 = (Core::CProjectileProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::CProjectileProfile *)jarg1; 
  result =  ((arg1)->Damage);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProjectileProfile_Speed_set(void * jarg1, void * jarg2) {
  Core::CProjectileProfile *arg1 = (Core::CProjectileProfile *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CProjectileProfile *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Speed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProjectileProfile_Speed_get(void * jarg1) {
  void * jresult ;
  Core::CProjectileProfile *arg1 = (Core::CProjectileProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::CProjectileProfile *)jarg1; 
  result =  ((arg1)->Speed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProjectileProfile_BillboardBullet_set(void * jarg1, void * jarg2) {
  Core::CProjectileProfile *arg1 = (Core::CProjectileProfile *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CProjectileProfile *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->BillboardBullet = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProjectileProfile_BillboardBullet_get(void * jarg1) {
  void * jresult ;
  Core::CProjectileProfile *arg1 = (Core::CProjectileProfile *) 0 ;
  String result;
  
  arg1 = (Core::CProjectileProfile *)jarg1; 
  result =  ((arg1)->BillboardBullet);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProjectileProfile_BillboardFlash_set(void * jarg1, void * jarg2) {
  Core::CProjectileProfile *arg1 = (Core::CProjectileProfile *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CProjectileProfile *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->BillboardFlash = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProjectileProfile_BillboardFlash_get(void * jarg1) {
  void * jresult ;
  Core::CProjectileProfile *arg1 = (Core::CProjectileProfile *) 0 ;
  String result;
  
  arg1 = (Core::CProjectileProfile *)jarg1; 
  result =  ((arg1)->BillboardFlash);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProjectileProfile_isPenetrate_set(void * jarg1, unsigned int jarg2) {
  Core::CProjectileProfile *arg1 = (Core::CProjectileProfile *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CProjectileProfile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPenetrate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CProjectileProfile_isPenetrate_get(void * jarg1) {
  unsigned int jresult ;
  Core::CProjectileProfile *arg1 = (Core::CProjectileProfile *) 0 ;
  bool result;
  
  arg1 = (Core::CProjectileProfile *)jarg1; 
  result = (bool) ((arg1)->isPenetrate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CMagazineProfile() {
  void * jresult ;
  Core::CMagazineProfile *result = 0 ;
  
  result = (Core::CMagazineProfile *)new Core::CMagazineProfile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CMagazineProfile(void * jarg1) {
  Core::CMagazineProfile *arg1 = (Core::CMagazineProfile *) 0 ;
  
  arg1 = (Core::CMagazineProfile *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMagazineProfile_Capacity_set(void * jarg1, void * jarg2) {
  Core::CMagazineProfile *arg1 = (Core::CMagazineProfile *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CMagazineProfile *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMagazineProfile_Capacity_get(void * jarg1) {
  void * jresult ;
  Core::CMagazineProfile *arg1 = (Core::CMagazineProfile *) 0 ;
  u32 result;
  
  arg1 = (Core::CMagazineProfile *)jarg1; 
  result =  ((arg1)->Capacity);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMagazineProfile_ProjectileProfile_set(void * jarg1, void * jarg2) {
  Core::CMagazineProfile *arg1 = (Core::CMagazineProfile *) 0 ;
  Core::CProjectileProfile *arg2 = (Core::CProjectileProfile *) 0 ;
  
  arg1 = (Core::CMagazineProfile *)jarg1; 
  arg2 = (Core::CProjectileProfile *)jarg2; 
  if (arg1) (arg1)->ProjectileProfile = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMagazineProfile_ProjectileProfile_get(void * jarg1) {
  void * jresult ;
  Core::CMagazineProfile *arg1 = (Core::CMagazineProfile *) 0 ;
  Core::CProjectileProfile *result = 0 ;
  
  arg1 = (Core::CMagazineProfile *)jarg1; 
  result = (Core::CProjectileProfile *)& ((arg1)->ProjectileProfile);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CWeaponProfile() {
  void * jresult ;
  Core::CWeaponProfile *result = 0 ;
  
  result = (Core::CWeaponProfile *)new Core::CWeaponProfile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CWeaponProfile(void * jarg1) {
  Core::CWeaponProfile *arg1 = (Core::CWeaponProfile *) 0 ;
  
  arg1 = (Core::CWeaponProfile *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWeaponProfile_isSemi_set(void * jarg1, unsigned int jarg2) {
  Core::CWeaponProfile *arg1 = (Core::CWeaponProfile *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CWeaponProfile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSemi = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CWeaponProfile_isSemi_get(void * jarg1) {
  unsigned int jresult ;
  Core::CWeaponProfile *arg1 = (Core::CWeaponProfile *) 0 ;
  bool result;
  
  arg1 = (Core::CWeaponProfile *)jarg1; 
  result = (bool) ((arg1)->isSemi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWeaponProfile_isBurst_set(void * jarg1, unsigned int jarg2) {
  Core::CWeaponProfile *arg1 = (Core::CWeaponProfile *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CWeaponProfile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isBurst = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CWeaponProfile_isBurst_get(void * jarg1) {
  unsigned int jresult ;
  Core::CWeaponProfile *arg1 = (Core::CWeaponProfile *) 0 ;
  bool result;
  
  arg1 = (Core::CWeaponProfile *)jarg1; 
  result = (bool) ((arg1)->isBurst);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWeaponProfile_isAuto_set(void * jarg1, unsigned int jarg2) {
  Core::CWeaponProfile *arg1 = (Core::CWeaponProfile *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CWeaponProfile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isAuto = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CWeaponProfile_isAuto_get(void * jarg1) {
  unsigned int jresult ;
  Core::CWeaponProfile *arg1 = (Core::CWeaponProfile *) 0 ;
  bool result;
  
  arg1 = (Core::CWeaponProfile *)jarg1; 
  result = (bool) ((arg1)->isAuto);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWeaponProfile_Accuracy_set(void * jarg1, void * jarg2) {
  Core::CWeaponProfile *arg1 = (Core::CWeaponProfile *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CWeaponProfile *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Accuracy = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CWeaponProfile_Accuracy_get(void * jarg1) {
  void * jresult ;
  Core::CWeaponProfile *arg1 = (Core::CWeaponProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::CWeaponProfile *)jarg1; 
  result =  ((arg1)->Accuracy);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWeaponProfile_MagazineProfile_set(void * jarg1, void * jarg2) {
  Core::CWeaponProfile *arg1 = (Core::CWeaponProfile *) 0 ;
  Core::CMagazineProfile *arg2 = (Core::CMagazineProfile *) 0 ;
  
  arg1 = (Core::CWeaponProfile *)jarg1; 
  arg2 = (Core::CMagazineProfile *)jarg2; 
  if (arg1) (arg1)->MagazineProfile = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CWeaponProfile_MagazineProfile_get(void * jarg1) {
  void * jresult ;
  Core::CWeaponProfile *arg1 = (Core::CWeaponProfile *) 0 ;
  Core::CMagazineProfile *result = 0 ;
  
  arg1 = (Core::CWeaponProfile *)jarg1; 
  result = (Core::CMagazineProfile *)& ((arg1)->MagazineProfile);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CWorldProfile() {
  void * jresult ;
  Core::Physics::CWorldProfile *result = 0 ;
  
  result = (Core::Physics::CWorldProfile *)new Core::Physics::CWorldProfile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWorldProfile_LinearDamping_set(void * jarg1, void * jarg2) {
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->LinearDamping = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CWorldProfile_LinearDamping_get(void * jarg1) {
  void * jresult ;
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  result =  ((arg1)->LinearDamping);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWorldProfile_AngularDamping_set(void * jarg1, void * jarg2) {
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->AngularDamping = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CWorldProfile_AngularDamping_get(void * jarg1) {
  void * jresult ;
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  result =  ((arg1)->AngularDamping);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWorldProfile_MaxAngularSpeed_set(void * jarg1, void * jarg2) {
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaxAngularSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CWorldProfile_MaxAngularSpeed_get(void * jarg1) {
  void * jresult ;
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  result =  ((arg1)->MaxAngularSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWorldProfile_ContactCorrectionVelocity_set(void * jarg1, void * jarg2) {
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ContactCorrectionVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CWorldProfile_ContactCorrectionVelocity_get(void * jarg1) {
  void * jresult ;
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  result =  ((arg1)->ContactCorrectionVelocity);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWorldProfile_ContactSurfaceLayer_set(void * jarg1, void * jarg2) {
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ContactSurfaceLayer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CWorldProfile_ContactSurfaceLayer_get(void * jarg1) {
  void * jresult ;
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  result =  ((arg1)->ContactSurfaceLayer);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWorldProfile_Gravity_set(void * jarg1, void * jarg2) {
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Gravity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CWorldProfile_Gravity_get(void * jarg1) {
  void * jresult ;
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  Vector3 result;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  result =  ((arg1)->Gravity);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CWorldProfile_Bounds_set(void * jarg1, void * jarg2) {
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  AxisAlignedBox arg2 ;
  AxisAlignedBox *argp2 ;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  argp2 = (AxisAlignedBox *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null AxisAlignedBox", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Bounds = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CWorldProfile_Bounds_get(void * jarg1) {
  void * jresult ;
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  AxisAlignedBox result;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  result =  ((arg1)->Bounds);
  jresult = new AxisAlignedBox((const AxisAlignedBox &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CWorldProfile(void * jarg1) {
  Core::Physics::CWorldProfile *arg1 = (Core::Physics::CWorldProfile *) 0 ;
  
  arg1 = (Core::Physics::CWorldProfile *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAgentSteer(void * jarg1) {
  Core::AI::IAgentSteer *arg1 = (Core::AI::IAgentSteer *) 0 ;
  
  arg1 = (Core::AI::IAgentSteer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IAgentSteer() {
  void * jresult ;
  Core::AI::IAgentSteer *result = 0 ;
  
  result = (Core::AI::IAgentSteer *)new Core::AI::IAgentSteer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CMissionEvent() {
  void * jresult ;
  Core::Mission::CMissionEvent *result = 0 ;
  
  result = (Core::Mission::CMissionEvent *)new Core::Mission::CMissionEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionEvent_Owner_set(void * jarg1, void * jarg2) {
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  if (arg1) (arg1)->Owner = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMissionEvent_Owner_get(void * jarg1) {
  void * jresult ;
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  result = (Core::CPlayer *) ((arg1)->Owner);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionEvent_Killed_set(void * jarg1, void * jarg2) {
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  Core::CPlayer *arg2 = (Core::CPlayer *) 0 ;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  arg2 = (Core::CPlayer *)jarg2; 
  if (arg1) (arg1)->Killed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMissionEvent_Killed_get(void * jarg1) {
  void * jresult ;
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  Core::CPlayer *result = 0 ;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  result = (Core::CPlayer *) ((arg1)->Killed);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionEvent_InventoryItem_set(void * jarg1, void * jarg2) {
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  Core::CInventoryItem *arg2 = (Core::CInventoryItem *) 0 ;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  arg2 = (Core::CInventoryItem *)jarg2; 
  if (arg1) (arg1)->InventoryItem = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMissionEvent_InventoryItem_get(void * jarg1) {
  void * jresult ;
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  Core::CInventoryItem *result = 0 ;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  result = (Core::CInventoryItem *) ((arg1)->InventoryItem);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionEvent_Projectile_set(void * jarg1, void * jarg2) {
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  Core::CProjectile *arg2 = (Core::CProjectile *) 0 ;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  arg2 = (Core::CProjectile *)jarg2; 
  if (arg1) (arg1)->Projectile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMissionEvent_Projectile_get(void * jarg1) {
  void * jresult ;
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  Core::CProjectile *result = 0 ;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  result = (Core::CProjectile *) ((arg1)->Projectile);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionEvent_UserData_set(void * jarg1, void * jarg2) {
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->UserData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMissionEvent_UserData_get(void * jarg1) {
  void * jresult ;
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  void *result = 0 ;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  result = (void *) ((arg1)->UserData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMissionEvent_MissionType_set(void * jarg1, int jarg2) {
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  Core::Mission::MISSION_TYPE arg2 ;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  arg2 = (Core::Mission::MISSION_TYPE)jarg2; 
  if (arg1) (arg1)->MissionType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CMissionEvent_MissionType_get(void * jarg1) {
  int jresult ;
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  Core::Mission::MISSION_TYPE result;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  result = (Core::Mission::MISSION_TYPE) ((arg1)->MissionType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CMissionEvent(void * jarg1) {
  Core::Mission::CMissionEvent *arg1 = (Core::Mission::CMissionEvent *) 0 ;
  
  arg1 = (Core::Mission::CMissionEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MovableTextOverlayAttributes__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  String *arg1 = 0 ;
  Camera *arg2 = (Camera *) 0 ;
  String *arg3 = 0 ;
  f32 *arg4 = 0 ;
  ColourValue *arg5 = 0 ;
  String *arg6 = 0 ;
  Core::OgreSpecific::MovableTextOverlayAttributes *result = 0 ;
  
  arg1 = (String *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return 0;
  } 
  arg2 = (Camera *)jarg2; 
  arg3 = (String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return 0;
  } 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg5 = (ColourValue *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColourValue const & type is null", 0);
    return 0;
  } 
  arg6 = (String *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return 0;
  } 
  result = (Core::OgreSpecific::MovableTextOverlayAttributes *)new Core::OgreSpecific::MovableTextOverlayAttributes((String const &)*arg1,(Camera const *)arg2,(String const &)*arg3,(f32 const &)*arg4,(ColourValue const &)*arg5,(String const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MovableTextOverlayAttributes__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  String *arg1 = 0 ;
  Camera *arg2 = (Camera *) 0 ;
  String *arg3 = 0 ;
  f32 *arg4 = 0 ;
  ColourValue *arg5 = 0 ;
  Core::OgreSpecific::MovableTextOverlayAttributes *result = 0 ;
  
  arg1 = (String *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return 0;
  } 
  arg2 = (Camera *)jarg2; 
  arg3 = (String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return 0;
  } 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg5 = (ColourValue *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColourValue const & type is null", 0);
    return 0;
  } 
  result = (Core::OgreSpecific::MovableTextOverlayAttributes *)new Core::OgreSpecific::MovableTextOverlayAttributes((String const &)*arg1,(Camera const *)arg2,(String const &)*arg3,(f32 const &)*arg4,(ColourValue const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MovableTextOverlayAttributes__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  String *arg1 = 0 ;
  Camera *arg2 = (Camera *) 0 ;
  String *arg3 = 0 ;
  f32 *arg4 = 0 ;
  Core::OgreSpecific::MovableTextOverlayAttributes *result = 0 ;
  
  arg1 = (String *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return 0;
  } 
  arg2 = (Camera *)jarg2; 
  arg3 = (String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return 0;
  } 
  arg4 = (f32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::OgreSpecific::MovableTextOverlayAttributes *)new Core::OgreSpecific::MovableTextOverlayAttributes((String const &)*arg1,(Camera const *)arg2,(String const &)*arg3,(f32 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MovableTextOverlayAttributes__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  String *arg1 = 0 ;
  Camera *arg2 = (Camera *) 0 ;
  String *arg3 = 0 ;
  Core::OgreSpecific::MovableTextOverlayAttributes *result = 0 ;
  
  arg1 = (String *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return 0;
  } 
  arg2 = (Camera *)jarg2; 
  arg3 = (String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return 0;
  } 
  result = (Core::OgreSpecific::MovableTextOverlayAttributes *)new Core::OgreSpecific::MovableTextOverlayAttributes((String const &)*arg1,(Camera const *)arg2,(String const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MovableTextOverlayAttributes__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  String *arg1 = 0 ;
  Camera *arg2 = (Camera *) 0 ;
  Core::OgreSpecific::MovableTextOverlayAttributes *result = 0 ;
  
  arg1 = (String *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return 0;
  } 
  arg2 = (Camera *)jarg2; 
  result = (Core::OgreSpecific::MovableTextOverlayAttributes *)new Core::OgreSpecific::MovableTextOverlayAttributes((String const &)*arg1,(Camera const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MovableTextOverlayAttributes(void * jarg1) {
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlayAttributes_SetFontName(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  arg2 = (String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return ;
  } 
  (arg1)->SetFontName((String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlayAttributes_SetMaterialName(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  arg2 = (String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String const & type is null", 0);
    return ;
  } 
  (arg1)->SetMaterialName((String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlayAttributes_SetColor(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  ColourValue *arg2 = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  arg2 = (ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColourValue const & type is null", 0);
    return ;
  } 
  (arg1)->SetColor((ColourValue const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlayAttributes_SetCharacterHeight(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetCharacterHeight(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_GetName(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  String *result = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result = (String *) &((Core::OgreSpecific::MovableTextOverlayAttributes const *)arg1)->GetName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_GetCamera(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  Camera *result = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result = (Camera *)((Core::OgreSpecific::MovableTextOverlayAttributes const *)arg1)->GetCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_GetFont(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  Font *result = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result = (Font *)((Core::OgreSpecific::MovableTextOverlayAttributes const *)arg1)->GetFont();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_GetFontName(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  String *result = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result = (String *) &((Core::OgreSpecific::MovableTextOverlayAttributes const *)arg1)->GetFontName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_GetMaterialName(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  String *result = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result = (String *) &((Core::OgreSpecific::MovableTextOverlayAttributes const *)arg1)->GetMaterialName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_GetColor(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  ColourValue *result = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result = (ColourValue *) &((Core::OgreSpecific::MovableTextOverlayAttributes const *)arg1)->GetColor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_GetCharacterHeight(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  f32 result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result = ((Core::OgreSpecific::MovableTextOverlayAttributes const *)arg1)->GetCharacterHeight();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mName_get(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  String result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result = (String) ((arg1)->mName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mpCam_set(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  Camera *arg2 = (Camera *) 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  arg2 = (Camera *)jarg2; 
  if (arg1) (arg1)->mpCam = (Camera const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mpCam_get(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  Camera *result = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result = (Camera *) ((arg1)->mpCam);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mpFont_set(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  Font *arg2 = (Font *) 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  arg2 = (Font *)jarg2; 
  if (arg1) (arg1)->mpFont = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mpFont_get(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  Font *result = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result = (Font *) ((arg1)->mpFont);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mFontName_set(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mFontName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mFontName_get(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  String result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result =  ((arg1)->mFontName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mMaterialName_set(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mMaterialName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mMaterialName_get(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  String result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result =  ((arg1)->mMaterialName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mColor_set(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  ColourValue arg2 ;
  ColourValue *argp2 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  argp2 = (ColourValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ColourValue", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mColor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mColor_get(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  ColourValue result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result =  ((arg1)->mColor);
  jresult = new ColourValue((const ColourValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mCharHeight_set(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mCharHeight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlayAttributes_mCharHeight_get(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  f32 result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg1; 
  result =  ((arg1)->mCharHeight);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MovableTextOverlay(char * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  MovableObject *arg3 = (MovableObject *) 0 ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg4 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  Core::OgreSpecific::MovableTextOverlay *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (MovableObject *)jarg3; 
  arg4 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg4; 
  result = (Core::OgreSpecific::MovableTextOverlay *)new Core::OgreSpecific::MovableTextOverlay((char const *)arg1,(char const *)arg2,(MovableObject const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MovableTextOverlay(void * jarg1) {
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlay_SetCaption(void * jarg1, char * jarg2) {
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCaption((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlay_SetUpdateFrequency(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetUpdateFrequency(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlay_SetAttributes(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  Core::OgreSpecific::MovableTextOverlayAttributes *arg2 = (Core::OgreSpecific::MovableTextOverlayAttributes *) 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  arg2 = (Core::OgreSpecific::MovableTextOverlayAttributes *)jarg2; 
  (arg1)->SetAttributes(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlay_GetName(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  String *result = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  result = (String *) &((Core::OgreSpecific::MovableTextOverlay const *)arg1)->GetName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlay_GetCaption(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  String *result = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  result = (String *) &((Core::OgreSpecific::MovableTextOverlay const *)arg1)->GetCaption();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlay_GetUpdateFrequency(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  f32 result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  result = ((Core::OgreSpecific::MovableTextOverlay const *)arg1)->GetUpdateFrequency();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MovableTextOverlay_IsOnScreen(void * jarg1) {
  unsigned int jresult ;
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  bool result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  result = (bool)((Core::OgreSpecific::MovableTextOverlay const *)arg1)->IsOnScreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MovableTextOverlay_IsEnabled(void * jarg1) {
  unsigned int jresult ;
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  bool result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  result = (bool)((Core::OgreSpecific::MovableTextOverlay const *)arg1)->IsEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlay_getAttributes(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  Core::OgreSpecific::MovableTextOverlayAttributes *result = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  result = (Core::OgreSpecific::MovableTextOverlayAttributes *)((Core::OgreSpecific::MovableTextOverlay const *)arg1)->getAttributes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlay_Enable(void * jarg1, unsigned int jarg2) {
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Enable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlay_Update(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  f32 *arg2 = 0 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  arg2 = (f32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return ;
  } 
  (arg1)->Update((f32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlay_GetPixelsTop(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  f32 result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  result = (arg1)->GetPixelsTop();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlay_GetPixelsBottom(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  f32 result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  result = (arg1)->GetPixelsBottom();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlay_GetPixelsLeft(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  f32 result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  result = (arg1)->GetPixelsLeft();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovableTextOverlay_GetPixelsRight(void * jarg1) {
  void * jresult ;
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  f32 result;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  result = (arg1)->GetPixelsRight();
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableTextOverlay_SetPixelsTop(void * jarg1, void * jarg2) {
  Core::OgreSpecific::MovableTextOverlay *arg1 = (Core::OgreSpecific::MovableTextOverlay *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::OgreSpecific::MovableTextOverlay *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetPixelsTop(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VolumePackage() {
  void * jresult ;
  Core::Physics::VolumePackage *result = 0 ;
  
  result = (Core::Physics::VolumePackage *)new Core::Physics::VolumePackage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VolumePackage_Profile_set(void * jarg1, void * jarg2) {
  Core::Physics::VolumePackage *arg1 = (Core::Physics::VolumePackage *) 0 ;
  Core::Physics::CPhysicsProfile *arg2 = (Core::Physics::CPhysicsProfile *) 0 ;
  
  arg1 = (Core::Physics::VolumePackage *)jarg1; 
  arg2 = (Core::Physics::CPhysicsProfile *)jarg2; 
  if (arg1) (arg1)->Profile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VolumePackage_Profile_get(void * jarg1) {
  void * jresult ;
  Core::Physics::VolumePackage *arg1 = (Core::Physics::VolumePackage *) 0 ;
  Core::Physics::CPhysicsProfile *result = 0 ;
  
  arg1 = (Core::Physics::VolumePackage *)jarg1; 
  result = (Core::Physics::CPhysicsProfile *) ((arg1)->Profile);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VolumePackage_Strategy_set(void * jarg1, void * jarg2) {
  Core::Physics::VolumePackage *arg1 = (Core::Physics::VolumePackage *) 0 ;
  Core::Physics::IPhysicsStrategy *arg2 = (Core::Physics::IPhysicsStrategy *) 0 ;
  
  arg1 = (Core::Physics::VolumePackage *)jarg1; 
  arg2 = (Core::Physics::IPhysicsStrategy *)jarg2; 
  if (arg1) (arg1)->Strategy = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VolumePackage_Strategy_get(void * jarg1) {
  void * jresult ;
  Core::Physics::VolumePackage *arg1 = (Core::Physics::VolumePackage *) 0 ;
  Core::Physics::IPhysicsStrategy *result = 0 ;
  
  arg1 = (Core::Physics::VolumePackage *)jarg1; 
  result = (Core::Physics::IPhysicsStrategy *) ((arg1)->Strategy);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VolumePackage_Scale_set(void * jarg1, void * jarg2) {
  Core::Physics::VolumePackage *arg1 = (Core::Physics::VolumePackage *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::Physics::VolumePackage *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Scale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VolumePackage_Scale_get(void * jarg1) {
  void * jresult ;
  Core::Physics::VolumePackage *arg1 = (Core::Physics::VolumePackage *) 0 ;
  f32 result;
  
  arg1 = (Core::Physics::VolumePackage *)jarg1; 
  result =  ((arg1)->Scale);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VolumePackage_isRemoveCallback_set(void * jarg1, unsigned int jarg2) {
  Core::Physics::VolumePackage *arg1 = (Core::Physics::VolumePackage *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::Physics::VolumePackage *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isRemoveCallback = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VolumePackage_isRemoveCallback_get(void * jarg1) {
  unsigned int jresult ;
  Core::Physics::VolumePackage *arg1 = (Core::Physics::VolumePackage *) 0 ;
  bool result;
  
  arg1 = (Core::Physics::VolumePackage *)jarg1; 
  result = (bool) ((arg1)->isRemoveCallback);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VolumePackage_EnableRaycast_set(void * jarg1, unsigned int jarg2) {
  Core::Physics::VolumePackage *arg1 = (Core::Physics::VolumePackage *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::Physics::VolumePackage *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->EnableRaycast = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VolumePackage_EnableRaycast_get(void * jarg1) {
  unsigned int jresult ;
  Core::Physics::VolumePackage *arg1 = (Core::Physics::VolumePackage *) 0 ;
  bool result;
  
  arg1 = (Core::Physics::VolumePackage *)jarg1; 
  result = (bool) ((arg1)->EnableRaycast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VolumePackage(void * jarg1) {
  Core::Physics::VolumePackage *arg1 = (Core::Physics::VolumePackage *) 0 ;
  
  arg1 = (Core::Physics::VolumePackage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SPhysicsRayCastReport() {
  void * jresult ;
  Core::Physics::SPhysicsRayCastReport *result = 0 ;
  
  result = (Core::Physics::SPhysicsRayCastReport *)new Core::Physics::SPhysicsRayCastReport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SPhysicsRayCastReport_Data_set(void * jarg1, void * jarg2) {
  Core::Physics::SPhysicsRayCastReport *arg1 = (Core::Physics::SPhysicsRayCastReport *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Core::Physics::SPhysicsRayCastReport *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SPhysicsRayCastReport_Data_get(void * jarg1) {
  void * jresult ;
  Core::Physics::SPhysicsRayCastReport *arg1 = (Core::Physics::SPhysicsRayCastReport *) 0 ;
  void *result = 0 ;
  
  arg1 = (Core::Physics::SPhysicsRayCastReport *)jarg1; 
  result = (void *) ((arg1)->Data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SPhysicsRayCastReport_BodyType_set(void * jarg1, int jarg2) {
  Core::Physics::SPhysicsRayCastReport *arg1 = (Core::Physics::SPhysicsRayCastReport *) 0 ;
  Core::Physics::E_BODY_TYPE arg2 ;
  
  arg1 = (Core::Physics::SPhysicsRayCastReport *)jarg1; 
  arg2 = (Core::Physics::E_BODY_TYPE)jarg2; 
  if (arg1) (arg1)->BodyType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPhysicsRayCastReport_BodyType_get(void * jarg1) {
  int jresult ;
  Core::Physics::SPhysicsRayCastReport *arg1 = (Core::Physics::SPhysicsRayCastReport *) 0 ;
  Core::Physics::E_BODY_TYPE result;
  
  arg1 = (Core::Physics::SPhysicsRayCastReport *)jarg1; 
  result = (Core::Physics::E_BODY_TYPE) ((arg1)->BodyType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SPhysicsRayCastReport_Position_set(void * jarg1, void * jarg2) {
  Core::Physics::SPhysicsRayCastReport *arg1 = (Core::Physics::SPhysicsRayCastReport *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::Physics::SPhysicsRayCastReport *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SPhysicsRayCastReport_Position_get(void * jarg1) {
  void * jresult ;
  Core::Physics::SPhysicsRayCastReport *arg1 = (Core::Physics::SPhysicsRayCastReport *) 0 ;
  Vector3 result;
  
  arg1 = (Core::Physics::SPhysicsRayCastReport *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SPhysicsRayCastReport(void * jarg1) {
  Core::Physics::SPhysicsRayCastReport *arg1 = (Core::Physics::SPhysicsRayCastReport *) 0 ;
  
  arg1 = (Core::Physics::SPhysicsRayCastReport *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneImporterPackage() {
  void * jresult ;
  Core::SceneImporterPackage *result = 0 ;
  
  result = (Core::SceneImporterPackage *)new Core::SceneImporterPackage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneImporterPackage_GameManager_set(void * jarg1, void * jarg2) {
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Core::CGameManager *arg2 = (Core::CGameManager *) 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  arg2 = (Core::CGameManager *)jarg2; 
  if (arg1) (arg1)->GameManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneImporterPackage_GameManager_get(void * jarg1) {
  void * jresult ;
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Core::CGameManager *result = 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  result = (Core::CGameManager *) ((arg1)->GameManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneImporterPackage_PhysicsStrategy_set(void * jarg1, void * jarg2) {
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Core::Physics::IPhysicsStrategy *arg2 = (Core::Physics::IPhysicsStrategy *) 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  arg2 = (Core::Physics::IPhysicsStrategy *)jarg2; 
  if (arg1) (arg1)->PhysicsStrategy = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneImporterPackage_PhysicsStrategy_get(void * jarg1) {
  void * jresult ;
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Core::Physics::IPhysicsStrategy *result = 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  result = (Core::Physics::IPhysicsStrategy *) ((arg1)->PhysicsStrategy);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneImporterPackage_SoundManager_set(void * jarg1, void * jarg2) {
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Sound::CSoundManager *arg2 = (Sound::CSoundManager *) 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  arg2 = (Sound::CSoundManager *)jarg2; 
  if (arg1) (arg1)->SoundManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneImporterPackage_SoundManager_get(void * jarg1) {
  void * jresult ;
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Sound::CSoundManager *result = 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  result = (Sound::CSoundManager *) ((arg1)->SoundManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneImporterPackage_ItemsManager_set(void * jarg1, void * jarg2) {
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Core::CItemsManager *arg2 = (Core::CItemsManager *) 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  arg2 = (Core::CItemsManager *)jarg2; 
  if (arg1) (arg1)->ItemsManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneImporterPackage_ItemsManager_get(void * jarg1) {
  void * jresult ;
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Core::CItemsManager *result = 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  result = (Core::CItemsManager *) ((arg1)->ItemsManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneImporterPackage_GameObjectManager_set(void * jarg1, void * jarg2) {
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Core::CGameObjectManager *arg2 = (Core::CGameObjectManager *) 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  arg2 = (Core::CGameObjectManager *)jarg2; 
  if (arg1) (arg1)->GameObjectManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneImporterPackage_GameObjectManager_get(void * jarg1) {
  void * jresult ;
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Core::CGameObjectManager *result = 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  result = (Core::CGameObjectManager *) ((arg1)->GameObjectManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneImporterPackage_NatureManager_set(void * jarg1, void * jarg2) {
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Core::Nature::CNatureManager *arg2 = (Core::Nature::CNatureManager *) 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  arg2 = (Core::Nature::CNatureManager *)jarg2; 
  if (arg1) (arg1)->NatureManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneImporterPackage_NatureManager_get(void * jarg1) {
  void * jresult ;
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Core::Nature::CNatureManager *result = 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  result = (Core::Nature::CNatureManager *) ((arg1)->NatureManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneImporterPackage_CameraManager_set(void * jarg1, void * jarg2) {
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Core::CCameraManager *arg2 = (Core::CCameraManager *) 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  arg2 = (Core::CCameraManager *)jarg2; 
  if (arg1) (arg1)->CameraManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneImporterPackage_CameraManager_get(void * jarg1) {
  void * jresult ;
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  Core::CCameraManager *result = 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  result = (Core::CCameraManager *) ((arg1)->CameraManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneImporterPackage_ResourceGroupName_set(void * jarg1, void * jarg2) {
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ResourceGroupName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneImporterPackage_ResourceGroupName_get(void * jarg1) {
  void * jresult ;
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  String result;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  result =  ((arg1)->ResourceGroupName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SceneImporterPackage(void * jarg1) {
  Core::SceneImporterPackage *arg1 = (Core::SceneImporterPackage *) 0 ;
  
  arg1 = (Core::SceneImporterPackage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCENEMANAGER_Name_set(void * jarg1, void * jarg2) {
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCENEMANAGER_Name_get(void * jarg1) {
  void * jresult ;
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  String result;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCENEMANAGER_Type_set(void * jarg1, void * jarg2) {
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCENEMANAGER_Type_get(void * jarg1) {
  void * jresult ;
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  String result;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  result =  ((arg1)->Type);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCENEMANAGER_Ambient_set(void * jarg1, void * jarg2) {
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  ColourValue arg2 ;
  ColourValue *argp2 ;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  argp2 = (ColourValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ColourValue", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Ambient = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCENEMANAGER_Ambient_get(void * jarg1) {
  void * jresult ;
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  ColourValue result;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  result =  ((arg1)->Ambient);
  jresult = new ColourValue((const ColourValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCENEMANAGER_FogColor_set(void * jarg1, void * jarg2) {
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  ColourValue arg2 ;
  ColourValue *argp2 ;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  argp2 = (ColourValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ColourValue", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FogColor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCENEMANAGER_FogColor_get(void * jarg1) {
  void * jresult ;
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  ColourValue result;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  result =  ((arg1)->FogColor);
  jresult = new ColourValue((const ColourValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCENEMANAGER_FogDensity_set(void * jarg1, void * jarg2) {
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FogDensity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCENEMANAGER_FogDensity_get(void * jarg1) {
  void * jresult ;
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  f32 result;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  result =  ((arg1)->FogDensity);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCENEMANAGER_FogEnd_set(void * jarg1, void * jarg2) {
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FogEnd = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCENEMANAGER_FogEnd_get(void * jarg1) {
  void * jresult ;
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  f32 result;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  result =  ((arg1)->FogEnd);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCENEMANAGER_FogStart_set(void * jarg1, void * jarg2) {
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FogStart = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCENEMANAGER_FogStart_get(void * jarg1) {
  void * jresult ;
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  f32 result;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  result =  ((arg1)->FogStart);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCENEMANAGER_FogMode_set(void * jarg1, void * jarg2) {
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  Ogre::FogMode arg2 ;
  Ogre::FogMode *argp2 ;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  argp2 = (Ogre::FogMode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ogre::FogMode", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FogMode = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCENEMANAGER_FogMode_get(void * jarg1) {
  void * jresult ;
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  Ogre::FogMode result;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  result =  ((arg1)->FogMode);
  jresult = new Ogre::FogMode((const Ogre::FogMode &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCENEMANAGER_SkyBoxActive_set(void * jarg1, unsigned int jarg2) {
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SkyBoxActive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SCENEMANAGER_SkyBoxActive_get(void * jarg1) {
  unsigned int jresult ;
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  bool result;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  result = (bool) ((arg1)->SkyBoxActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCENEMANAGER_SkyBoxDistance_set(void * jarg1, void * jarg2) {
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SkyBoxDistance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCENEMANAGER_SkyBoxDistance_get(void * jarg1) {
  void * jresult ;
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  f32 result;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  result =  ((arg1)->SkyBoxDistance);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCENEMANAGER_SkyBoxMaterial_set(void * jarg1, void * jarg2) {
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SkyBoxMaterial = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCENEMANAGER_SkyBoxMaterial_get(void * jarg1) {
  void * jresult ;
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  String result;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  result =  ((arg1)->SkyBoxMaterial);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SCENEMANAGER() {
  void * jresult ;
  Core::SCENEMANAGER *result = 0 ;
  
  result = (Core::SCENEMANAGER *)new Core::SCENEMANAGER();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SCENEMANAGER(void * jarg1) {
  Core::SCENEMANAGER *arg1 = (Core::SCENEMANAGER *) 0 ;
  
  arg1 = (Core::SCENEMANAGER *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMERA_Parent_set(void * jarg1, void * jarg2) {
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CAMERA *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Parent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMERA_Parent_get(void * jarg1) {
  void * jresult ;
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  String result;
  
  arg1 = (Core::CAMERA *)jarg1; 
  result =  ((arg1)->Parent);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMERA_Name_set(void * jarg1, void * jarg2) {
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CAMERA *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMERA_Name_get(void * jarg1) {
  void * jresult ;
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  String result;
  
  arg1 = (Core::CAMERA *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMERA_ClipDistance_set(void * jarg1, void * jarg2) {
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  Vector2 arg2 ;
  Vector2 *argp2 ;
  
  arg1 = (Core::CAMERA *)jarg1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ClipDistance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMERA_ClipDistance_get(void * jarg1) {
  void * jresult ;
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  Vector2 result;
  
  arg1 = (Core::CAMERA *)jarg1; 
  result =  ((arg1)->ClipDistance);
  jresult = new Vector2((const Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMERA_LookAt_set(void * jarg1, void * jarg2) {
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::CAMERA *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->LookAt = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMERA_LookAt_get(void * jarg1) {
  void * jresult ;
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CAMERA *)jarg1; 
  result =  ((arg1)->LookAt);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMERA_Fov_set(void * jarg1, void * jarg2) {
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CAMERA *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Fov = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMERA_Fov_get(void * jarg1) {
  void * jresult ;
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  f32 result;
  
  arg1 = (Core::CAMERA *)jarg1; 
  result =  ((arg1)->Fov);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMERA_Orientation_set(void * jarg1, void * jarg2) {
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  Quaternion arg2 ;
  Quaternion *argp2 ;
  
  arg1 = (Core::CAMERA *)jarg1; 
  argp2 = (Quaternion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Quaternion", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Orientation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMERA_Orientation_get(void * jarg1) {
  void * jresult ;
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  Quaternion result;
  
  arg1 = (Core::CAMERA *)jarg1; 
  result =  ((arg1)->Orientation);
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMERA_Position_set(void * jarg1, void * jarg2) {
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::CAMERA *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMERA_Position_get(void * jarg1) {
  void * jresult ;
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CAMERA *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMERA_Default_set(void * jarg1, unsigned int jarg2) {
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAMERA *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Default = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAMERA_Default_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  bool result;
  
  arg1 = (Core::CAMERA *)jarg1; 
  result = (bool) ((arg1)->Default);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMERA_Type_set(void * jarg1, int jarg2) {
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  Core::E_CAMERA_MODE arg2 ;
  
  arg1 = (Core::CAMERA *)jarg1; 
  arg2 = (Core::E_CAMERA_MODE)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMERA_Type_get(void * jarg1) {
  int jresult ;
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  Core::E_CAMERA_MODE result;
  
  arg1 = (Core::CAMERA *)jarg1; 
  result = (Core::E_CAMERA_MODE) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CAMERA() {
  void * jresult ;
  Core::CAMERA *result = 0 ;
  
  result = (Core::CAMERA *)new Core::CAMERA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CAMERA(void * jarg1) {
  Core::CAMERA *arg1 = (Core::CAMERA *) 0 ;
  
  arg1 = (Core::CAMERA *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VIEWPORT_Parent_set(void * jarg1, void * jarg2) {
  Core::VIEWPORT *arg1 = (Core::VIEWPORT *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::VIEWPORT *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Parent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VIEWPORT_Parent_get(void * jarg1) {
  void * jresult ;
  Core::VIEWPORT *arg1 = (Core::VIEWPORT *) 0 ;
  String result;
  
  arg1 = (Core::VIEWPORT *)jarg1; 
  result =  ((arg1)->Parent);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VIEWPORT_Name_set(void * jarg1, void * jarg2) {
  Core::VIEWPORT *arg1 = (Core::VIEWPORT *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::VIEWPORT *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VIEWPORT_Name_get(void * jarg1) {
  void * jresult ;
  Core::VIEWPORT *arg1 = (Core::VIEWPORT *) 0 ;
  String result;
  
  arg1 = (Core::VIEWPORT *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VIEWPORT_Color_set(void * jarg1, void * jarg2) {
  Core::VIEWPORT *arg1 = (Core::VIEWPORT *) 0 ;
  ColourValue arg2 ;
  ColourValue *argp2 ;
  
  arg1 = (Core::VIEWPORT *)jarg1; 
  argp2 = (ColourValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ColourValue", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Color = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VIEWPORT_Color_get(void * jarg1) {
  void * jresult ;
  Core::VIEWPORT *arg1 = (Core::VIEWPORT *) 0 ;
  ColourValue result;
  
  arg1 = (Core::VIEWPORT *)jarg1; 
  result =  ((arg1)->Color);
  jresult = new ColourValue((const ColourValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VIEWPORT_Compositor0Enabled_set(void * jarg1, unsigned int jarg2) {
  Core::VIEWPORT *arg1 = (Core::VIEWPORT *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::VIEWPORT *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Compositor0Enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VIEWPORT_Compositor0Enabled_get(void * jarg1) {
  unsigned int jresult ;
  Core::VIEWPORT *arg1 = (Core::VIEWPORT *) 0 ;
  bool result;
  
  arg1 = (Core::VIEWPORT *)jarg1; 
  result = (bool) ((arg1)->Compositor0Enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VIEWPORT_Compositor0Name_set(void * jarg1, void * jarg2) {
  Core::VIEWPORT *arg1 = (Core::VIEWPORT *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::VIEWPORT *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Compositor0Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VIEWPORT_Compositor0Name_get(void * jarg1) {
  void * jresult ;
  Core::VIEWPORT *arg1 = (Core::VIEWPORT *) 0 ;
  String result;
  
  arg1 = (Core::VIEWPORT *)jarg1; 
  result =  ((arg1)->Compositor0Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VIEWPORT() {
  void * jresult ;
  Core::VIEWPORT *result = 0 ;
  
  result = (Core::VIEWPORT *)new Core::VIEWPORT();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VIEWPORT(void * jarg1) {
  Core::VIEWPORT *arg1 = (Core::VIEWPORT *) 0 ;
  
  arg1 = (Core::VIEWPORT *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ARCHIVE_Name_set(void * jarg1, void * jarg2) {
  Core::ARCHIVE *arg1 = (Core::ARCHIVE *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::ARCHIVE *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ARCHIVE_Name_get(void * jarg1) {
  void * jresult ;
  Core::ARCHIVE *arg1 = (Core::ARCHIVE *) 0 ;
  String result;
  
  arg1 = (Core::ARCHIVE *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ARCHIVE_FileName_set(void * jarg1, void * jarg2) {
  Core::ARCHIVE *arg1 = (Core::ARCHIVE *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::ARCHIVE *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FileName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ARCHIVE_FileName_get(void * jarg1) {
  void * jresult ;
  Core::ARCHIVE *arg1 = (Core::ARCHIVE *) 0 ;
  String result;
  
  arg1 = (Core::ARCHIVE *)jarg1; 
  result =  ((arg1)->FileName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ARCHIVE() {
  void * jresult ;
  Core::ARCHIVE *result = 0 ;
  
  result = (Core::ARCHIVE *)new Core::ARCHIVE();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ARCHIVE(void * jarg1) {
  Core::ARCHIVE *arg1 = (Core::ARCHIVE *) 0 ;
  
  arg1 = (Core::ARCHIVE *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LIGHT_Parent_set(void * jarg1, void * jarg2) {
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::LIGHT *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Parent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LIGHT_Parent_get(void * jarg1) {
  void * jresult ;
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  String result;
  
  arg1 = (Core::LIGHT *)jarg1; 
  result =  ((arg1)->Parent);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LIGHT_Name_set(void * jarg1, void * jarg2) {
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::LIGHT *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LIGHT_Name_get(void * jarg1) {
  void * jresult ;
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  String result;
  
  arg1 = (Core::LIGHT *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LIGHT_Position_set(void * jarg1, void * jarg2) {
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::LIGHT *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LIGHT_Position_get(void * jarg1) {
  void * jresult ;
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Vector3 result;
  
  arg1 = (Core::LIGHT *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LIGHT_Attenuation_set(void * jarg1, void * jarg2) {
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (Core::LIGHT *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Attenuation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LIGHT_Attenuation_get(void * jarg1) {
  void * jresult ;
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Vector4 result;
  
  arg1 = (Core::LIGHT *)jarg1; 
  result =  ((arg1)->Attenuation);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LIGHT_Diffuse_set(void * jarg1, void * jarg2) {
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::LIGHT *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Diffuse = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LIGHT_Diffuse_get(void * jarg1) {
  void * jresult ;
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Vector3 result;
  
  arg1 = (Core::LIGHT *)jarg1; 
  result =  ((arg1)->Diffuse);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LIGHT_Direction_set(void * jarg1, void * jarg2) {
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::LIGHT *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LIGHT_Direction_get(void * jarg1) {
  void * jresult ;
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Vector3 result;
  
  arg1 = (Core::LIGHT *)jarg1; 
  result =  ((arg1)->Direction);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LIGHT_LightType_set(void * jarg1, int jarg2) {
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Core::LIGHT_TYPE arg2 ;
  
  arg1 = (Core::LIGHT *)jarg1; 
  arg2 = (Core::LIGHT_TYPE)jarg2; 
  if (arg1) (arg1)->LightType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LIGHT_LightType_get(void * jarg1) {
  int jresult ;
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Core::LIGHT_TYPE result;
  
  arg1 = (Core::LIGHT *)jarg1; 
  result = (Core::LIGHT_TYPE) ((arg1)->LightType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LIGHT_Power_set(void * jarg1, void * jarg2) {
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::LIGHT *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Power = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LIGHT_Power_get(void * jarg1) {
  void * jresult ;
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  f32 result;
  
  arg1 = (Core::LIGHT *)jarg1; 
  result =  ((arg1)->Power);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LIGHT_Range_set(void * jarg1, void * jarg2) {
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::LIGHT *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Range = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LIGHT_Range_get(void * jarg1) {
  void * jresult ;
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Vector3 result;
  
  arg1 = (Core::LIGHT *)jarg1; 
  result =  ((arg1)->Range);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LIGHT_Shadows_set(void * jarg1, unsigned int jarg2) {
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::LIGHT *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Shadows = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LIGHT_Shadows_get(void * jarg1) {
  unsigned int jresult ;
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  bool result;
  
  arg1 = (Core::LIGHT *)jarg1; 
  result = (bool) ((arg1)->Shadows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LIGHT_Specular_set(void * jarg1, void * jarg2) {
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::LIGHT *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Specular = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LIGHT_Specular_get(void * jarg1) {
  void * jresult ;
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  Vector3 result;
  
  arg1 = (Core::LIGHT *)jarg1; 
  result =  ((arg1)->Specular);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LIGHT() {
  void * jresult ;
  Core::LIGHT *result = 0 ;
  
  result = (Core::LIGHT *)new Core::LIGHT();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LIGHT(void * jarg1) {
  Core::LIGHT *arg1 = (Core::LIGHT *) 0 ;
  
  arg1 = (Core::LIGHT *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GAMEOBJECT_Parent_set(void * jarg1, void * jarg2) {
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Parent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GAMEOBJECT_Parent_get(void * jarg1) {
  void * jresult ;
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  String result;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  result =  ((arg1)->Parent);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GAMEOBJECT_Name_set(void * jarg1, void * jarg2) {
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GAMEOBJECT_Name_get(void * jarg1) {
  void * jresult ;
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  String result;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GAMEOBJECT_MeshFile_set(void * jarg1, void * jarg2) {
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MeshFile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GAMEOBJECT_MeshFile_get(void * jarg1) {
  void * jresult ;
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  String result;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  result =  ((arg1)->MeshFile);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GAMEOBJECT_Orientation_set(void * jarg1, void * jarg2) {
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  Quaternion arg2 ;
  Quaternion *argp2 ;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  argp2 = (Quaternion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Quaternion", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Orientation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GAMEOBJECT_Orientation_get(void * jarg1) {
  void * jresult ;
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  Quaternion result;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  result =  ((arg1)->Orientation);
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GAMEOBJECT_Position_set(void * jarg1, void * jarg2) {
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GAMEOBJECT_Position_get(void * jarg1) {
  void * jresult ;
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  Vector3 result;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GAMEOBJECT_Scale_set(void * jarg1, void * jarg2) {
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Scale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GAMEOBJECT_Scale_get(void * jarg1) {
  void * jresult ;
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  Vector3 result;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  result =  ((arg1)->Scale);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GAMEOBJECT_Shadows_set(void * jarg1, unsigned int jarg2) {
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Shadows = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GAMEOBJECT_Shadows_get(void * jarg1) {
  unsigned int jresult ;
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  bool result;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  result = (bool) ((arg1)->Shadows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GAMEOBJECT_ObstacleType_set(void * jarg1, void * jarg2) {
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ObstacleType = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GAMEOBJECT_ObstacleType_get(void * jarg1) {
  void * jresult ;
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  String result;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  result =  ((arg1)->ObstacleType);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GAMEOBJECT_PhysicsProfileName_set(void * jarg1, void * jarg2) {
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PhysicsProfileName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GAMEOBJECT_PhysicsProfileName_get(void * jarg1) {
  void * jresult ;
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  String result;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  result =  ((arg1)->PhysicsProfileName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GAMEOBJECT() {
  void * jresult ;
  Core::GAMEOBJECT *result = 0 ;
  
  result = (Core::GAMEOBJECT *)new Core::GAMEOBJECT();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GAMEOBJECT(void * jarg1) {
  Core::GAMEOBJECT *arg1 = (Core::GAMEOBJECT *) 0 ;
  
  arg1 = (Core::GAMEOBJECT *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHYSICS_PROFILE_Name_set(void * jarg1, void * jarg2) {
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PHYSICS_PROFILE_Name_get(void * jarg1) {
  void * jresult ;
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  String result;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHYSICS_PROFILE_Restitution_set(void * jarg1, void * jarg2) {
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Restitution = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PHYSICS_PROFILE_Restitution_get(void * jarg1) {
  void * jresult ;
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  f32 result;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  result =  ((arg1)->Restitution);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHYSICS_PROFILE_Friction_set(void * jarg1, void * jarg2) {
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Friction = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PHYSICS_PROFILE_Friction_get(void * jarg1) {
  void * jresult ;
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  f32 result;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  result =  ((arg1)->Friction);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHYSICS_PROFILE_Mass_set(void * jarg1, void * jarg2) {
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Mass = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PHYSICS_PROFILE_Mass_get(void * jarg1) {
  void * jresult ;
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  f32 result;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  result =  ((arg1)->Mass);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHYSICS_PROFILE_Density_set(void * jarg1, void * jarg2) {
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Density = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PHYSICS_PROFILE_Density_get(void * jarg1) {
  void * jresult ;
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  f32 result;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  result =  ((arg1)->Density);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHYSICS_PROFILE_Shape_set(void * jarg1, int jarg2) {
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  Core::Physics::E_PHYSICS_SHAPE arg2 ;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  arg2 = (Core::Physics::E_PHYSICS_SHAPE)jarg2; 
  if (arg1) (arg1)->Shape = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PHYSICS_PROFILE_Shape_get(void * jarg1) {
  int jresult ;
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  Core::Physics::E_PHYSICS_SHAPE result;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  result = (Core::Physics::E_PHYSICS_SHAPE) ((arg1)->Shape);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHYSICS_PROFILE_BodyType_set(void * jarg1, int jarg2) {
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  Core::Physics::E_BODY_TYPE arg2 ;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  arg2 = (Core::Physics::E_BODY_TYPE)jarg2; 
  if (arg1) (arg1)->BodyType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PHYSICS_PROFILE_BodyType_get(void * jarg1) {
  int jresult ;
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  Core::Physics::E_BODY_TYPE result;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  result = (Core::Physics::E_BODY_TYPE) ((arg1)->BodyType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PHYSICS_PROFILE() {
  void * jresult ;
  Core::PHYSICS_PROFILE *result = 0 ;
  
  result = (Core::PHYSICS_PROFILE *)new Core::PHYSICS_PROFILE();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PHYSICS_PROFILE(void * jarg1) {
  Core::PHYSICS_PROFILE *arg1 = (Core::PHYSICS_PROFILE *) 0 ;
  
  arg1 = (Core::PHYSICS_PROFILE *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_Name_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_Name_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  String result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_TimeDay_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TimeDay = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_TimeDay_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->TimeDay);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_TimeHour_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TimeHour = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_TimeHour_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->TimeHour);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_TimeMinute_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TimeMinute = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_TimeMinute_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->TimeMinute);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_TimeMonth_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TimeMonth = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_TimeMonth_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->TimeMonth);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_TimeSec_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TimeSec = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_TimeSec_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->TimeSec);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_TimeSpeed_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TimeSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_TimeSpeed_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->TimeSpeed);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_TimeYear_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TimeYear = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_TimeYear_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->TimeYear);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_isClouds_set(void * jarg1, unsigned int jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isClouds = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAELUM_isClouds_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result = (bool) ((arg1)->isClouds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_LayerOfClouds_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->LayerOfClouds = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_LayerOfClouds_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->LayerOfClouds);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_FogDenMultiplier_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FogDenMultiplier = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_FogDenMultiplier_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->FogDenMultiplier);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_isManageFog_set(void * jarg1, unsigned int jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isManageFog = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAELUM_isManageFog_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result = (bool) ((arg1)->isManageFog);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_Layer_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Layer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_Layer_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->Layer);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_isSingleLightSource_set(void * jarg1, unsigned int jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSingleLightSource = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAELUM_isSingleLightSource_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result = (bool) ((arg1)->isSingleLightSource);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_isSingleShadowSource_set(void * jarg1, unsigned int jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSingleShadowSource = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAELUM_isSingleShadowSource_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result = (bool) ((arg1)->isSingleShadowSource);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_isManageAmbientLight_set(void * jarg1, unsigned int jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isManageAmbientLight = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAELUM_isManageAmbientLight_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result = (bool) ((arg1)->isManageAmbientLight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_MinAmbientLight_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue arg2 ;
  ColourValue *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (ColourValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ColourValue", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MinAmbientLight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_MinAmbientLight_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->MinAmbientLight);
  jresult = new ColourValue((const ColourValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_MoonAmbientMultipler_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue arg2 ;
  ColourValue *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (ColourValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ColourValue", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MoonAmbientMultipler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_MoonAmbientMultipler_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->MoonAmbientMultipler);
  jresult = new ColourValue((const ColourValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_MoonAttMultipler_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MoonAttMultipler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_MoonAttMultipler_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->MoonAttMultipler);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_MoonAttDistance_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MoonAttDistance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_MoonAttDistance_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->MoonAttDistance);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_MoonAttLinearMultipler_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MoonAttLinearMultipler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_MoonAttLinearMultipler_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->MoonAttLinearMultipler);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_MoonQuadMultipler_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MoonQuadMultipler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_MoonQuadMultipler_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->MoonQuadMultipler);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_isMoonAutoDisable_set(void * jarg1, unsigned int jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMoonAutoDisable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAELUM_isMoonAutoDisable_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result = (bool) ((arg1)->isMoonAutoDisable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_isMoonCastShadow_set(void * jarg1, unsigned int jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMoonCastShadow = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAELUM_isMoonCastShadow_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result = (bool) ((arg1)->isMoonCastShadow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_MoonDiffuseMultipler_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue arg2 ;
  ColourValue *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (ColourValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ColourValue", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MoonDiffuseMultipler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_MoonDiffuseMultipler_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->MoonDiffuseMultipler);
  jresult = new ColourValue((const ColourValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_isMoonEnabled_set(void * jarg1, unsigned int jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMoonEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAELUM_isMoonEnabled_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result = (bool) ((arg1)->isMoonEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_MoonSpecularMultipler_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue arg2 ;
  ColourValue *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (ColourValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ColourValue", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MoonSpecularMultipler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_MoonSpecularMultipler_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->MoonSpecularMultipler);
  jresult = new ColourValue((const ColourValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_ObserverLatitude_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ObserverLatitude = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_ObserverLatitude_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->ObserverLatitude);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_ObserverLongitude_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ObserverLongitude = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_ObserverLongitude_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->ObserverLongitude);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_isStarsEnabled_set(void * jarg1, unsigned int jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isStarsEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAELUM_isStarsEnabled_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result = (bool) ((arg1)->isStarsEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_StarsMag0PixelSize_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->StarsMag0PixelSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_StarsMag0PixelSize_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->StarsMag0PixelSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_StarsMagScale_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->StarsMagScale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_StarsMagScale_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  f32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->StarsMagScale);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_StarsMaxPixelSize_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->StarsMaxPixelSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_StarsMaxPixelSize_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->StarsMaxPixelSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_StarsMinPixelSize_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->StarsMinPixelSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_StarsMinPixelSize_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->StarsMinPixelSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_SunAmbientMultipler_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue arg2 ;
  ColourValue *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (ColourValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ColourValue", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunAmbientMultipler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_SunAmbientMultipler_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->SunAmbientMultipler);
  jresult = new ColourValue((const ColourValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_SunAttMultipler_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunAttMultipler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_SunAttMultipler_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->SunAttMultipler);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_SunDistance_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunDistance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_SunDistance_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->SunDistance);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_SunAttLinearMultipler_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunAttLinearMultipler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_SunAttLinearMultipler_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->SunAttLinearMultipler);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_SunQuadMultipler_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunQuadMultipler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_SunQuadMultipler_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  u32 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->SunQuadMultipler);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_isSunAutoDisable_set(void * jarg1, unsigned int jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSunAutoDisable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAELUM_isSunAutoDisable_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result = (bool) ((arg1)->isSunAutoDisable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_isSunCastShadow_set(void * jarg1, unsigned int jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSunCastShadow = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAELUM_isSunCastShadow_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result = (bool) ((arg1)->isSunCastShadow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_SunColor_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunColor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_SunColor_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->SunColor);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_SunDiffuseMultipler_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue arg2 ;
  ColourValue *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (ColourValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ColourValue", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunDiffuseMultipler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_SunDiffuseMultipler_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->SunDiffuseMultipler);
  jresult = new ColourValue((const ColourValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_isSunEnabled_set(void * jarg1, unsigned int jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSunEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAELUM_isSunEnabled_get(void * jarg1) {
  unsigned int jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  bool result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result = (bool) ((arg1)->isSunEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_SunLightColor_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunLightColor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_SunLightColor_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->SunLightColor);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_SunPosition_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunPosition = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_SunPosition_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  Vector3 result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->SunPosition);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAELUM_SunSpecularMultipler_set(void * jarg1, void * jarg2) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue arg2 ;
  ColourValue *argp2 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  argp2 = (ColourValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ColourValue", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunSpecularMultipler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAELUM_SunSpecularMultipler_get(void * jarg1) {
  void * jresult ;
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  ColourValue result;
  
  arg1 = (Core::CAELUM *)jarg1; 
  result =  ((arg1)->SunSpecularMultipler);
  jresult = new ColourValue((const ColourValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CAELUM() {
  void * jresult ;
  Core::CAELUM *result = 0 ;
  
  result = (Core::CAELUM *)new Core::CAELUM();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CAELUM(void * jarg1) {
  Core::CAELUM *arg1 = (Core::CAELUM *) 0 ;
  
  arg1 = (Core::CAELUM *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_Name_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_Name_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_ConfigFile_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ConfigFile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_ConfigFile_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->ConfigFile);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_isCaelumItegrated_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isCaelumItegrated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_isCaelumItegrated_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->isCaelumItegrated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_CausticsEnd_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->CausticsEnd = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_CausticsEnd_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->CausticsEnd);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_CausticsPower_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->CausticsPower = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_CausticsPower_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->CausticsPower);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_CausticsScale_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->CausticsScale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_CausticsScale_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->CausticsScale);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_isComponentsCaustics_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isComponentsCaustics = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_isComponentsCaustics_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->isComponentsCaustics);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_isComponentsDepth_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isComponentsDepth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_isComponentsDepth_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->isComponentsDepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_isComponentsFoam_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isComponentsFoam = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_isComponentsFoam_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->isComponentsFoam);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_isComponentsSmooth_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isComponentsSmooth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_isComponentsSmooth_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->isComponentsSmooth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_isComponentsSun_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isComponentsSun = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_isComponentsSun_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->isComponentsSun);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_isComponentsUnderwater_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isComponentsUnderwater = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_isComponentsUnderwater_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->isComponentsUnderwater);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_isComponentsGodrays_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isComponentsGodrays = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_isComponentsGodrays_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->isComponentsGodrays);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_isComponentsReflections_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isComponentsReflections = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_isComponentsReflections_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->isComponentsReflections);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_DepthLimit_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->DepthLimit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_DepthLimit_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->DepthLimit);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_FoamMaxDistance_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FoamMaxDistance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_FoamMaxDistance_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->FoamMaxDistance);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_FoamScale_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FoamScale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_FoamScale_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->FoamScale);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_FoamStart_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FoamStart = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_FoamStart_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->FoamStart);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_FoamTransparency_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FoamTransparency = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_FoamTransparency_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->FoamTransparency);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_FullReflectionDistance_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FullReflectionDistance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_FullReflectionDistance_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->FullReflectionDistance);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_GlobalTransparency_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->GlobalTransparency = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_GlobalTransparency_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->GlobalTransparency);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_GodraysExposure_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->GodraysExposure = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_GodraysExposure_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  Vector3 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->GodraysExposure);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_GodraysIntensity_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->GodraysIntensity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_GodraysIntensity_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->GodraysIntensity);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_GodraysIntersections_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->GodraysIntersections = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_GodraysIntersections_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->GodraysIntersections);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_GodraysNumRays_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->GodraysNumRays = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_GodraysNumRays_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->GodraysNumRays);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_GodraysSize_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->GodraysSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_GodraysSize_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->GodraysSize);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_GodraysSpeed_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->GodraysSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_GodraysSpeed_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->GodraysSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_Layers_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Layers = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_Layers_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->Layers);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_ModuleName_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ModuleName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_ModuleName_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->ModuleName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_NoiseModuleName_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->NoiseModuleName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_NoiseModuleName_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->NoiseModuleName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_NormalDistortion_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->NormalDistortion = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_NormalDistortion_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->NormalDistortion);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_PerlinAnimSpeed_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PerlinAnimSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_PerlinAnimSpeed_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->PerlinAnimSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_PerlinFalloff_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PerlinFalloff = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_PerlinFalloff_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->PerlinFalloff);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_PerlinGpuLod_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PerlinGpuLod = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_PerlinGpuLod_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  Vector3 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->PerlinGpuLod);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_PerlinGpuStrength_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PerlinGpuStrength = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_PerlinGpuStrength_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->PerlinGpuStrength);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_PerlinOctaves_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PerlinOctaves = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_PerlinOctaves_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->PerlinOctaves);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_PerlinScale_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PerlinScale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_PerlinScale_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->PerlinScale);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_PerlinTimeMulti_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PerlinTimeMulti = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_PerlinTimeMulti_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->PerlinTimeMulti);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_PgmoduleChoppyStrength_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PgmoduleChoppyStrength = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_PgmoduleChoppyStrength_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->PgmoduleChoppyStrength);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_isPgmoduleChoppyWaves_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPgmoduleChoppyWaves = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_isPgmoduleChoppyWaves_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->isPgmoduleChoppyWaves);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_PgmoduleComplexity_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PgmoduleComplexity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_PgmoduleComplexity_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->PgmoduleComplexity);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_PgmoduleElevation_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PgmoduleElevation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_PgmoduleElevation_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->PgmoduleElevation);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_isPgmoduleForceRecalculateGeometry_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPgmoduleForceRecalculateGeometry = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_isPgmoduleForceRecalculateGeometry_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->isPgmoduleForceRecalculateGeometry);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_isPgmoduleSmooth_set(void * jarg1, unsigned int jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPgmoduleSmooth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HYDRAX_isPgmoduleSmooth_get(void * jarg1) {
  unsigned int jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  bool result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result = (bool) ((arg1)->isPgmoduleSmooth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_PgmoduleStrength_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PgmoduleStrength = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_PgmoduleStrength_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->PgmoduleStrength);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_PlanesError_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PlanesError = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_PlanesError_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->PlanesError);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_Position_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_Position_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  Vector3 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_RttQualityDepth_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->RttQualityDepth = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_RttQualityDepth_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->RttQualityDepth);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_RttQualityDepthAip_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->RttQualityDepthAip = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_RttQualityDepthAip_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->RttQualityDepthAip);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_RttQualityDepthReflection_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->RttQualityDepthReflection = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_RttQualityDepthReflection_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->RttQualityDepthReflection);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_RttQualityGpuNormalMap_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->RttQualityGpuNormalMap = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_RttQualityGpuNormalMap_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->RttQualityGpuNormalMap);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_RttQualityReflection_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->RttQualityReflection = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_RttQualityReflection_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->RttQualityReflection);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_RttQualityRefraction_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->RttQualityRefraction = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_RttQualityRefraction_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->RttQualityRefraction);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_ShaderMode_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ShaderMode = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_ShaderMode_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  u32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->ShaderMode);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_SmoothPower_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SmoothPower = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_SmoothPower_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->SmoothPower);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_SunArea_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunArea = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_SunArea_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->SunArea);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_SunColour_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunColour = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_SunColour_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  Vector3 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->SunColour);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_SunPosition_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunPosition = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_SunPosition_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  Vector3 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->SunPosition);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_SunStrength_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SunStrength = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_SunStrength_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  f32 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->SunStrength);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_TechniqueAdd_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TechniqueAdd = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_TechniqueAdd_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->TechniqueAdd);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_TechniqueRemove_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TechniqueRemove = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_TechniqueRemove_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->TechniqueRemove);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_UpdateScript_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->UpdateScript = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_UpdateScript_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  String result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->UpdateScript);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HYDRAX_WaterColour_set(void * jarg1, void * jarg2) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->WaterColour = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HYDRAX_WaterColour_get(void * jarg1) {
  void * jresult ;
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  Vector3 result;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  result =  ((arg1)->WaterColour);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HYDRAX() {
  void * jresult ;
  Core::HYDRAX *result = 0 ;
  
  result = (Core::HYDRAX *)new Core::HYDRAX();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HYDRAX(void * jarg1) {
  Core::HYDRAX *arg1 = (Core::HYDRAX *) 0 ;
  
  arg1 = (Core::HYDRAX *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BGSOUND_FileName_set(void * jarg1, void * jarg2) {
  Core::BGSOUND *arg1 = (Core::BGSOUND *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::BGSOUND *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FileName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BGSOUND_FileName_get(void * jarg1) {
  void * jresult ;
  Core::BGSOUND *arg1 = (Core::BGSOUND *) 0 ;
  String result;
  
  arg1 = (Core::BGSOUND *)jarg1; 
  result =  ((arg1)->FileName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BGSOUND_Name_set(void * jarg1, void * jarg2) {
  Core::BGSOUND *arg1 = (Core::BGSOUND *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::BGSOUND *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BGSOUND_Name_get(void * jarg1) {
  void * jresult ;
  Core::BGSOUND *arg1 = (Core::BGSOUND *) 0 ;
  String result;
  
  arg1 = (Core::BGSOUND *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BGSOUND_Loop_set(void * jarg1, unsigned int jarg2) {
  Core::BGSOUND *arg1 = (Core::BGSOUND *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::BGSOUND *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Loop = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BGSOUND_Loop_get(void * jarg1) {
  unsigned int jresult ;
  Core::BGSOUND *arg1 = (Core::BGSOUND *) 0 ;
  bool result;
  
  arg1 = (Core::BGSOUND *)jarg1; 
  result = (bool) ((arg1)->Loop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BGSOUND_Stream_set(void * jarg1, unsigned int jarg2) {
  Core::BGSOUND *arg1 = (Core::BGSOUND *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::BGSOUND *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Stream = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BGSOUND_Stream_get(void * jarg1) {
  unsigned int jresult ;
  Core::BGSOUND *arg1 = (Core::BGSOUND *) 0 ;
  bool result;
  
  arg1 = (Core::BGSOUND *)jarg1; 
  result = (bool) ((arg1)->Stream);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BGSOUND_Gain_set(void * jarg1, void * jarg2) {
  Core::BGSOUND *arg1 = (Core::BGSOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::BGSOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Gain = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BGSOUND_Gain_get(void * jarg1) {
  void * jresult ;
  Core::BGSOUND *arg1 = (Core::BGSOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::BGSOUND *)jarg1; 
  result =  ((arg1)->Gain);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BGSOUND() {
  void * jresult ;
  Core::BGSOUND *result = 0 ;
  
  result = (Core::BGSOUND *)new Core::BGSOUND();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BGSOUND(void * jarg1) {
  Core::BGSOUND *arg1 = (Core::BGSOUND *) 0 ;
  
  arg1 = (Core::BGSOUND *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_FileName_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FileName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_FileName_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  String result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->FileName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_Name_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_Name_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  String result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_Loop_set(void * jarg1, unsigned int jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Loop = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SOUND_Loop_get(void * jarg1) {
  unsigned int jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  bool result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result = (bool) ((arg1)->Loop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_Stream_set(void * jarg1, unsigned int jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Stream = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SOUND_Stream_get(void * jarg1) {
  unsigned int jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  bool result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result = (bool) ((arg1)->Stream);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_RelativeToListener_set(void * jarg1, unsigned int jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->RelativeToListener = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SOUND_RelativeToListener_get(void * jarg1) {
  unsigned int jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  bool result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result = (bool) ((arg1)->RelativeToListener);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_Priority_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Priority = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_Priority_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  u32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->Priority);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_Gain_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Gain = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_Gain_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->Gain);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_MaxGain_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaxGain = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_MaxGain_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->MaxGain);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_MinGain_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MinGain = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_MinGain_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->MinGain);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_FadeIn_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FadeIn = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_FadeIn_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->FadeIn);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_FadeOut_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->FadeOut = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_FadeOut_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->FadeOut);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_Pitch_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Pitch = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_Pitch_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->Pitch);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_MaxDistance_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaxDistance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_MaxDistance_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->MaxDistance);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_RollOffFactor_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->RollOffFactor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_RollOffFactor_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->RollOffFactor);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_RefDistance_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->RefDistance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_RefDistance_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->RefDistance);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_OuterConeGain_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->OuterConeGain = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_OuterConeGain_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->OuterConeGain);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_InnerConeAngle_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->InnerConeAngle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_InnerConeAngle_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->InnerConeAngle);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_OuterConeAngle_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->OuterConeAngle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_OuterConeAngle_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->OuterConeAngle);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_SecondOffset_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SecondOffset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_SecondOffset_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  f32 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->SecondOffset);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_Velocity_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Velocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_Velocity_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  Vector3 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->Velocity);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_Position_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_Position_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  Vector3 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SOUND_Direction_set(void * jarg1, void * jarg2) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SOUND_Direction_get(void * jarg1) {
  void * jresult ;
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  Vector3 result;
  
  arg1 = (Core::SOUND *)jarg1; 
  result =  ((arg1)->Direction);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SOUND() {
  void * jresult ;
  Core::SOUND *result = 0 ;
  
  result = (Core::SOUND *)new Core::SOUND();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SOUND(void * jarg1) {
  Core::SOUND *arg1 = (Core::SOUND *) 0 ;
  
  arg1 = (Core::SOUND *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TERRAIN_TYPE_TerrainType_set(void * jarg1, int jarg2) {
  Core::TERRAIN_TYPE *arg1 = (Core::TERRAIN_TYPE *) 0 ;
  Core::TERRAIN_TYPE::E_TERRAIN_TYPE arg2 ;
  
  arg1 = (Core::TERRAIN_TYPE *)jarg1; 
  arg2 = (Core::TERRAIN_TYPE::E_TERRAIN_TYPE)jarg2; 
  if (arg1) (arg1)->TerrainType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TERRAIN_TYPE_TerrainType_get(void * jarg1) {
  int jresult ;
  Core::TERRAIN_TYPE *arg1 = (Core::TERRAIN_TYPE *) 0 ;
  Core::TERRAIN_TYPE::E_TERRAIN_TYPE result;
  
  arg1 = (Core::TERRAIN_TYPE *)jarg1; 
  result = (Core::TERRAIN_TYPE::E_TERRAIN_TYPE) ((arg1)->TerrainType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TERRAIN_TYPE() {
  void * jresult ;
  Core::TERRAIN_TYPE *result = 0 ;
  
  result = (Core::TERRAIN_TYPE *)new Core::TERRAIN_TYPE();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TERRAIN_TYPE(void * jarg1) {
  Core::TERRAIN_TYPE *arg1 = (Core::TERRAIN_TYPE *) 0 ;
  
  arg1 = (Core::TERRAIN_TYPE *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_Name_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_Name_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_HeightmapImage_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->HeightmapImage = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_HeightmapImage_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->HeightmapImage);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_WorldTexture_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->WorldTexture = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_WorldTexture_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->WorldTexture);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_DetailTexture_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->DetailTexture = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_DetailTexture_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->DetailTexture);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_DetailTile_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  s32 arg2 ;
  s32 *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (s32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null s32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->DetailTile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_DetailTile_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  s32 result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->DetailTile);
  jresult = new s32((const s32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_HeightmapRawSize_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->HeightmapRawSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_HeightmapRawSize_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  u32 result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->HeightmapRawSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_HeightmapRawBpp_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->HeightmapRawBpp = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_HeightmapRawBpp_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->HeightmapRawBpp);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_PageSize_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  s32 arg2 ;
  s32 *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (s32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null s32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PageSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_PageSize_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  s32 result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->PageSize);
  jresult = new s32((const s32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_TileSize_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TileSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_TileSize_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  u32 result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->TileSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_MaxPixelError_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaxPixelError = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_MaxPixelError_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  u32 result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->MaxPixelError);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_PageWorldX_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PageWorldX = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_PageWorldX_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  f32 result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->PageWorldX);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_PageWorldZ_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PageWorldZ = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_PageWorldZ_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  f32 result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->PageWorldZ);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_MaxHeight_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaxHeight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_MaxHeight_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  f32 result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->MaxHeight);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_MaxMipMapLevel_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  s32 arg2 ;
  s32 *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (s32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null s32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaxMipMapLevel = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_MaxMipMapLevel_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  s32 result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->MaxMipMapLevel);
  jresult = new s32((const s32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_VertexNormals_set(void * jarg1, unsigned int jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->VertexNormals = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HEIGHT_TERRAIN_VertexNormals_get(void * jarg1) {
  unsigned int jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  bool result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result = (bool) ((arg1)->VertexNormals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_VertexColors_set(void * jarg1, unsigned int jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->VertexColors = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HEIGHT_TERRAIN_VertexColors_get(void * jarg1) {
  unsigned int jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  bool result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result = (bool) ((arg1)->VertexColors);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_UseTriStrips_set(void * jarg1, unsigned int jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UseTriStrips = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HEIGHT_TERRAIN_UseTriStrips_get(void * jarg1) {
  unsigned int jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  bool result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result = (bool) ((arg1)->UseTriStrips);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_VertexProgramMorph_set(void * jarg1, unsigned int jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->VertexProgramMorph = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HEIGHT_TERRAIN_VertexProgramMorph_get(void * jarg1) {
  unsigned int jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  bool result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result = (bool) ((arg1)->VertexProgramMorph);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_LODMorphStart_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->LODMorphStart = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_LODMorphStart_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  f32 result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->LODMorphStart);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_MorphLODFactorParamName_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MorphLODFactorParamName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_MorphLODFactorParamName_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->MorphLODFactorParamName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_MorphLODFactorParamIndex_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MorphLODFactorParamIndex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_MorphLODFactorParamIndex_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  u32 result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->MorphLODFactorParamIndex);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_CustomMaterialName_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->CustomMaterialName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_CustomMaterialName_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  String result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->CustomMaterialName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEIGHT_TERRAIN_Splatting_set(void * jarg1, void * jarg2) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  Vector< String > arg2 ;
  Vector< String > *argp2 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  argp2 = (Vector< String > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector< String >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Splatting = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_Splatting_get(void * jarg1) {
  void * jresult ;
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  Vector< String > result;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  result =  ((arg1)->Splatting);
  jresult = new Vector< String >((const Vector< String > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HEIGHT_TERRAIN() {
  void * jresult ;
  Core::HEIGHT_TERRAIN *result = 0 ;
  
  result = (Core::HEIGHT_TERRAIN *)new Core::HEIGHT_TERRAIN();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HEIGHT_TERRAIN(void * jarg1) {
  Core::HEIGHT_TERRAIN *arg1 = (Core::HEIGHT_TERRAIN *) 0 ;
  
  arg1 = (Core::HEIGHT_TERRAIN *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TERRAIN_LAYER_Diffuse_set(void * jarg1, void * jarg2) {
  Core::TERRAIN_LAYER *arg1 = (Core::TERRAIN_LAYER *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::TERRAIN_LAYER *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Diffuse = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TERRAIN_LAYER_Diffuse_get(void * jarg1) {
  void * jresult ;
  Core::TERRAIN_LAYER *arg1 = (Core::TERRAIN_LAYER *) 0 ;
  String result;
  
  arg1 = (Core::TERRAIN_LAYER *)jarg1; 
  result =  ((arg1)->Diffuse);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TERRAIN_LAYER_Normal_set(void * jarg1, void * jarg2) {
  Core::TERRAIN_LAYER *arg1 = (Core::TERRAIN_LAYER *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::TERRAIN_LAYER *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Normal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TERRAIN_LAYER_Normal_get(void * jarg1) {
  void * jresult ;
  Core::TERRAIN_LAYER *arg1 = (Core::TERRAIN_LAYER *) 0 ;
  String result;
  
  arg1 = (Core::TERRAIN_LAYER *)jarg1; 
  result =  ((arg1)->Normal);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TERRAIN_LAYER_WorldSize_set(void * jarg1, void * jarg2) {
  Core::TERRAIN_LAYER *arg1 = (Core::TERRAIN_LAYER *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::TERRAIN_LAYER *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->WorldSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TERRAIN_LAYER_WorldSize_get(void * jarg1) {
  void * jresult ;
  Core::TERRAIN_LAYER *arg1 = (Core::TERRAIN_LAYER *) 0 ;
  u32 result;
  
  arg1 = (Core::TERRAIN_LAYER *)jarg1; 
  result =  ((arg1)->WorldSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TERRAIN_LAYER() {
  void * jresult ;
  Core::TERRAIN_LAYER *result = 0 ;
  
  result = (Core::TERRAIN_LAYER *)new Core::TERRAIN_LAYER();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TERRAIN_LAYER(void * jarg1) {
  Core::TERRAIN_LAYER *arg1 = (Core::TERRAIN_LAYER *) 0 ;
  
  arg1 = (Core::TERRAIN_LAYER *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_Name_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_Name_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  String result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_TerrainFile_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TerrainFile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_TerrainFile_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  String result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->TerrainFile);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_isColorMap_set(void * jarg1, unsigned int jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isColorMap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PAGED_TERRAIN_isColorMap_get(void * jarg1) {
  unsigned int jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  bool result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result = (bool) ((arg1)->isColorMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_TextureSize_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TextureSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_TextureSize_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->TextureSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_ColorMapTextureSize_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ColorMapTextureSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_ColorMapTextureSize_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->ColorMapTextureSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_LightMapTextureSize_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->LightMapTextureSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_LightMapTextureSize_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->LightMapTextureSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_MapSize_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u16 arg2 ;
  u16 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (u16 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u16", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MapSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_MapSize_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u16 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->MapSize);
  jresult = new u16((const u16 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_MinX_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  s32 arg2 ;
  s32 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (s32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null s32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MinX = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_MinX_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  s32 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->MinX);
  jresult = new s32((const s32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_MaxX_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  s32 arg2 ;
  s32 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (s32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null s32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaxX = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_MaxX_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  s32 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->MaxX);
  jresult = new s32((const s32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_MinY_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  s32 arg2 ;
  s32 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (s32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null s32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MinY = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_MinY_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  s32 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->MinY);
  jresult = new s32((const s32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_MaxY_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  s32 arg2 ;
  s32 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (s32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null s32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaxY = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_MaxY_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  s32 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->MaxY);
  jresult = new s32((const s32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_WorldSize_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->WorldSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_WorldSize_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->WorldSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_PageDesityMapSize_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PageDesityMapSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_PageDesityMapSize_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->PageDesityMapSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_DetailDistance_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->DetailDistance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_DetailDistance_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->DetailDistance);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_PageSize_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PageSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_PageSize_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->PageSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_MaxPixelError_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaxPixelError = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_MaxPixelError_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u32 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->MaxPixelError);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_MaxBatchSize_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u16 arg2 ;
  u16 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (u16 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u16", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaxBatchSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_MaxBatchSize_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u16 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->MaxBatchSize);
  jresult = new u16((const u16 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_MinBatchSize_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u16 arg2 ;
  u16 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (u16 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u16", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MinBatchSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_MinBatchSize_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  u16 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->MinBatchSize);
  jresult = new u16((const u16 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_ResourceGroup_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ResourceGroup = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_ResourceGroup_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  String result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->ResourceGroup);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_Position_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_Position_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  Vector3 result;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PAGED_TERRAIN_Layers_set(void * jarg1, void * jarg2) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  Vector< Core::TERRAIN_LAYER > *arg2 = (Vector< Core::TERRAIN_LAYER > *) 0 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  arg2 = (Vector< Core::TERRAIN_LAYER > *)jarg2; 
  if (arg1) (arg1)->Layers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PAGED_TERRAIN_Layers_get(void * jarg1) {
  void * jresult ;
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  Vector< Core::TERRAIN_LAYER > *result = 0 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  result = (Vector< Core::TERRAIN_LAYER > *)& ((arg1)->Layers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PAGED_TERRAIN() {
  void * jresult ;
  Core::PAGED_TERRAIN *result = 0 ;
  
  result = (Core::PAGED_TERRAIN *)new Core::PAGED_TERRAIN();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PAGED_TERRAIN(void * jarg1) {
  Core::PAGED_TERRAIN *arg1 = (Core::PAGED_TERRAIN *) 0 ;
  
  arg1 = (Core::PAGED_TERRAIN *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLANE_TERRAIN_isUsed_set(void * jarg1, unsigned int jarg2) {
  Core::PLANE_TERRAIN *arg1 = (Core::PLANE_TERRAIN *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::PLANE_TERRAIN *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isUsed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PLANE_TERRAIN_isUsed_get(void * jarg1) {
  unsigned int jresult ;
  Core::PLANE_TERRAIN *arg1 = (Core::PLANE_TERRAIN *) 0 ;
  bool result;
  
  arg1 = (Core::PLANE_TERRAIN *)jarg1; 
  result = (bool) ((arg1)->isUsed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLANE_TERRAIN_Normal_set(void * jarg1, void * jarg2) {
  Core::PLANE_TERRAIN *arg1 = (Core::PLANE_TERRAIN *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::PLANE_TERRAIN *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Normal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLANE_TERRAIN_Normal_get(void * jarg1) {
  void * jresult ;
  Core::PLANE_TERRAIN *arg1 = (Core::PLANE_TERRAIN *) 0 ;
  Vector3 result;
  
  arg1 = (Core::PLANE_TERRAIN *)jarg1; 
  result =  ((arg1)->Normal);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PLANE_TERRAIN() {
  void * jresult ;
  Core::PLANE_TERRAIN *result = 0 ;
  
  result = (Core::PLANE_TERRAIN *)new Core::PLANE_TERRAIN();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PLANE_TERRAIN(void * jarg1) {
  Core::PLANE_TERRAIN *arg1 = (Core::PLANE_TERRAIN *) 0 ;
  
  arg1 = (Core::PLANE_TERRAIN *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WATER_WaterVisible_set(void * jarg1, unsigned int jarg2) {
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::WATER *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WaterVisible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WATER_WaterVisible_get(void * jarg1) {
  unsigned int jresult ;
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  bool result;
  
  arg1 = (Core::WATER *)jarg1; 
  result = (bool) ((arg1)->WaterVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WATER_WaterWidthX_set(void * jarg1, void * jarg2) {
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::WATER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->WaterWidthX = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WATER_WaterWidthX_get(void * jarg1) {
  void * jresult ;
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  f32 result;
  
  arg1 = (Core::WATER *)jarg1; 
  result =  ((arg1)->WaterWidthX);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WATER_WaterWidthZ_set(void * jarg1, void * jarg2) {
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::WATER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->WaterWidthZ = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WATER_WaterWidthZ_get(void * jarg1) {
  void * jresult ;
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  f32 result;
  
  arg1 = (Core::WATER *)jarg1; 
  result =  ((arg1)->WaterWidthZ);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WATER_WaterXPos_set(void * jarg1, void * jarg2) {
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::WATER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->WaterXPos = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WATER_WaterXPos_get(void * jarg1) {
  void * jresult ;
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  f32 result;
  
  arg1 = (Core::WATER *)jarg1; 
  result =  ((arg1)->WaterXPos);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WATER_WaterYPos_set(void * jarg1, void * jarg2) {
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::WATER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->WaterYPos = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WATER_WaterYPos_get(void * jarg1) {
  void * jresult ;
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  f32 result;
  
  arg1 = (Core::WATER *)jarg1; 
  result =  ((arg1)->WaterYPos);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WATER_WaterZPos_set(void * jarg1, void * jarg2) {
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::WATER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->WaterZPos = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WATER_WaterZPos_get(void * jarg1) {
  void * jresult ;
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  f32 result;
  
  arg1 = (Core::WATER *)jarg1; 
  result =  ((arg1)->WaterZPos);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WATER_WaterMaterial_set(void * jarg1, void * jarg2) {
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::WATER *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->WaterMaterial = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WATER_WaterMaterial_get(void * jarg1) {
  void * jresult ;
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  String result;
  
  arg1 = (Core::WATER *)jarg1; 
  result =  ((arg1)->WaterMaterial);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WATER() {
  void * jresult ;
  Core::WATER *result = 0 ;
  
  result = (Core::WATER *)new Core::WATER();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WATER(void * jarg1) {
  Core::WATER *arg1 = (Core::WATER *) 0 ;
  
  arg1 = (Core::WATER *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PROJECTILES_Name_set(void * jarg1, void * jarg2) {
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PROJECTILES_Name_get(void * jarg1) {
  void * jresult ;
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  String result;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PROJECTILES_Desc_set(void * jarg1, void * jarg2) {
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Desc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PROJECTILES_Desc_get(void * jarg1) {
  void * jresult ;
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  String result;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  result =  ((arg1)->Desc);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PROJECTILES_Damage_set(void * jarg1, void * jarg2) {
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Damage = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PROJECTILES_Damage_get(void * jarg1) {
  void * jresult ;
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  f32 result;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  result =  ((arg1)->Damage);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PROJECTILES_Penetrate_set(void * jarg1, unsigned int jarg2) {
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Penetrate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PROJECTILES_Penetrate_get(void * jarg1) {
  unsigned int jresult ;
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  bool result;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  result = (bool) ((arg1)->Penetrate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PROJECTILES_Speed_set(void * jarg1, void * jarg2) {
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Speed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PROJECTILES_Speed_get(void * jarg1) {
  void * jresult ;
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  f32 result;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  result =  ((arg1)->Speed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PROJECTILES_MeshFileName_set(void * jarg1, void * jarg2) {
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MeshFileName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PROJECTILES_MeshFileName_get(void * jarg1) {
  void * jresult ;
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  String result;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  result =  ((arg1)->MeshFileName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PROJECTILES_BillboardBullet_set(void * jarg1, void * jarg2) {
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->BillboardBullet = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PROJECTILES_BillboardBullet_get(void * jarg1) {
  void * jresult ;
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  String result;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  result =  ((arg1)->BillboardBullet);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PROJECTILES_BillboardFlash_set(void * jarg1, void * jarg2) {
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->BillboardFlash = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PROJECTILES_BillboardFlash_get(void * jarg1) {
  void * jresult ;
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  String result;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  result =  ((arg1)->BillboardFlash);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PROJECTILES() {
  void * jresult ;
  Core::PROJECTILES *result = 0 ;
  
  result = (Core::PROJECTILES *)new Core::PROJECTILES();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PROJECTILES(void * jarg1) {
  Core::PROJECTILES *arg1 = (Core::PROJECTILES *) 0 ;
  
  arg1 = (Core::PROJECTILES *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAGAZINE_Name_set(void * jarg1, void * jarg2) {
  Core::MAGAZINE *arg1 = (Core::MAGAZINE *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::MAGAZINE *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAGAZINE_Name_get(void * jarg1) {
  void * jresult ;
  Core::MAGAZINE *arg1 = (Core::MAGAZINE *) 0 ;
  String result;
  
  arg1 = (Core::MAGAZINE *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAGAZINE_Desc_set(void * jarg1, void * jarg2) {
  Core::MAGAZINE *arg1 = (Core::MAGAZINE *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::MAGAZINE *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Desc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAGAZINE_Desc_get(void * jarg1) {
  void * jresult ;
  Core::MAGAZINE *arg1 = (Core::MAGAZINE *) 0 ;
  String result;
  
  arg1 = (Core::MAGAZINE *)jarg1; 
  result =  ((arg1)->Desc);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAGAZINE_Projectile_set(void * jarg1, void * jarg2) {
  Core::MAGAZINE *arg1 = (Core::MAGAZINE *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::MAGAZINE *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Projectile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAGAZINE_Projectile_get(void * jarg1) {
  void * jresult ;
  Core::MAGAZINE *arg1 = (Core::MAGAZINE *) 0 ;
  String result;
  
  arg1 = (Core::MAGAZINE *)jarg1; 
  result =  ((arg1)->Projectile);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAGAZINE_Capacity_set(void * jarg1, void * jarg2) {
  Core::MAGAZINE *arg1 = (Core::MAGAZINE *) 0 ;
  s32 arg2 ;
  s32 *argp2 ;
  
  arg1 = (Core::MAGAZINE *)jarg1; 
  argp2 = (s32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null s32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAGAZINE_Capacity_get(void * jarg1) {
  void * jresult ;
  Core::MAGAZINE *arg1 = (Core::MAGAZINE *) 0 ;
  s32 result;
  
  arg1 = (Core::MAGAZINE *)jarg1; 
  result =  ((arg1)->Capacity);
  jresult = new s32((const s32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MAGAZINE_MeshFileName_set(void * jarg1, void * jarg2) {
  Core::MAGAZINE *arg1 = (Core::MAGAZINE *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::MAGAZINE *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MeshFileName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MAGAZINE_MeshFileName_get(void * jarg1) {
  void * jresult ;
  Core::MAGAZINE *arg1 = (Core::MAGAZINE *) 0 ;
  String result;
  
  arg1 = (Core::MAGAZINE *)jarg1; 
  result =  ((arg1)->MeshFileName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MAGAZINE() {
  void * jresult ;
  Core::MAGAZINE *result = 0 ;
  
  result = (Core::MAGAZINE *)new Core::MAGAZINE();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MAGAZINE(void * jarg1) {
  Core::MAGAZINE *arg1 = (Core::MAGAZINE *) 0 ;
  
  arg1 = (Core::MAGAZINE *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_Name_set(void * jarg1, void * jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WEAPON_Name_get(void * jarg1) {
  void * jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  String result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_Desc_set(void * jarg1, void * jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Desc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WEAPON_Desc_get(void * jarg1) {
  void * jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  String result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result =  ((arg1)->Desc);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_isSemi_set(void * jarg1, unsigned int jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSemi = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WEAPON_isSemi_get(void * jarg1) {
  unsigned int jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  bool result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result = (bool) ((arg1)->isSemi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_isBurst_set(void * jarg1, unsigned int jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isBurst = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WEAPON_isBurst_get(void * jarg1) {
  unsigned int jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  bool result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result = (bool) ((arg1)->isBurst);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_isAuto_set(void * jarg1, unsigned int jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isAuto = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WEAPON_isAuto_get(void * jarg1) {
  unsigned int jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  bool result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result = (bool) ((arg1)->isAuto);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_ROF_set(void * jarg1, void * jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ROF = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WEAPON_ROF_get(void * jarg1) {
  void * jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  u32 result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result =  ((arg1)->ROF);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_MeshName_set(void * jarg1, void * jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MeshName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WEAPON_MeshName_get(void * jarg1) {
  void * jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  String result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result =  ((arg1)->MeshName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_OverlayName_set(void * jarg1, void * jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->OverlayName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WEAPON_OverlayName_get(void * jarg1) {
  void * jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  String result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result =  ((arg1)->OverlayName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_Power_set(void * jarg1, void * jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Power = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WEAPON_Power_get(void * jarg1) {
  void * jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  f32 result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result =  ((arg1)->Power);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_Accuracy_set(void * jarg1, void * jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Accuracy = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WEAPON_Accuracy_get(void * jarg1) {
  void * jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  f32 result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result =  ((arg1)->Accuracy);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_MagType_set(void * jarg1, void * jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MagType = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WEAPON_MagType_get(void * jarg1) {
  void * jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  String result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result =  ((arg1)->MagType);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_Scale_set(void * jarg1, void * jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Scale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WEAPON_Scale_get(void * jarg1) {
  void * jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  Vector3 result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result =  ((arg1)->Scale);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WEAPON_Range_set(void * jarg1, void * jarg2) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Range = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WEAPON_Range_get(void * jarg1) {
  void * jresult ;
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  f32 result;
  
  arg1 = (Core::WEAPON *)jarg1; 
  result =  ((arg1)->Range);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WEAPON() {
  void * jresult ;
  Core::WEAPON *result = 0 ;
  
  result = (Core::WEAPON *)new Core::WEAPON();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WEAPON(void * jarg1) {
  Core::WEAPON *arg1 = (Core::WEAPON *) 0 ;
  
  arg1 = (Core::WEAPON *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MELEE_Name_set(void * jarg1, void * jarg2) {
  Core::MELEE *arg1 = (Core::MELEE *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::MELEE *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MELEE_Name_get(void * jarg1) {
  void * jresult ;
  Core::MELEE *arg1 = (Core::MELEE *) 0 ;
  String result;
  
  arg1 = (Core::MELEE *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MELEE_MeshName_set(void * jarg1, void * jarg2) {
  Core::MELEE *arg1 = (Core::MELEE *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::MELEE *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MeshName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MELEE_MeshName_get(void * jarg1) {
  void * jresult ;
  Core::MELEE *arg1 = (Core::MELEE *) 0 ;
  String result;
  
  arg1 = (Core::MELEE *)jarg1; 
  result =  ((arg1)->MeshName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MELEE_Desc_set(void * jarg1, void * jarg2) {
  Core::MELEE *arg1 = (Core::MELEE *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::MELEE *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Desc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MELEE_Desc_get(void * jarg1) {
  void * jresult ;
  Core::MELEE *arg1 = (Core::MELEE *) 0 ;
  String result;
  
  arg1 = (Core::MELEE *)jarg1; 
  result =  ((arg1)->Desc);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MELEE_Power_set(void * jarg1, void * jarg2) {
  Core::MELEE *arg1 = (Core::MELEE *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::MELEE *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Power = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MELEE_Power_get(void * jarg1) {
  void * jresult ;
  Core::MELEE *arg1 = (Core::MELEE *) 0 ;
  f32 result;
  
  arg1 = (Core::MELEE *)jarg1; 
  result =  ((arg1)->Power);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MELEE_Range_set(void * jarg1, void * jarg2) {
  Core::MELEE *arg1 = (Core::MELEE *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::MELEE *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Range = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MELEE_Range_get(void * jarg1) {
  void * jresult ;
  Core::MELEE *arg1 = (Core::MELEE *) 0 ;
  f32 result;
  
  arg1 = (Core::MELEE *)jarg1; 
  result =  ((arg1)->Range);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MELEE() {
  void * jresult ;
  Core::MELEE *result = 0 ;
  
  result = (Core::MELEE *)new Core::MELEE();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MELEE(void * jarg1) {
  Core::MELEE *arg1 = (Core::MELEE *) 0 ;
  
  arg1 = (Core::MELEE *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_SUBSET_Position_set(void * jarg1, void * jarg2) {
  Core::GEO_SET_SUBSET *arg1 = (Core::GEO_SET_SUBSET *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::GEO_SET_SUBSET *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_SUBSET_Position_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET_SUBSET *arg1 = (Core::GEO_SET_SUBSET *) 0 ;
  Vector3 result;
  
  arg1 = (Core::GEO_SET_SUBSET *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_SUBSET_Yaw_set(void * jarg1, void * jarg2) {
  Core::GEO_SET_SUBSET *arg1 = (Core::GEO_SET_SUBSET *) 0 ;
  Radian arg2 ;
  Radian *argp2 ;
  
  arg1 = (Core::GEO_SET_SUBSET *)jarg1; 
  argp2 = (Radian *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Radian", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Yaw = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_SUBSET_Yaw_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET_SUBSET *arg1 = (Core::GEO_SET_SUBSET *) 0 ;
  Radian result;
  
  arg1 = (Core::GEO_SET_SUBSET *)jarg1; 
  result =  ((arg1)->Yaw);
  jresult = new Radian((const Radian &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_SUBSET_Scale_set(void * jarg1, void * jarg2) {
  Core::GEO_SET_SUBSET *arg1 = (Core::GEO_SET_SUBSET *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::GEO_SET_SUBSET *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Scale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_SUBSET_Scale_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET_SUBSET *arg1 = (Core::GEO_SET_SUBSET *) 0 ;
  f32 result;
  
  arg1 = (Core::GEO_SET_SUBSET *)jarg1; 
  result =  ((arg1)->Scale);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_SUBSET_Data_set(void * jarg1, void * jarg2) {
  Core::GEO_SET_SUBSET *arg1 = (Core::GEO_SET_SUBSET *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Core::GEO_SET_SUBSET *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_SUBSET_Data_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET_SUBSET *arg1 = (Core::GEO_SET_SUBSET *) 0 ;
  void *result = 0 ;
  
  arg1 = (Core::GEO_SET_SUBSET *)jarg1; 
  result = (void *) ((arg1)->Data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GEO_SET_SUBSET__SWIG_0() {
  void * jresult ;
  Core::GEO_SET_SUBSET *result = 0 ;
  
  result = (Core::GEO_SET_SUBSET *)new Core::GEO_SET_SUBSET();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GEO_SET_SUBSET__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Radian *arg2 = 0 ;
  f32 *arg3 = 0 ;
  void *arg4 = (void *) 0 ;
  Core::GEO_SET_SUBSET *result = 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Radian const & type is null", 0);
    return 0;
  } 
  arg3 = (f32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  arg4 = (void *)jarg4; 
  result = (Core::GEO_SET_SUBSET *)new Core::GEO_SET_SUBSET((Vector3 const &)*arg1,(Radian const &)*arg2,(f32 const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GEO_SET_SUBSET__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Radian *arg2 = 0 ;
  f32 *arg3 = 0 ;
  Core::GEO_SET_SUBSET *result = 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Radian const & type is null", 0);
    return 0;
  } 
  arg3 = (f32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "f32 const & type is null", 0);
    return 0;
  } 
  result = (Core::GEO_SET_SUBSET *)new Core::GEO_SET_SUBSET((Vector3 const &)*arg1,(Radian const &)*arg2,(f32 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GEO_SET_SUBSET(void * jarg1) {
  Core::GEO_SET_SUBSET *arg1 = (Core::GEO_SET_SUBSET *) 0 ;
  
  arg1 = (Core::GEO_SET_SUBSET *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_BatchMax_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->BatchMax = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_BatchMax_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->BatchMax);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_BatchStart_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->BatchStart = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_BatchStart_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->BatchStart);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_ImposterMax_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ImposterMax = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_ImposterMax_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->ImposterMax);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_ImposterStart_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ImposterStart = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_ImposterStart_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->ImposterStart);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_PageSize_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PageSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_PageSize_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->PageSize);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_HeightMin_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->HeightMin = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_HeightMin_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->HeightMin);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_WidthMin_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->WidthMin = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_WidthMin_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->WidthMin);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_HeightMax_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->HeightMax = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_HeightMax_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->HeightMax);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_WidthMax_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->WidthMax = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_WidthMax_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  f32 result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->WidthMax);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_isInfinte_set(void * jarg1, unsigned int jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isInfinte = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GEO_SET_isInfinte_get(void * jarg1) {
  unsigned int jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  bool result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result = (bool) ((arg1)->isInfinte);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_Entity_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  Entity *arg2 = (Entity *) 0 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  arg2 = (Entity *)jarg2; 
  if (arg1) (arg1)->Entity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_Entity_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  Entity *result = 0 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result = (Entity *) ((arg1)->Entity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_MeshName_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MeshName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_MeshName_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  String result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->MeshName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_MaterialName_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaterialName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_MaterialName_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  String result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->MaterialName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_DensityMap_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->DensityMap = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_DensityMap_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  String result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->DensityMap);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_PhysicsProfile_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PhysicsProfile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_PhysicsProfile_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  String result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result =  ((arg1)->PhysicsProfile);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_GeoType_set(void * jarg1, int jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  enum Core::GEO_SET::GEO_LOAD_TYPE arg2 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  arg2 = (enum Core::GEO_SET::GEO_LOAD_TYPE)jarg2; 
  if (arg1) (arg1)->GeoType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GEO_SET_GeoType_get(void * jarg1) {
  int jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  enum Core::GEO_SET::GEO_LOAD_TYPE result;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result = (enum Core::GEO_SET::GEO_LOAD_TYPE) ((arg1)->GeoType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEO_SET_Objects_set(void * jarg1, void * jarg2) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  Vector< Core::GEO_SET_SUBSET > *arg2 = (Vector< Core::GEO_SET_SUBSET > *) 0 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  arg2 = (Vector< Core::GEO_SET_SUBSET > *)jarg2; 
  if (arg1) (arg1)->Objects = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GEO_SET_Objects_get(void * jarg1) {
  void * jresult ;
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  Vector< Core::GEO_SET_SUBSET > *result = 0 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  result = (Vector< Core::GEO_SET_SUBSET > *)& ((arg1)->Objects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GEO_SET() {
  void * jresult ;
  Core::GEO_SET *result = 0 ;
  
  result = (Core::GEO_SET *)new Core::GEO_SET();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GEO_SET(void * jarg1) {
  Core::GEO_SET *arg1 = (Core::GEO_SET *) 0 ;
  
  arg1 = (Core::GEO_SET *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BILLBOARD_Name_set(void * jarg1, void * jarg2) {
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BILLBOARD_Name_get(void * jarg1) {
  void * jresult ;
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  String result;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BILLBOARD_Type_set(void * jarg1, void * jarg2) {
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BILLBOARD_Type_get(void * jarg1) {
  void * jresult ;
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  u32 result;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  result =  ((arg1)->Type);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BILLBOARD_PoolSize_set(void * jarg1, void * jarg2) {
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PoolSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BILLBOARD_PoolSize_get(void * jarg1) {
  void * jresult ;
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  u32 result;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  result =  ((arg1)->PoolSize);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BILLBOARD_MaterialName_set(void * jarg1, void * jarg2) {
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaterialName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BILLBOARD_MaterialName_get(void * jarg1) {
  void * jresult ;
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  String result;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  result =  ((arg1)->MaterialName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BILLBOARD_Width_set(void * jarg1, void * jarg2) {
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Width = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BILLBOARD_Width_get(void * jarg1) {
  void * jresult ;
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  f32 result;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  result =  ((arg1)->Width);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BILLBOARD_Height_set(void * jarg1, void * jarg2) {
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Height = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BILLBOARD_Height_get(void * jarg1) {
  void * jresult ;
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  f32 result;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  result =  ((arg1)->Height);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BILLBOARD() {
  void * jresult ;
  Core::BILLBOARD *result = 0 ;
  
  result = (Core::BILLBOARD *)new Core::BILLBOARD();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BILLBOARD(void * jarg1) {
  Core::BILLBOARD *arg1 = (Core::BILLBOARD *) 0 ;
  
  arg1 = (Core::BILLBOARD *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ANIMATION_MAPPING_MeshName_set(void * jarg1, void * jarg2) {
  Core::ANIMATION_MAPPING *arg1 = (Core::ANIMATION_MAPPING *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::ANIMATION_MAPPING *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MeshName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ANIMATION_MAPPING_MeshName_get(void * jarg1) {
  void * jresult ;
  Core::ANIMATION_MAPPING *arg1 = (Core::ANIMATION_MAPPING *) 0 ;
  String result;
  
  arg1 = (Core::ANIMATION_MAPPING *)jarg1; 
  result =  ((arg1)->MeshName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ANIMATION_MAPPING_Animations_set(void * jarg1, void * jarg2) {
  Core::ANIMATION_MAPPING *arg1 = (Core::ANIMATION_MAPPING *) 0 ;
  Vector< Core::ANIMATION_MAPPING::SOUND_ANIMATION > *arg2 = (Vector< Core::ANIMATION_MAPPING::SOUND_ANIMATION > *) 0 ;
  
  arg1 = (Core::ANIMATION_MAPPING *)jarg1; 
  arg2 = (Vector< Core::ANIMATION_MAPPING::SOUND_ANIMATION > *)jarg2; 
  if (arg1) (arg1)->Animations = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ANIMATION_MAPPING_Animations_get(void * jarg1) {
  void * jresult ;
  Core::ANIMATION_MAPPING *arg1 = (Core::ANIMATION_MAPPING *) 0 ;
  Vector< Core::ANIMATION_MAPPING::SOUND_ANIMATION > *result = 0 ;
  
  arg1 = (Core::ANIMATION_MAPPING *)jarg1; 
  result = (Vector< Core::ANIMATION_MAPPING::SOUND_ANIMATION > *)& ((arg1)->Animations);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ANIMATION_MAPPING() {
  void * jresult ;
  Core::ANIMATION_MAPPING *result = 0 ;
  
  result = (Core::ANIMATION_MAPPING *)new Core::ANIMATION_MAPPING();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ANIMATION_MAPPING(void * jarg1) {
  Core::ANIMATION_MAPPING *arg1 = (Core::ANIMATION_MAPPING *) 0 ;
  
  arg1 = (Core::ANIMATION_MAPPING *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AI_PATH_PathId_set(void * jarg1, void * jarg2) {
  Core::AI_PATH *arg1 = (Core::AI_PATH *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::AI_PATH *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PathId = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AI_PATH_PathId_get(void * jarg1) {
  void * jresult ;
  Core::AI_PATH *arg1 = (Core::AI_PATH *) 0 ;
  u32 result;
  
  arg1 = (Core::AI_PATH *)jarg1; 
  result =  ((arg1)->PathId);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AI_PATH_Name_set(void * jarg1, void * jarg2) {
  Core::AI_PATH *arg1 = (Core::AI_PATH *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::AI_PATH *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AI_PATH_Name_get(void * jarg1) {
  void * jresult ;
  Core::AI_PATH *arg1 = (Core::AI_PATH *) 0 ;
  String result;
  
  arg1 = (Core::AI_PATH *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AI_PATH_Points_set(void * jarg1, void * jarg2) {
  Core::AI_PATH *arg1 = (Core::AI_PATH *) 0 ;
  Vector< Vector3 > arg2 ;
  Vector< Vector3 > *argp2 ;
  
  arg1 = (Core::AI_PATH *)jarg1; 
  argp2 = (Vector< Vector3 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector< Vector3 >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Points = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AI_PATH_Points_get(void * jarg1) {
  void * jresult ;
  Core::AI_PATH *arg1 = (Core::AI_PATH *) 0 ;
  Vector< Vector3 > result;
  
  arg1 = (Core::AI_PATH *)jarg1; 
  result =  ((arg1)->Points);
  jresult = new Vector< Vector3 >((const Vector< Vector3 > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AI_PATH() {
  void * jresult ;
  Core::AI_PATH *result = 0 ;
  
  result = (Core::AI_PATH *)new Core::AI_PATH();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AI_PATH(void * jarg1) {
  Core::AI_PATH *arg1 = (Core::AI_PATH *) 0 ;
  
  arg1 = (Core::AI_PATH *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLACED_ITEM_ProfileName_set(void * jarg1, void * jarg2) {
  Core::PLACED_ITEM *arg1 = (Core::PLACED_ITEM *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PLACED_ITEM *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ProfileName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLACED_ITEM_ProfileName_get(void * jarg1) {
  void * jresult ;
  Core::PLACED_ITEM *arg1 = (Core::PLACED_ITEM *) 0 ;
  String result;
  
  arg1 = (Core::PLACED_ITEM *)jarg1; 
  result =  ((arg1)->ProfileName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLACED_ITEM_Position_set(void * jarg1, void * jarg2) {
  Core::PLACED_ITEM *arg1 = (Core::PLACED_ITEM *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::PLACED_ITEM *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLACED_ITEM_Position_get(void * jarg1) {
  void * jresult ;
  Core::PLACED_ITEM *arg1 = (Core::PLACED_ITEM *) 0 ;
  Vector3 result;
  
  arg1 = (Core::PLACED_ITEM *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PLACED_ITEM() {
  void * jresult ;
  Core::PLACED_ITEM *result = 0 ;
  
  result = (Core::PLACED_ITEM *)new Core::PLACED_ITEM();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PLACED_ITEM(void * jarg1) {
  Core::PLACED_ITEM *arg1 = (Core::PLACED_ITEM *) 0 ;
  
  arg1 = (Core::PLACED_ITEM *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_INVENTORY_ProfileName_set(void * jarg1, void * jarg2) {
  Core::PLAYER_INVENTORY *arg1 = (Core::PLAYER_INVENTORY *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PLAYER_INVENTORY *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ProfileName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_INVENTORY_ProfileName_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER_INVENTORY *arg1 = (Core::PLAYER_INVENTORY *) 0 ;
  String result;
  
  arg1 = (Core::PLAYER_INVENTORY *)jarg1; 
  result =  ((arg1)->ProfileName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_INVENTORY_IsActive_set(void * jarg1, unsigned int jarg2) {
  Core::PLAYER_INVENTORY *arg1 = (Core::PLAYER_INVENTORY *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::PLAYER_INVENTORY *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsActive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PLAYER_INVENTORY_IsActive_get(void * jarg1) {
  unsigned int jresult ;
  Core::PLAYER_INVENTORY *arg1 = (Core::PLAYER_INVENTORY *) 0 ;
  bool result;
  
  arg1 = (Core::PLAYER_INVENTORY *)jarg1; 
  result = (bool) ((arg1)->IsActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PLAYER_INVENTORY() {
  void * jresult ;
  Core::PLAYER_INVENTORY *result = 0 ;
  
  result = (Core::PLAYER_INVENTORY *)new Core::PLAYER_INVENTORY();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PLAYER_INVENTORY(void * jarg1) {
  Core::PLAYER_INVENTORY *arg1 = (Core::PLAYER_INVENTORY *) 0 ;
  
  arg1 = (Core::PLAYER_INVENTORY *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_Name_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_Name_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  String result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_Position_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_Position_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  Vector3 result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_CrawlSpeed_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->CrawlSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_CrawlSpeed_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->CrawlSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_SprintSpeed_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->SprintSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_SprintSpeed_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->SprintSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_IsHumanplayer_set(void * jarg1, unsigned int jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  bool arg2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsHumanplayer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PLAYER_IsHumanplayer_get(void * jarg1) {
  unsigned int jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  bool result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result = (bool) ((arg1)->IsHumanplayer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_ViewRange_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ViewRange = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_ViewRange_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->ViewRange);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_DieingTime_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->DieingTime = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_DieingTime_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->DieingTime);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_MovableText_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MovableText = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_MovableText_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  String result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->MovableText);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_PhysicsName_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PhysicsName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_PhysicsName_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  String result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->PhysicsName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_CharacterState_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->CharacterState = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_CharacterState_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  String result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->CharacterState);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_Direction_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_Direction_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  Vector3 result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->Direction);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_PlayerType_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PlayerType = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_PlayerType_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  String result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->PlayerType);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_Health_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Health = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_Health_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->Health);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_Team_set(void * jarg1, int jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  Core::E_PLAYER_TEAM arg2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  arg2 = (Core::E_PLAYER_TEAM)jarg2; 
  if (arg1) (arg1)->Team = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PLAYER_Team_get(void * jarg1) {
  int jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  Core::E_PLAYER_TEAM result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result = (Core::E_PLAYER_TEAM) ((arg1)->Team);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_RunSpeed_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->RunSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_RunSpeed_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->RunSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_ReloadSpeed_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ReloadSpeed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_ReloadSpeed_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->ReloadSpeed);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_RifleMarksman_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->RifleMarksman = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_RifleMarksman_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->RifleMarksman);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_PhysicalStrength_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PhysicalStrength = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_PhysicalStrength_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  f32 result;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result =  ((arg1)->PhysicalStrength);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_PlayerPaths_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  Vector< Core::AI_PATH > *arg2 = (Vector< Core::AI_PATH > *) 0 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  arg2 = (Vector< Core::AI_PATH > *)jarg2; 
  if (arg1) (arg1)->PlayerPaths = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_PlayerPaths_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  Vector< Core::AI_PATH > *result = 0 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result = (Vector< Core::AI_PATH > *)& ((arg1)->PlayerPaths);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PLAYER_PlayerInventory_set(void * jarg1, void * jarg2) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  Vector< Core::PLAYER_INVENTORY > *arg2 = (Vector< Core::PLAYER_INVENTORY > *) 0 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  arg2 = (Vector< Core::PLAYER_INVENTORY > *)jarg2; 
  if (arg1) (arg1)->PlayerInventory = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PLAYER_PlayerInventory_get(void * jarg1) {
  void * jresult ;
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  Vector< Core::PLAYER_INVENTORY > *result = 0 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  result = (Vector< Core::PLAYER_INVENTORY > *)& ((arg1)->PlayerInventory);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PLAYER() {
  void * jresult ;
  Core::PLAYER *result = 0 ;
  
  result = (Core::PLAYER *)new Core::PLAYER();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PLAYER(void * jarg1) {
  Core::PLAYER *arg1 = (Core::PLAYER *) 0 ;
  
  arg1 = (Core::PLAYER *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ASTAR_NODE_Position_set(void * jarg1, void * jarg2) {
  Core::ASTAR_NODE *arg1 = (Core::ASTAR_NODE *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::ASTAR_NODE *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ASTAR_NODE_Position_get(void * jarg1) {
  void * jresult ;
  Core::ASTAR_NODE *arg1 = (Core::ASTAR_NODE *) 0 ;
  Vector3 result;
  
  arg1 = (Core::ASTAR_NODE *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ASTAR_NODE_Cost_set(void * jarg1, void * jarg2) {
  Core::ASTAR_NODE *arg1 = (Core::ASTAR_NODE *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::ASTAR_NODE *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Cost = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ASTAR_NODE_Cost_get(void * jarg1) {
  void * jresult ;
  Core::ASTAR_NODE *arg1 = (Core::ASTAR_NODE *) 0 ;
  f32 result;
  
  arg1 = (Core::ASTAR_NODE *)jarg1; 
  result =  ((arg1)->Cost);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ASTAR_NODE_NodeId_set(void * jarg1, void * jarg2) {
  Core::ASTAR_NODE *arg1 = (Core::ASTAR_NODE *) 0 ;
  s32 arg2 ;
  s32 *argp2 ;
  
  arg1 = (Core::ASTAR_NODE *)jarg1; 
  argp2 = (s32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null s32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->NodeId = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ASTAR_NODE_NodeId_get(void * jarg1) {
  void * jresult ;
  Core::ASTAR_NODE *arg1 = (Core::ASTAR_NODE *) 0 ;
  s32 result;
  
  arg1 = (Core::ASTAR_NODE *)jarg1; 
  result =  ((arg1)->NodeId);
  jresult = new s32((const s32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ASTAR_NODE_Neighbors_set(void * jarg1, void * jarg2) {
  Core::ASTAR_NODE *arg1 = (Core::ASTAR_NODE *) 0 ;
  Vector< s32 > arg2 ;
  Vector< s32 > *argp2 ;
  
  arg1 = (Core::ASTAR_NODE *)jarg1; 
  argp2 = (Vector< s32 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector< s32 >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Neighbors = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ASTAR_NODE_Neighbors_get(void * jarg1) {
  void * jresult ;
  Core::ASTAR_NODE *arg1 = (Core::ASTAR_NODE *) 0 ;
  Vector< s32 > result;
  
  arg1 = (Core::ASTAR_NODE *)jarg1; 
  result =  ((arg1)->Neighbors);
  jresult = new Vector< s32 >((const Vector< s32 > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ASTAR_NODE() {
  void * jresult ;
  Core::ASTAR_NODE *result = 0 ;
  
  result = (Core::ASTAR_NODE *)new Core::ASTAR_NODE();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ASTAR_NODE(void * jarg1) {
  Core::ASTAR_NODE *arg1 = (Core::ASTAR_NODE *) 0 ;
  
  arg1 = (Core::ASTAR_NODE *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ASTAR_GRID_Nodes_set(void * jarg1, void * jarg2) {
  Core::ASTAR_GRID *arg1 = (Core::ASTAR_GRID *) 0 ;
  Vector< Core::ASTAR_NODE > *arg2 = (Vector< Core::ASTAR_NODE > *) 0 ;
  
  arg1 = (Core::ASTAR_GRID *)jarg1; 
  arg2 = (Vector< Core::ASTAR_NODE > *)jarg2; 
  if (arg1) (arg1)->Nodes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ASTAR_GRID_Nodes_get(void * jarg1) {
  void * jresult ;
  Core::ASTAR_GRID *arg1 = (Core::ASTAR_GRID *) 0 ;
  Vector< Core::ASTAR_NODE > *result = 0 ;
  
  arg1 = (Core::ASTAR_GRID *)jarg1; 
  result = (Vector< Core::ASTAR_NODE > *)& ((arg1)->Nodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ASTAR_GRID() {
  void * jresult ;
  Core::ASTAR_GRID *result = 0 ;
  
  result = (Core::ASTAR_GRID *)new Core::ASTAR_GRID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ASTAR_GRID(void * jarg1) {
  Core::ASTAR_GRID *arg1 = (Core::ASTAR_GRID *) 0 ;
  
  arg1 = (Core::ASTAR_GRID *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SPAWN_POINT() {
  void * jresult ;
  Core::SPAWN_POINT *result = 0 ;
  
  result = (Core::SPAWN_POINT *)new Core::SPAWN_POINT();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SPAWN_POINT_Id_set(void * jarg1, void * jarg2) {
  Core::SPAWN_POINT *arg1 = (Core::SPAWN_POINT *) 0 ;
  u32 arg2 ;
  u32 *argp2 ;
  
  arg1 = (Core::SPAWN_POINT *)jarg1; 
  argp2 = (u32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null u32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Id = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SPAWN_POINT_Id_get(void * jarg1) {
  void * jresult ;
  Core::SPAWN_POINT *arg1 = (Core::SPAWN_POINT *) 0 ;
  u32 result;
  
  arg1 = (Core::SPAWN_POINT *)jarg1; 
  result =  ((arg1)->Id);
  jresult = new u32((const u32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SPAWN_POINT_Team_set(void * jarg1, int jarg2) {
  Core::SPAWN_POINT *arg1 = (Core::SPAWN_POINT *) 0 ;
  Core::E_PLAYER_TEAM arg2 ;
  
  arg1 = (Core::SPAWN_POINT *)jarg1; 
  arg2 = (Core::E_PLAYER_TEAM)jarg2; 
  if (arg1) (arg1)->Team = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPAWN_POINT_Team_get(void * jarg1) {
  int jresult ;
  Core::SPAWN_POINT *arg1 = (Core::SPAWN_POINT *) 0 ;
  Core::E_PLAYER_TEAM result;
  
  arg1 = (Core::SPAWN_POINT *)jarg1; 
  result = (Core::E_PLAYER_TEAM) ((arg1)->Team);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SPAWN_POINT_Position_set(void * jarg1, void * jarg2) {
  Core::SPAWN_POINT *arg1 = (Core::SPAWN_POINT *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::SPAWN_POINT *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SPAWN_POINT_Position_get(void * jarg1) {
  void * jresult ;
  Core::SPAWN_POINT *arg1 = (Core::SPAWN_POINT *) 0 ;
  Vector3 result;
  
  arg1 = (Core::SPAWN_POINT *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SPAWN_POINT_CoolDown_set(void * jarg1, void * jarg2) {
  Core::SPAWN_POINT *arg1 = (Core::SPAWN_POINT *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::SPAWN_POINT *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->CoolDown = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SPAWN_POINT_CoolDown_get(void * jarg1) {
  void * jresult ;
  Core::SPAWN_POINT *arg1 = (Core::SPAWN_POINT *) 0 ;
  f32 result;
  
  arg1 = (Core::SPAWN_POINT *)jarg1; 
  result =  ((arg1)->CoolDown);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SPAWN_POINT(void * jarg1) {
  Core::SPAWN_POINT *arg1 = (Core::SPAWN_POINT *) 0 ;
  
  arg1 = (Core::SPAWN_POINT *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BUILDING() {
  void * jresult ;
  Core::BUILDING *result = 0 ;
  
  result = (Core::BUILDING *)new Core::BUILDING();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BUILDING_Name_set(void * jarg1, void * jarg2) {
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::BUILDING *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BUILDING_Name_get(void * jarg1) {
  void * jresult ;
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  String result;
  
  arg1 = (Core::BUILDING *)jarg1; 
  result =  ((arg1)->Name);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BUILDING_BuildingType_set(void * jarg1, void * jarg2) {
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::BUILDING *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->BuildingType = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BUILDING_BuildingType_get(void * jarg1) {
  void * jresult ;
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  String result;
  
  arg1 = (Core::BUILDING *)jarg1; 
  result =  ((arg1)->BuildingType);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BUILDING_Position_set(void * jarg1, void * jarg2) {
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (Core::BUILDING *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BUILDING_Position_get(void * jarg1) {
  void * jresult ;
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  Vector3 result;
  
  arg1 = (Core::BUILDING *)jarg1; 
  result =  ((arg1)->Position);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BUILDING_Category_set(void * jarg1, int jarg2) {
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  Core::E_BUILDING_CATEGORY arg2 ;
  
  arg1 = (Core::BUILDING *)jarg1; 
  arg2 = (Core::E_BUILDING_CATEGORY)jarg2; 
  if (arg1) (arg1)->Category = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BUILDING_Category_get(void * jarg1) {
  int jresult ;
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  Core::E_BUILDING_CATEGORY result;
  
  arg1 = (Core::BUILDING *)jarg1; 
  result = (Core::E_BUILDING_CATEGORY) ((arg1)->Category);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BUILDING_State_set(void * jarg1, int jarg2) {
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  Core::E_BUILDING_STATE arg2 ;
  
  arg1 = (Core::BUILDING *)jarg1; 
  arg2 = (Core::E_BUILDING_STATE)jarg2; 
  if (arg1) (arg1)->State = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BUILDING_State_get(void * jarg1) {
  int jresult ;
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  Core::E_BUILDING_STATE result;
  
  arg1 = (Core::BUILDING *)jarg1; 
  result = (Core::E_BUILDING_STATE) ((arg1)->State);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BUILDING_Health_set(void * jarg1, void * jarg2) {
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  f32 arg2 ;
  f32 *argp2 ;
  
  arg1 = (Core::BUILDING *)jarg1; 
  argp2 = (f32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null f32", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Health = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BUILDING_Health_get(void * jarg1) {
  void * jresult ;
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  f32 result;
  
  arg1 = (Core::BUILDING *)jarg1; 
  result =  ((arg1)->Health);
  jresult = new f32((const f32 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BUILDING_Team_set(void * jarg1, int jarg2) {
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  Core::E_PLAYER_TEAM arg2 ;
  
  arg1 = (Core::BUILDING *)jarg1; 
  arg2 = (Core::E_PLAYER_TEAM)jarg2; 
  if (arg1) (arg1)->Team = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BUILDING_Team_get(void * jarg1) {
  int jresult ;
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  Core::E_PLAYER_TEAM result;
  
  arg1 = (Core::BUILDING *)jarg1; 
  result = (Core::E_PLAYER_TEAM) ((arg1)->Team);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BUILDING(void * jarg1) {
  Core::BUILDING *arg1 = (Core::BUILDING *) 0 ;
  
  arg1 = (Core::BUILDING *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_SceneManager_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::SCENEMANAGER *arg2 = (Core::SCENEMANAGER *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Core::SCENEMANAGER *)jarg2; 
  if (arg1) (arg1)->SceneManager = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_SceneManager_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::SCENEMANAGER *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Core::SCENEMANAGER *)& ((arg1)->SceneManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Viewport_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::VIEWPORT *arg2 = (Core::VIEWPORT *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Core::VIEWPORT *)jarg2; 
  if (arg1) (arg1)->Viewport = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Viewport_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::VIEWPORT *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Core::VIEWPORT *)& ((arg1)->Viewport);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Caelum_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::CAELUM *arg2 = (Core::CAELUM *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Core::CAELUM *)jarg2; 
  if (arg1) (arg1)->Caelum = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Caelum_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::CAELUM *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Core::CAELUM *)& ((arg1)->Caelum);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Hydrax_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::HYDRAX *arg2 = (Core::HYDRAX *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Core::HYDRAX *)jarg2; 
  if (arg1) (arg1)->Hydrax = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Hydrax_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::HYDRAX *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Core::HYDRAX *)& ((arg1)->Hydrax);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_HeightTerrain_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::HEIGHT_TERRAIN *arg2 = (Core::HEIGHT_TERRAIN *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Core::HEIGHT_TERRAIN *)jarg2; 
  if (arg1) (arg1)->HeightTerrain = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_HeightTerrain_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::HEIGHT_TERRAIN *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Core::HEIGHT_TERRAIN *)& ((arg1)->HeightTerrain);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_PagedTerrain_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::PAGED_TERRAIN *arg2 = (Core::PAGED_TERRAIN *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Core::PAGED_TERRAIN *)jarg2; 
  if (arg1) (arg1)->PagedTerrain = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_PagedTerrain_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::PAGED_TERRAIN *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Core::PAGED_TERRAIN *)& ((arg1)->PagedTerrain);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_PlaneTerrain_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::PLANE_TERRAIN *arg2 = (Core::PLANE_TERRAIN *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Core::PLANE_TERRAIN *)jarg2; 
  if (arg1) (arg1)->PlaneTerrain = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_PlaneTerrain_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::PLANE_TERRAIN *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Core::PLANE_TERRAIN *)& ((arg1)->PlaneTerrain);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_AStarGrid_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::ASTAR_GRID *arg2 = (Core::ASTAR_GRID *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Core::ASTAR_GRID *)jarg2; 
  if (arg1) (arg1)->AStarGrid = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_AStarGrid_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Core::ASTAR_GRID *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Core::ASTAR_GRID *)& ((arg1)->AStarGrid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Lights_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::LIGHT > *arg2 = (Vector< Core::LIGHT > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::LIGHT > *)jarg2; 
  if (arg1) (arg1)->Lights = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Lights_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::LIGHT > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::LIGHT > *)& ((arg1)->Lights);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Cameras_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::CAMERA > *arg2 = (Vector< Core::CAMERA > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::CAMERA > *)jarg2; 
  if (arg1) (arg1)->Cameras = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Cameras_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::CAMERA > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::CAMERA > *)& ((arg1)->Cameras);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_GameObjects_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::GAMEOBJECT > *arg2 = (Vector< Core::GAMEOBJECT > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::GAMEOBJECT > *)jarg2; 
  if (arg1) (arg1)->GameObjects = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_GameObjects_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::GAMEOBJECT > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::GAMEOBJECT > *)& ((arg1)->GameObjects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Weapons_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::WEAPON > *arg2 = (Vector< Core::WEAPON > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::WEAPON > *)jarg2; 
  if (arg1) (arg1)->Weapons = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Weapons_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::WEAPON > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::WEAPON > *)& ((arg1)->Weapons);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Magazines_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::MAGAZINE > *arg2 = (Vector< Core::MAGAZINE > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::MAGAZINE > *)jarg2; 
  if (arg1) (arg1)->Magazines = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Magazines_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::MAGAZINE > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::MAGAZINE > *)& ((arg1)->Magazines);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Projectiles_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::PROJECTILES > *arg2 = (Vector< Core::PROJECTILES > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::PROJECTILES > *)jarg2; 
  if (arg1) (arg1)->Projectiles = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Projectiles_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::PROJECTILES > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::PROJECTILES > *)& ((arg1)->Projectiles);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Melees_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::MELEE > *arg2 = (Vector< Core::MELEE > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::MELEE > *)jarg2; 
  if (arg1) (arg1)->Melees = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Melees_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::MELEE > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::MELEE > *)& ((arg1)->Melees);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_PhysicsProfiles_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::PHYSICS_PROFILE > *arg2 = (Vector< Core::PHYSICS_PROFILE > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::PHYSICS_PROFILE > *)jarg2; 
  if (arg1) (arg1)->PhysicsProfiles = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_PhysicsProfiles_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::PHYSICS_PROFILE > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::PHYSICS_PROFILE > *)& ((arg1)->PhysicsProfiles);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Archives_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::ARCHIVE > *arg2 = (Vector< Core::ARCHIVE > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::ARCHIVE > *)jarg2; 
  if (arg1) (arg1)->Archives = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Archives_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::ARCHIVE > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::ARCHIVE > *)& ((arg1)->Archives);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Waters_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::WATER > *arg2 = (Vector< Core::WATER > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::WATER > *)jarg2; 
  if (arg1) (arg1)->Waters = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Waters_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::WATER > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::WATER > *)& ((arg1)->Waters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_BgSounds_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::BGSOUND > *arg2 = (Vector< Core::BGSOUND > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::BGSOUND > *)jarg2; 
  if (arg1) (arg1)->BgSounds = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_BgSounds_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::BGSOUND > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::BGSOUND > *)& ((arg1)->BgSounds);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Sounds_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::SOUND > *arg2 = (Vector< Core::SOUND > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::SOUND > *)jarg2; 
  if (arg1) (arg1)->Sounds = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Sounds_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::SOUND > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::SOUND > *)& ((arg1)->Sounds);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Billboards_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::BILLBOARD > *arg2 = (Vector< Core::BILLBOARD > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::BILLBOARD > *)jarg2; 
  if (arg1) (arg1)->Billboards = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Billboards_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::BILLBOARD > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::BILLBOARD > *)& ((arg1)->Billboards);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_GeoSets_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::GEO_SET > *arg2 = (Vector< Core::GEO_SET > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::GEO_SET > *)jarg2; 
  if (arg1) (arg1)->GeoSets = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_GeoSets_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::GEO_SET > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::GEO_SET > *)& ((arg1)->GeoSets);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_AnimationMapping_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::ANIMATION_MAPPING > *arg2 = (Vector< Core::ANIMATION_MAPPING > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::ANIMATION_MAPPING > *)jarg2; 
  if (arg1) (arg1)->AnimationMapping = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_AnimationMapping_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::ANIMATION_MAPPING > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::ANIMATION_MAPPING > *)& ((arg1)->AnimationMapping);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_StaticData_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->StaticData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_StaticData_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  String result;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result =  ((arg1)->StaticData);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_AiPaths_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::AI_PATH > *arg2 = (Vector< Core::AI_PATH > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::AI_PATH > *)jarg2; 
  if (arg1) (arg1)->AiPaths = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_AiPaths_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::AI_PATH > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::AI_PATH > *)& ((arg1)->AiPaths);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_PlacedItems_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::PLACED_ITEM > *arg2 = (Vector< Core::PLACED_ITEM > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::PLACED_ITEM > *)jarg2; 
  if (arg1) (arg1)->PlacedItems = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_PlacedItems_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::PLACED_ITEM > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::PLACED_ITEM > *)& ((arg1)->PlacedItems);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Players_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::PLAYER > *arg2 = (Vector< Core::PLAYER > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::PLAYER > *)jarg2; 
  if (arg1) (arg1)->Players = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Players_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::PLAYER > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::PLAYER > *)& ((arg1)->Players);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_SpawnPoints_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::SPAWN_POINT > *arg2 = (Vector< Core::SPAWN_POINT > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::SPAWN_POINT > *)jarg2; 
  if (arg1) (arg1)->SpawnPoints = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_SpawnPoints_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::SPAWN_POINT > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::SPAWN_POINT > *)& ((arg1)->SpawnPoints);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Buildings_set(void * jarg1, void * jarg2) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::BUILDING > *arg2 = (Vector< Core::BUILDING > *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  arg2 = (Vector< Core::BUILDING > *)jarg2; 
  if (arg1) (arg1)->Buildings = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DATA_CONTAINER_Buildings_get(void * jarg1) {
  void * jresult ;
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  Vector< Core::BUILDING > *result = 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  result = (Vector< Core::BUILDING > *)& ((arg1)->Buildings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DATA_CONTAINER_Reset(void * jarg1) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DATA_CONTAINER() {
  void * jresult ;
  Core::DATA_CONTAINER *result = 0 ;
  
  result = (Core::DATA_CONTAINER *)new Core::DATA_CONTAINER();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DATA_CONTAINER(void * jarg1) {
  Core::DATA_CONTAINER *arg1 = (Core::DATA_CONTAINER *) 0 ;
  
  arg1 = (Core::DATA_CONTAINER *)jarg1; 
  delete arg1;
}


SWIGEXPORT Core::CGameObject * SWIGSTDCALL CSharp_CDummyGameObject_SWIGUpcast(Core::CDummyGameObject *jarg1) {
    return (Core::CGameObject *)jarg1;
}

SWIGEXPORT Core::CGameState * SWIGSTDCALL CSharp_CMenuState_SWIGUpcast(Core::CMenuState *jarg1) {
    return (Core::CGameState *)jarg1;
}

SWIGEXPORT Core::CInventoryItem * SWIGSTDCALL CSharp_CWeapon_SWIGUpcast(Core::CWeapon *jarg1) {
    return (Core::CInventoryItem *)jarg1;
}

SWIGEXPORT Core::CItemProfile * SWIGSTDCALL CSharp_CProjectileProfile_SWIGUpcast(Core::CProjectileProfile *jarg1) {
    return (Core::CItemProfile *)jarg1;
}

SWIGEXPORT Core::CItemProfile * SWIGSTDCALL CSharp_CMagazineProfile_SWIGUpcast(Core::CMagazineProfile *jarg1) {
    return (Core::CItemProfile *)jarg1;
}

SWIGEXPORT Core::CItemProfile * SWIGSTDCALL CSharp_CWeaponProfile_SWIGUpcast(Core::CWeaponProfile *jarg1) {
    return (Core::CItemProfile *)jarg1;
}

SWIGEXPORT Core::TERRAIN_TYPE * SWIGSTDCALL CSharp_HEIGHT_TERRAIN_SWIGUpcast(Core::HEIGHT_TERRAIN *jarg1) {
    return (Core::TERRAIN_TYPE *)jarg1;
}

SWIGEXPORT Core::TERRAIN_TYPE * SWIGSTDCALL CSharp_PAGED_TERRAIN_SWIGUpcast(Core::PAGED_TERRAIN *jarg1) {
    return (Core::TERRAIN_TYPE *)jarg1;
}

SWIGEXPORT Core::TERRAIN_TYPE * SWIGSTDCALL CSharp_PLANE_TERRAIN_SWIGUpcast(Core::PLANE_TERRAIN *jarg1) {
    return (Core::TERRAIN_TYPE *)jarg1;
}

#ifdef __cplusplus
}
#endif

#endif