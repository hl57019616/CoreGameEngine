/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CPhysicsProfile : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CPhysicsProfile(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CPhysicsProfile obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CPhysicsProfile() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CPhysicsProfile(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public CPhysicsProfile() : this(testPINVOKE.new_CPhysicsProfile(), true) {
  }

  public E_PHYSICS_SHAPE GetShape() {
    E_PHYSICS_SHAPE ret = (E_PHYSICS_SHAPE)testPINVOKE.CPhysicsProfile_GetShape(swigCPtr);
    return ret;
  }

  public E_BODY_TYPE GetBodyType() {
    E_BODY_TYPE ret = (E_BODY_TYPE)testPINVOKE.CPhysicsProfile_GetBodyType(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_f32 GetFriction() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetFriction(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetMass() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetMass(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetDensity() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetDensity(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetRadius() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetRadius(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_Vector3 GetSize() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.CPhysicsProfile_GetSize(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_Vector3 GetDirection() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.CPhysicsProfile_GetDirection(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_Vector3 GetLinearVelocity() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.CPhysicsProfile_GetLinearVelocity(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_Vector3 GetAngularVelocity() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.CPhysicsProfile_GetAngularVelocity(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_Vector3 GetPositionOffset() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.CPhysicsProfile_GetPositionOffset(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetRestitution() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetRestitution(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetAutoDisableLinearThreshold() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetAutoDisableLinearThreshold(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetAutoDisableAngularThreshold() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetAutoDisableAngularThreshold(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetAutoDisableTime() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetAutoDisableTime(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_u32 GetAutoDisableSteps() {
    SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CPhysicsProfile_GetAutoDisableSteps(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetLinearDamping() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetLinearDamping(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetAngularDamping() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetAngularDamping(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetLinearDampingThreshold() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetLinearDampingThreshold(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetAngularDampingThreshold() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetAngularDampingThreshold(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetMaxAngularSpeed() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CPhysicsProfile_GetMaxAngularSpeed(swigCPtr), true);
    return ret;
  }

  public void GetForce(SWIGTYPE_p_Vector3 Force) {
    testPINVOKE.CPhysicsProfile_GetForce(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Force));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetForceAtPosition(SWIGTYPE_p_Vector3 Force, SWIGTYPE_p_Vector3 Position) {
    testPINVOKE.CPhysicsProfile_GetForceAtPosition(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Force), SWIGTYPE_p_Vector3.getCPtr(Position));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetRelativeForce(SWIGTYPE_p_Vector3 Force) {
    testPINVOKE.CPhysicsProfile_GetRelativeForce(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Force));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetTorque(SWIGTYPE_p_Vector3 Torque) {
    testPINVOKE.CPhysicsProfile_GetTorque(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Torque));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetRelativeTorque(SWIGTYPE_p_Vector3 Torque) {
    testPINVOKE.CPhysicsProfile_GetRelativeTorque(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Torque));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetIsStatic() {
    bool ret = testPINVOKE.CPhysicsProfile_GetIsStatic(swigCPtr);
    return ret;
  }

  public void SetShape(E_PHYSICS_SHAPE Shape) {
    testPINVOKE.CPhysicsProfile_SetShape(swigCPtr, (int)Shape);
  }

  public void SetBodyType(E_BODY_TYPE BodyType) {
    testPINVOKE.CPhysicsProfile_SetBodyType(swigCPtr, (int)BodyType);
  }

  public void SetFriction(SWIGTYPE_p_f32 Friction) {
    testPINVOKE.CPhysicsProfile_SetFriction(swigCPtr, SWIGTYPE_p_f32.getCPtr(Friction));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMass(SWIGTYPE_p_f32 Mass) {
    testPINVOKE.CPhysicsProfile_SetMass(swigCPtr, SWIGTYPE_p_f32.getCPtr(Mass));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDensity(SWIGTYPE_p_f32 Density) {
    testPINVOKE.CPhysicsProfile_SetDensity(swigCPtr, SWIGTYPE_p_f32.getCPtr(Density));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRadius(SWIGTYPE_p_f32 Radius) {
    testPINVOKE.CPhysicsProfile_SetRadius(swigCPtr, SWIGTYPE_p_f32.getCPtr(Radius));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSize(SWIGTYPE_p_Vector3 Size) {
    testPINVOKE.CPhysicsProfile_SetSize(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Size));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDirection(SWIGTYPE_p_Vector3 Direction) {
    testPINVOKE.CPhysicsProfile_SetDirection(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Direction));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLinearVelocity(SWIGTYPE_p_Vector3 LinearVelocity) {
    testPINVOKE.CPhysicsProfile_SetLinearVelocity(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(LinearVelocity));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAngularVelocity(SWIGTYPE_p_Vector3 AngularVelocity) {
    testPINVOKE.CPhysicsProfile_SetAngularVelocity(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(AngularVelocity));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPositionOffset(SWIGTYPE_p_Vector3 Position) {
    testPINVOKE.CPhysicsProfile_SetPositionOffset(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Position));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRestitution(SWIGTYPE_p_f32 Restitution) {
    testPINVOKE.CPhysicsProfile_SetRestitution(swigCPtr, SWIGTYPE_p_f32.getCPtr(Restitution));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAutoDisableLinearThreshold(SWIGTYPE_p_f32 Threshold) {
    testPINVOKE.CPhysicsProfile_SetAutoDisableLinearThreshold(swigCPtr, SWIGTYPE_p_f32.getCPtr(Threshold));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAutoDisableAngularThreshold(SWIGTYPE_p_f32 Threshold) {
    testPINVOKE.CPhysicsProfile_SetAutoDisableAngularThreshold(swigCPtr, SWIGTYPE_p_f32.getCPtr(Threshold));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAutoDisableTime(SWIGTYPE_p_f32 Time) {
    testPINVOKE.CPhysicsProfile_SetAutoDisableTime(swigCPtr, SWIGTYPE_p_f32.getCPtr(Time));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAutoDisableSteps(SWIGTYPE_p_u32 Steps) {
    testPINVOKE.CPhysicsProfile_SetAutoDisableSteps(swigCPtr, SWIGTYPE_p_u32.getCPtr(Steps));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLinearDamping(SWIGTYPE_p_f32 LinearDamping) {
    testPINVOKE.CPhysicsProfile_SetLinearDamping(swigCPtr, SWIGTYPE_p_f32.getCPtr(LinearDamping));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAngularDamping(SWIGTYPE_p_f32 AngularDamping) {
    testPINVOKE.CPhysicsProfile_SetAngularDamping(swigCPtr, SWIGTYPE_p_f32.getCPtr(AngularDamping));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLinearDampingThreshold(SWIGTYPE_p_f32 Threshold) {
    testPINVOKE.CPhysicsProfile_SetLinearDampingThreshold(swigCPtr, SWIGTYPE_p_f32.getCPtr(Threshold));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAngularDampingThreshold(SWIGTYPE_p_f32 Threshold) {
    testPINVOKE.CPhysicsProfile_SetAngularDampingThreshold(swigCPtr, SWIGTYPE_p_f32.getCPtr(Threshold));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMaxAngularSpeed(SWIGTYPE_p_f32 Speed) {
    testPINVOKE.CPhysicsProfile_SetMaxAngularSpeed(swigCPtr, SWIGTYPE_p_f32.getCPtr(Speed));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetForce(SWIGTYPE_p_Vector3 Force) {
    testPINVOKE.CPhysicsProfile_SetForce(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Force));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetForceAtPosition(SWIGTYPE_p_Vector3 Force, SWIGTYPE_p_Vector3 Position) {
    testPINVOKE.CPhysicsProfile_SetForceAtPosition(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Force), SWIGTYPE_p_Vector3.getCPtr(Position));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRelativeForce(SWIGTYPE_p_Vector3 Force) {
    testPINVOKE.CPhysicsProfile_SetRelativeForce(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Force));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTorque(SWIGTYPE_p_Vector3 Torque) {
    testPINVOKE.CPhysicsProfile_SetTorque(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Torque));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRelativeTorque(SWIGTYPE_p_Vector3 Torque) {
    testPINVOKE.CPhysicsProfile_SetRelativeTorque(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Torque));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIsStatic(bool IsStatic) {
    testPINVOKE.CPhysicsProfile_SetIsStatic(swigCPtr, IsStatic);
  }

  public bool IsBasicDirty() {
    bool ret = testPINVOKE.CPhysicsProfile_IsBasicDirty(swigCPtr);
    return ret;
  }

  public bool IsDisabledDirty() {
    bool ret = testPINVOKE.CPhysicsProfile_IsDisabledDirty(swigCPtr);
    return ret;
  }

  public bool IsDampingDirty() {
    bool ret = testPINVOKE.CPhysicsProfile_IsDampingDirty(swigCPtr);
    return ret;
  }

  public bool IsDynamicDirty() {
    bool ret = testPINVOKE.CPhysicsProfile_IsDynamicDirty(swigCPtr);
    return ret;
  }

  public void ResetDirty() {
    testPINVOKE.CPhysicsProfile_ResetDirty(swigCPtr);
  }

}
