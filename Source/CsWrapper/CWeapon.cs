/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CWeapon : CInventoryItem {
  private HandleRef swigCPtr;

  internal CWeapon(IntPtr cPtr, bool cMemoryOwn) : base(testPINVOKE.CWeapon_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CWeapon obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CWeapon() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CWeapon(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public CWeapon(CWeaponProfile Profile, SWIGTYPE_p_Core__Physics__IPhysicsStrategy Physics) : this(testPINVOKE.new_CWeapon__SWIG_0(CWeaponProfile.getCPtr(Profile), SWIGTYPE_p_Core__Physics__IPhysicsStrategy.getCPtr(Physics)), true) {
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public CWeapon(CWeaponProfile Profile) : this(testPINVOKE.new_CWeapon__SWIG_1(CWeaponProfile.getCPtr(Profile)), true) {
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(SWIGTYPE_p_f32 elapsedTime) {
    testPINVOKE.CWeapon_Update(swigCPtr, SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public new void ShowSight(bool Show) {
    testPINVOKE.CWeapon_ShowSight(swigCPtr, Show);
  }

  public void SetUsed(bool Used) {
    testPINVOKE.CWeapon_SetUsed(swigCPtr, Used);
  }

  public override bool Use(SWIGTYPE_p_Vector3 Target) {
    bool ret = testPINVOKE.CWeapon_Use(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Target));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CMagazine GetMagazine() {
    IntPtr cPtr = testPINVOKE.CWeapon_GetMagazine(swigCPtr);
    CMagazine ret = (cPtr == IntPtr.Zero) ? null : new CMagazine(cPtr, false);
    return ret;
  }

  public void SetMagazine(CMagazine m) {
    testPINVOKE.CWeapon_SetMagazine(swigCPtr, CMagazine.getCPtr(m));
  }

}
