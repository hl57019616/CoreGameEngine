/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CSpawnManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CSpawnManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CSpawnManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CSpawnManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CSpawnManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static CSpawnManager Instance() {
    IntPtr cPtr = testPINVOKE.CSpawnManager_Instance();
    CSpawnManager ret = (cPtr == IntPtr.Zero) ? null : new CSpawnManager(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_u32 AddSpawnPoint(SWIGTYPE_p_Vector3 Position, E_PLAYER_TEAM Team, SWIGTYPE_p_f32 CoolDown) {
    SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CSpawnManager_AddSpawnPoint__SWIG_0(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Position), (int)Team, SWIGTYPE_p_f32.getCPtr(CoolDown)), true);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_u32 AddSpawnPoint(SWIGTYPE_p_Vector3 Position, E_PLAYER_TEAM Team) {
    SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CSpawnManager_AddSpawnPoint__SWIG_1(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Position), (int)Team), true);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_u32 AddSpawnPoint(SWIGTYPE_p_u32 Id, SWIGTYPE_p_Vector3 Position, E_PLAYER_TEAM Team, SWIGTYPE_p_f32 CoolDown) {
    SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CSpawnManager_AddSpawnPoint__SWIG_2(swigCPtr, SWIGTYPE_p_u32.getCPtr(Id), SWIGTYPE_p_Vector3.getCPtr(Position), (int)Team, SWIGTYPE_p_f32.getCPtr(CoolDown)), true);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_u32 AddSpawnPoint(SWIGTYPE_p_u32 Id, SWIGTYPE_p_Vector3 Position, E_PLAYER_TEAM Team) {
    SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CSpawnManager_AddSpawnPoint__SWIG_3(swigCPtr, SWIGTYPE_p_u32.getCPtr(Id), SWIGTYPE_p_Vector3.getCPtr(Position), (int)Team), true);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemoveSpawnPoint(SWIGTYPE_p_u32 Id) {
    bool ret = testPINVOKE.CSpawnManager_RemoveSpawnPoint(swigCPtr, SWIGTYPE_p_u32.getCPtr(Id));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_MapT_u32_Core__SPAWN_POINT_p_t GetAllSpawnPoints() {
    SWIGTYPE_p_MapT_u32_Core__SPAWN_POINT_p_t ret = new SWIGTYPE_p_MapT_u32_Core__SPAWN_POINT_p_t(testPINVOKE.CSpawnManager_GetAllSpawnPoints(swigCPtr), false);
    return ret;
  }

  public SPAWN_POINT GetSpawnPoint(SWIGTYPE_p_u32 Id) {
    IntPtr cPtr = testPINVOKE.CSpawnManager_GetSpawnPoint__SWIG_0(swigCPtr, SWIGTYPE_p_u32.getCPtr(Id));
    SPAWN_POINT ret = (cPtr == IntPtr.Zero) ? null : new SPAWN_POINT(cPtr, false);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SPAWN_POINT GetSpawnPoint(SWIGTYPE_p_Vector3 Position, SWIGTYPE_p_f32 Threshold) {
    IntPtr cPtr = testPINVOKE.CSpawnManager_GetSpawnPoint__SWIG_1(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Position), SWIGTYPE_p_f32.getCPtr(Threshold));
    SPAWN_POINT ret = (cPtr == IntPtr.Zero) ? null : new SPAWN_POINT(cPtr, false);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SPAWN_POINT GetSpawnPoint(SWIGTYPE_p_Vector3 Position) {
    IntPtr cPtr = testPINVOKE.CSpawnManager_GetSpawnPoint__SWIG_2(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Position));
    SPAWN_POINT ret = (cPtr == IntPtr.Zero) ? null : new SPAWN_POINT(cPtr, false);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SpawnPlayer(SWIGTYPE_p_u32 Id, CPlayer Player) {
    bool ret = testPINVOKE.CSpawnManager_SpawnPlayer__SWIG_0(swigCPtr, SWIGTYPE_p_u32.getCPtr(Id), CPlayer.getCPtr(Player));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SpawnPlayer(SWIGTYPE_p_Vector3 Position, SWIGTYPE_p_f32 Threshold, CPlayer Player) {
    bool ret = testPINVOKE.CSpawnManager_SpawnPlayer__SWIG_1(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Position), SWIGTYPE_p_f32.getCPtr(Threshold), CPlayer.getCPtr(Player));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
