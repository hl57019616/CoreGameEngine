/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class HYDRAX : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HYDRAX(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(HYDRAX obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HYDRAX() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_HYDRAX(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_String Name {
    set {
      testPINVOKE.HYDRAX_Name_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HYDRAX_Name_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String ConfigFile {
    set {
      testPINVOKE.HYDRAX_ConfigFile_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HYDRAX_ConfigFile_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isCaelumItegrated {
    set {
      testPINVOKE.HYDRAX_isCaelumItegrated_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_isCaelumItegrated_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 CausticsEnd {
    set {
      testPINVOKE.HYDRAX_CausticsEnd_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_CausticsEnd_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 CausticsPower {
    set {
      testPINVOKE.HYDRAX_CausticsPower_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_CausticsPower_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 CausticsScale {
    set {
      testPINVOKE.HYDRAX_CausticsScale_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_CausticsScale_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isComponentsCaustics {
    set {
      testPINVOKE.HYDRAX_isComponentsCaustics_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_isComponentsCaustics_get(swigCPtr);
      return ret;
    } 
  }

  public bool isComponentsDepth {
    set {
      testPINVOKE.HYDRAX_isComponentsDepth_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_isComponentsDepth_get(swigCPtr);
      return ret;
    } 
  }

  public bool isComponentsFoam {
    set {
      testPINVOKE.HYDRAX_isComponentsFoam_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_isComponentsFoam_get(swigCPtr);
      return ret;
    } 
  }

  public bool isComponentsSmooth {
    set {
      testPINVOKE.HYDRAX_isComponentsSmooth_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_isComponentsSmooth_get(swigCPtr);
      return ret;
    } 
  }

  public bool isComponentsSun {
    set {
      testPINVOKE.HYDRAX_isComponentsSun_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_isComponentsSun_get(swigCPtr);
      return ret;
    } 
  }

  public bool isComponentsUnderwater {
    set {
      testPINVOKE.HYDRAX_isComponentsUnderwater_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_isComponentsUnderwater_get(swigCPtr);
      return ret;
    } 
  }

  public bool isComponentsGodrays {
    set {
      testPINVOKE.HYDRAX_isComponentsGodrays_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_isComponentsGodrays_get(swigCPtr);
      return ret;
    } 
  }

  public bool isComponentsReflections {
    set {
      testPINVOKE.HYDRAX_isComponentsReflections_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_isComponentsReflections_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 DepthLimit {
    set {
      testPINVOKE.HYDRAX_DepthLimit_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_DepthLimit_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 FoamMaxDistance {
    set {
      testPINVOKE.HYDRAX_FoamMaxDistance_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_FoamMaxDistance_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 FoamScale {
    set {
      testPINVOKE.HYDRAX_FoamScale_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_FoamScale_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 FoamStart {
    set {
      testPINVOKE.HYDRAX_FoamStart_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_FoamStart_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 FoamTransparency {
    set {
      testPINVOKE.HYDRAX_FoamTransparency_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_FoamTransparency_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 FullReflectionDistance {
    set {
      testPINVOKE.HYDRAX_FullReflectionDistance_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_FullReflectionDistance_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 GlobalTransparency {
    set {
      testPINVOKE.HYDRAX_GlobalTransparency_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_GlobalTransparency_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector3 GodraysExposure {
    set {
      testPINVOKE.HYDRAX_GodraysExposure_set(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.HYDRAX_GodraysExposure_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 GodraysIntensity {
    set {
      testPINVOKE.HYDRAX_GodraysIntensity_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_GodraysIntensity_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool GodraysIntersections {
    set {
      testPINVOKE.HYDRAX_GodraysIntersections_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_GodraysIntersections_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 GodraysNumRays {
    set {
      testPINVOKE.HYDRAX_GodraysNumRays_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_GodraysNumRays_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 GodraysSize {
    set {
      testPINVOKE.HYDRAX_GodraysSize_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_GodraysSize_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 GodraysSpeed {
    set {
      testPINVOKE.HYDRAX_GodraysSpeed_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_GodraysSpeed_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 Layers {
    set {
      testPINVOKE.HYDRAX_Layers_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_Layers_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String ModuleName {
    set {
      testPINVOKE.HYDRAX_ModuleName_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HYDRAX_ModuleName_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String NoiseModuleName {
    set {
      testPINVOKE.HYDRAX_NoiseModuleName_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HYDRAX_NoiseModuleName_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 NormalDistortion {
    set {
      testPINVOKE.HYDRAX_NormalDistortion_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_NormalDistortion_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 PerlinAnimSpeed {
    set {
      testPINVOKE.HYDRAX_PerlinAnimSpeed_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_PerlinAnimSpeed_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 PerlinFalloff {
    set {
      testPINVOKE.HYDRAX_PerlinFalloff_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_PerlinFalloff_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector3 PerlinGpuLod {
    set {
      testPINVOKE.HYDRAX_PerlinGpuLod_set(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.HYDRAX_PerlinGpuLod_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 PerlinGpuStrength {
    set {
      testPINVOKE.HYDRAX_PerlinGpuStrength_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_PerlinGpuStrength_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 PerlinOctaves {
    set {
      testPINVOKE.HYDRAX_PerlinOctaves_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_PerlinOctaves_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 PerlinScale {
    set {
      testPINVOKE.HYDRAX_PerlinScale_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_PerlinScale_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 PerlinTimeMulti {
    set {
      testPINVOKE.HYDRAX_PerlinTimeMulti_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_PerlinTimeMulti_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 PgmoduleChoppyStrength {
    set {
      testPINVOKE.HYDRAX_PgmoduleChoppyStrength_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_PgmoduleChoppyStrength_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isPgmoduleChoppyWaves {
    set {
      testPINVOKE.HYDRAX_isPgmoduleChoppyWaves_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_isPgmoduleChoppyWaves_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 PgmoduleComplexity {
    set {
      testPINVOKE.HYDRAX_PgmoduleComplexity_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_PgmoduleComplexity_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 PgmoduleElevation {
    set {
      testPINVOKE.HYDRAX_PgmoduleElevation_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_PgmoduleElevation_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isPgmoduleForceRecalculateGeometry {
    set {
      testPINVOKE.HYDRAX_isPgmoduleForceRecalculateGeometry_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_isPgmoduleForceRecalculateGeometry_get(swigCPtr);
      return ret;
    } 
  }

  public bool isPgmoduleSmooth {
    set {
      testPINVOKE.HYDRAX_isPgmoduleSmooth_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.HYDRAX_isPgmoduleSmooth_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 PgmoduleStrength {
    set {
      testPINVOKE.HYDRAX_PgmoduleStrength_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_PgmoduleStrength_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 PlanesError {
    set {
      testPINVOKE.HYDRAX_PlanesError_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_PlanesError_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector3 Position {
    set {
      testPINVOKE.HYDRAX_Position_set(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.HYDRAX_Position_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 RttQualityDepth {
    set {
      testPINVOKE.HYDRAX_RttQualityDepth_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_RttQualityDepth_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 RttQualityDepthAip {
    set {
      testPINVOKE.HYDRAX_RttQualityDepthAip_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_RttQualityDepthAip_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 RttQualityDepthReflection {
    set {
      testPINVOKE.HYDRAX_RttQualityDepthReflection_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_RttQualityDepthReflection_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 RttQualityGpuNormalMap {
    set {
      testPINVOKE.HYDRAX_RttQualityGpuNormalMap_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_RttQualityGpuNormalMap_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 RttQualityReflection {
    set {
      testPINVOKE.HYDRAX_RttQualityReflection_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_RttQualityReflection_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 RttQualityRefraction {
    set {
      testPINVOKE.HYDRAX_RttQualityRefraction_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_RttQualityRefraction_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 ShaderMode {
    set {
      testPINVOKE.HYDRAX_ShaderMode_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.HYDRAX_ShaderMode_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 SmoothPower {
    set {
      testPINVOKE.HYDRAX_SmoothPower_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_SmoothPower_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 SunArea {
    set {
      testPINVOKE.HYDRAX_SunArea_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_SunArea_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector3 SunColour {
    set {
      testPINVOKE.HYDRAX_SunColour_set(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.HYDRAX_SunColour_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector3 SunPosition {
    set {
      testPINVOKE.HYDRAX_SunPosition_set(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.HYDRAX_SunPosition_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 SunStrength {
    set {
      testPINVOKE.HYDRAX_SunStrength_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.HYDRAX_SunStrength_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String TechniqueAdd {
    set {
      testPINVOKE.HYDRAX_TechniqueAdd_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HYDRAX_TechniqueAdd_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String TechniqueRemove {
    set {
      testPINVOKE.HYDRAX_TechniqueRemove_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HYDRAX_TechniqueRemove_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String UpdateScript {
    set {
      testPINVOKE.HYDRAX_UpdateScript_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.HYDRAX_UpdateScript_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector3 WaterColour {
    set {
      testPINVOKE.HYDRAX_WaterColour_set(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.HYDRAX_WaterColour_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public HYDRAX() : this(testPINVOKE.new_HYDRAX(), true) {
  }

}
