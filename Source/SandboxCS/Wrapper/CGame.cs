/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CGame : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CGame(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CGame obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CGame() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CGame(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public CGame() : this(testPINVOKE.new_CGame(), true) {
  }

  public void Run() {
    testPINVOKE.CGame_Run(swigCPtr);
  }

  public void AddGameState(CGameState GameState) {
    testPINVOKE.CGame_AddGameState(swigCPtr, CGameState.getCPtr(GameState));
  }

  public void AdvanceState() {
    testPINVOKE.CGame_AdvanceState(swigCPtr);
  }

}
