/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CCameraManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CCameraManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CCameraManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CCameraManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CCameraManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static CCameraManager Instance() {
    IntPtr cPtr = testPINVOKE.CCameraManager_Instance();
    CCameraManager ret = (cPtr == IntPtr.Zero) ? null : new CCameraManager(cPtr, false);
    return ret;
  }

  public E_CAMERA_MODE GetMode() {
    E_CAMERA_MODE ret = (E_CAMERA_MODE)testPINVOKE.CCameraManager_GetMode(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Camera GetCamera() {
    IntPtr cPtr = testPINVOKE.CCameraManager_GetCamera(swigCPtr);
    SWIGTYPE_p_Camera ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Camera(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Viewport GetViewport() {
    IntPtr cPtr = testPINVOKE.CCameraManager_GetViewport(swigCPtr);
    SWIGTYPE_p_Viewport ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Viewport(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Vector3 GetCameraPos() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.CCameraManager_GetCameraPos(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_VectorT_Core__ICamera_p_t GetCameras() {
    SWIGTYPE_p_VectorT_Core__ICamera_p_t ret = new SWIGTYPE_p_VectorT_Core__ICamera_p_t(testPINVOKE.CCameraManager_GetCameras(swigCPtr), false);
    return ret;
  }

  public bool GetIsPlayerFriendly() {
    bool ret = testPINVOKE.CCameraManager_GetIsPlayerFriendly(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_SceneNode GetCameraNode() {
    IntPtr cPtr = testPINVOKE.CCameraManager_GetCameraNode(swigCPtr);
    SWIGTYPE_p_SceneNode ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_SceneNode(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_SceneNode GetTargetNode() {
    IntPtr cPtr = testPINVOKE.CCameraManager_GetTargetNode(swigCPtr);
    SWIGTYPE_p_SceneNode ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_SceneNode(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_f32 GetFarClipDistance() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CCameraManager_GetFarClipDistance(swigCPtr), true);
    return ret;
  }

  public void SetMoveSpeed(SWIGTYPE_p_f32 Speed) {
    testPINVOKE.CCameraManager_SetMoveSpeed(swigCPtr, SWIGTYPE_p_f32.getCPtr(Speed));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetEnabled(bool Enabled) {
    testPINVOKE.CCameraManager_SetEnabled(swigCPtr, Enabled);
  }

  public void SetCameraPos(SWIGTYPE_p_Vector3 Pos) {
    testPINVOKE.CCameraManager_SetCameraPos(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Pos));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCurrCamera(SWIGTYPE_p_u32 Index) {
    testPINVOKE.CCameraManager_SetCurrCamera(swigCPtr, SWIGTYPE_p_u32.getCPtr(Index));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsHaveMode(E_CAMERA_MODE Mode) {
    bool ret = testPINVOKE.CCameraManager_IsHaveMode(swigCPtr, (int)Mode);
    return ret;
  }

  public void RemoveAllCameras() {
    testPINVOKE.CCameraManager_RemoveAllCameras(swigCPtr);
  }

  public void Shutdown() {
    testPINVOKE.CCameraManager_Shutdown(swigCPtr);
  }

  public void Restart() {
    testPINVOKE.CCameraManager_Restart(swigCPtr);
  }

  public SWIGTYPE_p_s32 CreateCamera(E_CAMERA_MODE Type, SWIGTYPE_p_SceneNode Parent) {
    SWIGTYPE_p_s32 ret = new SWIGTYPE_p_s32(testPINVOKE.CCameraManager_CreateCamera__SWIG_0(swigCPtr, (int)Type, SWIGTYPE_p_SceneNode.getCPtr(Parent)), true);
    return ret;
  }

  public SWIGTYPE_p_s32 CreateCamera(E_CAMERA_MODE Type) {
    SWIGTYPE_p_s32 ret = new SWIGTYPE_p_s32(testPINVOKE.CCameraManager_CreateCamera__SWIG_1(swigCPtr, (int)Type), true);
    return ret;
  }

  public void Update(SWIGTYPE_p_f32 elapsedTime) {
    testPINVOKE.CCameraManager_Update__SWIG_0(swigCPtr, SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update(SWIGTYPE_p_f32 elapsedTime, E_CAMERA_MODE Mode) {
    testPINVOKE.CCameraManager_Update__SWIG_1(swigCPtr, SWIGTYPE_p_f32.getCPtr(elapsedTime), (int)Mode);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

}
