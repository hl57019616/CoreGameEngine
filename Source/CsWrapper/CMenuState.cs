/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CMenuState : CGameState {
  private HandleRef swigCPtr;

  internal CMenuState(IntPtr cPtr, bool cMemoryOwn) : base(testPINVOKE.CMenuState_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CMenuState obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CMenuState() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CMenuState(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual bool keyPressed(SWIGTYPE_p_OIS__KeyEvent e) {
    bool ret = testPINVOKE.CMenuState_keyPressed(swigCPtr, SWIGTYPE_p_OIS__KeyEvent.getCPtr(e));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool keyReleased(SWIGTYPE_p_OIS__KeyEvent e) {
    bool ret = testPINVOKE.CMenuState_keyReleased(swigCPtr, SWIGTYPE_p_OIS__KeyEvent.getCPtr(e));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool mouseMoved(SWIGTYPE_p_OIS__MouseEvent e) {
    bool ret = testPINVOKE.CMenuState_mouseMoved(swigCPtr, SWIGTYPE_p_OIS__MouseEvent.getCPtr(e));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool mousePressed(SWIGTYPE_p_OIS__MouseEvent e, SWIGTYPE_p_OIS__MouseButtonID id) {
    bool ret = testPINVOKE.CMenuState_mousePressed(swigCPtr, SWIGTYPE_p_OIS__MouseEvent.getCPtr(e), SWIGTYPE_p_OIS__MouseButtonID.getCPtr(id));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool mouseReleased(SWIGTYPE_p_OIS__MouseEvent e, SWIGTYPE_p_OIS__MouseButtonID id) {
    bool ret = testPINVOKE.CMenuState_mouseReleased(swigCPtr, SWIGTYPE_p_OIS__MouseEvent.getCPtr(e), SWIGTYPE_p_OIS__MouseButtonID.getCPtr(id));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool frameRenderingQueued(SWIGTYPE_p_FrameEvent Event) {
    bool ret = testPINVOKE.CMenuState_frameRenderingQueued(swigCPtr, SWIGTYPE_p_FrameEvent.getCPtr(Event));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool frameEnded(SWIGTYPE_p_FrameEvent Event) {
    bool ret = testPINVOKE.CMenuState_frameEnded(swigCPtr, SWIGTYPE_p_FrameEvent.getCPtr(Event));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
