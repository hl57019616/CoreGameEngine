/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class BUILDING : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BUILDING(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BUILDING obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BUILDING() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_BUILDING(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public BUILDING() : this(testPINVOKE.new_BUILDING(), true) {
  }

  public SWIGTYPE_p_String Name {
    set {
      testPINVOKE.BUILDING_Name_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.BUILDING_Name_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String BuildingType {
    set {
      testPINVOKE.BUILDING_BuildingType_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.BUILDING_BuildingType_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector3 Position {
    set {
      testPINVOKE.BUILDING_Position_set(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.BUILDING_Position_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public E_BUILDING_CATEGORY Category {
    set {
      testPINVOKE.BUILDING_Category_set(swigCPtr, (int)value);
    } 
    get {
      E_BUILDING_CATEGORY ret = (E_BUILDING_CATEGORY)testPINVOKE.BUILDING_Category_get(swigCPtr);
      return ret;
    } 
  }

  public E_BUILDING_STATE State {
    set {
      testPINVOKE.BUILDING_State_set(swigCPtr, (int)value);
    } 
    get {
      E_BUILDING_STATE ret = (E_BUILDING_STATE)testPINVOKE.BUILDING_State_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 Health {
    set {
      testPINVOKE.BUILDING_Health_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.BUILDING_Health_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public E_PLAYER_TEAM Team {
    set {
      testPINVOKE.BUILDING_Team_set(swigCPtr, (int)value);
    } 
    get {
      E_PLAYER_TEAM ret = (E_PLAYER_TEAM)testPINVOKE.BUILDING_Team_get(swigCPtr);
      return ret;
    } 
  }

}
