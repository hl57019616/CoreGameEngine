/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CNatureManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNatureManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CNatureManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNatureManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CNatureManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static CNatureManager Instance() {
    IntPtr cPtr = testPINVOKE.CNatureManager_Instance();
    CNatureManager ret = (cPtr == IntPtr.Zero) ? null : new CNatureManager(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Core__Nature__CWorld GetWorld() {
    IntPtr cPtr = testPINVOKE.CNatureManager_GetWorld(swigCPtr);
    SWIGTYPE_p_Core__Nature__CWorld ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Core__Nature__CWorld(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_String GetResourceGroupName() {
    SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.CNatureManager_GetResourceGroupName(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_TerrainGroup GetTerrainGroup() {
    IntPtr cPtr = testPINVOKE.CNatureManager_GetTerrainGroup(swigCPtr);
    SWIGTYPE_p_TerrainGroup ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_TerrainGroup(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_MovablePlane GetBottomPlane() {
    IntPtr cPtr = testPINVOKE.CNatureManager_GetBottomPlane(swigCPtr);
    SWIGTYPE_p_MovablePlane ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_MovablePlane(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_f32 GetTerrainHeightAt(SWIGTYPE_p_Ray MouseRay) {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CNatureManager_GetTerrainHeightAt__SWIG_0(swigCPtr, SWIGTYPE_p_Ray.getCPtr(MouseRay)), true);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_f32 GetTerrainHeightAt(SWIGTYPE_p_f32 x, SWIGTYPE_p_f32 z) {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CNatureManager_GetTerrainHeightAt__SWIG_1(swigCPtr, SWIGTYPE_p_f32.getCPtr(x), SWIGTYPE_p_f32.getCPtr(z)), true);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Vector3 GetTerrainPosition(SWIGTYPE_p_Ray MouseRay) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.CNatureManager_GetTerrainPosition(swigCPtr, SWIGTYPE_p_Ray.getCPtr(MouseRay)), true);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTerrainGroup(SWIGTYPE_p_TerrainGroup Terrain) {
    testPINVOKE.CNatureManager_SetTerrainGroup(swigCPtr, SWIGTYPE_p_TerrainGroup.getCPtr(Terrain));
  }

  public void SetWaterSystem(SWIGTYPE_p_Core__Nature__CWaterSystem WaterSystem) {
    testPINVOKE.CNatureManager_SetWaterSystem(swigCPtr, SWIGTYPE_p_Core__Nature__CWaterSystem.getCPtr(WaterSystem));
  }

  public SWIGTYPE_p_Core__Nature__CWaterSystem GetWaterSystem() {
    IntPtr cPtr = testPINVOKE.CNatureManager_GetWaterSystem(swigCPtr);
    SWIGTYPE_p_Core__Nature__CWaterSystem ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Core__Nature__CWaterSystem(cPtr, false);
    return ret;
  }

  public bool CreateWorld(HYDRAX HydraxSettings, CAELUM CealumSettings, TERRAIN_TYPE TerrainSettings, SWIGTYPE_p_String ResourceGroupName) {
    bool ret = testPINVOKE.CNatureManager_CreateWorld__SWIG_0(swigCPtr, HYDRAX.getCPtr(HydraxSettings), CAELUM.getCPtr(CealumSettings), TERRAIN_TYPE.getCPtr(TerrainSettings), SWIGTYPE_p_String.getCPtr(ResourceGroupName));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CreateWorld(HYDRAX HydraxSettings, CAELUM CealumSettings, TERRAIN_TYPE TerrainSettings) {
    bool ret = testPINVOKE.CNatureManager_CreateWorld__SWIG_1(swigCPtr, HYDRAX.getCPtr(HydraxSettings), CAELUM.getCPtr(CealumSettings), TERRAIN_TYPE.getCPtr(TerrainSettings));
    return ret;
  }

  public bool DestroyWorld(SWIGTYPE_p_Core__Nature__CWorld World) {
    bool ret = testPINVOKE.CNatureManager_DestroyWorld(swigCPtr, SWIGTYPE_p_Core__Nature__CWorld.getCPtr(World));
    return ret;
  }

  public void Shutdown() {
    testPINVOKE.CNatureManager_Shutdown(swigCPtr);
  }

  public void Update(SWIGTYPE_p_f32 elapsedTime) {
    testPINVOKE.CNatureManager_Update(swigCPtr, SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddPagedGeometry(GEO_SET TreeSet) {
    testPINVOKE.CNatureManager_AddPagedGeometry(swigCPtr, GEO_SET.getCPtr(TreeSet));
  }

}
