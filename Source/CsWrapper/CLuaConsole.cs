/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CLuaConsole : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CLuaConsole(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CLuaConsole obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CLuaConsole() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CLuaConsole(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static CLuaConsole Instance() {
    IntPtr cPtr = testPINVOKE.CLuaConsole_Instance();
    CLuaConsole ret = (cPtr == IntPtr.Zero) ? null : new CLuaConsole(cPtr, false);
    return ret;
  }

  public void SetVisible(bool fVisible) {
    testPINVOKE.CLuaConsole_SetVisible(swigCPtr, fVisible);
  }

  public bool IsVisible() {
    bool ret = testPINVOKE.CLuaConsole_IsVisible(swigCPtr);
    return ret;
  }

  public void Print(SWIGTYPE_p_String text) {
    testPINVOKE.CLuaConsole_Print(swigCPtr, SWIGTYPE_p_String.getCPtr(text));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool OnKeyPressed(SWIGTYPE_p_OIS__KeyEvent evt) {
    bool ret = testPINVOKE.CLuaConsole_OnKeyPressed(swigCPtr, SWIGTYPE_p_OIS__KeyEvent.getCPtr(evt));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool frameStarted(SWIGTYPE_p_Ogre__FrameEvent evt) {
    bool ret = testPINVOKE.CLuaConsole_frameStarted(swigCPtr, SWIGTYPE_p_Ogre__FrameEvent.getCPtr(evt));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool frameEnded(SWIGTYPE_p_Ogre__FrameEvent evt) {
    bool ret = testPINVOKE.CLuaConsole_frameEnded(swigCPtr, SWIGTYPE_p_Ogre__FrameEvent.getCPtr(evt));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
