/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CEffectsManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CEffectsManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CEffectsManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CEffectsManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CEffectsManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static CEffectsManager Instance() {
    IntPtr cPtr = testPINVOKE.CEffectsManager_Instance();
    CEffectsManager ret = (cPtr == IntPtr.Zero) ? null : new CEffectsManager(cPtr, false);
    return ret;
  }

  public void TogglePostEffects(string EffectName, bool flag) {
    testPINVOKE.CEffectsManager_TogglePostEffects(swigCPtr, EffectName, flag);
  }

  public CPostEffect GetPostEffect(string EffectName) {
    IntPtr cPtr = testPINVOKE.CEffectsManager_GetPostEffect(swigCPtr, EffectName);
    CPostEffect ret = (cPtr == IntPtr.Zero) ? null : new CPostEffect(cPtr, false);
    return ret;
  }

  public CParticleEffect CreateParticle(string EffectName) {
    IntPtr cPtr = testPINVOKE.CEffectsManager_CreateParticle(swigCPtr, EffectName);
    CParticleEffect ret = (cPtr == IntPtr.Zero) ? null : new CParticleEffect(cPtr, false);
    return ret;
  }

  public CParticleEffect GetParticle(string EffectName) {
    IntPtr cPtr = testPINVOKE.CEffectsManager_GetParticle(swigCPtr, EffectName);
    CParticleEffect ret = (cPtr == IntPtr.Zero) ? null : new CParticleEffect(cPtr, false);
    return ret;
  }

  public void Update(SWIGTYPE_p_f32 elapsedTime) {
    testPINVOKE.CEffectsManager_Update(swigCPtr, SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ReInit() {
    testPINVOKE.CEffectsManager_ReInit(swigCPtr);
  }

}
