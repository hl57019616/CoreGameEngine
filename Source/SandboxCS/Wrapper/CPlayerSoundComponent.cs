/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CPlayerSoundComponent : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CPlayerSoundComponent(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CPlayerSoundComponent obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CPlayerSoundComponent() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CPlayerSoundComponent(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public CPlayerSoundComponent() : this(testPINVOKE.new_CPlayerSoundComponent(), true) {
  }

  public bool SetMove(string FileName) {
    bool ret = testPINVOKE.CPlayerSoundComponent_SetMove(swigCPtr, FileName);
    return ret;
  }

  public bool SetShot(string FileName) {
    bool ret = testPINVOKE.CPlayerSoundComponent_SetShot(swigCPtr, FileName);
    return ret;
  }

  public bool SetHolsterIn(string FileName) {
    bool ret = testPINVOKE.CPlayerSoundComponent_SetHolsterIn(swigCPtr, FileName);
    return ret;
  }

  public bool SetHolsterOut(string FileName) {
    bool ret = testPINVOKE.CPlayerSoundComponent_SetHolsterOut(swigCPtr, FileName);
    return ret;
  }

  public bool SetReload(string FileName) {
    bool ret = testPINVOKE.CPlayerSoundComponent_SetReload(swigCPtr, FileName);
    return ret;
  }

  public void PlayMove() {
    testPINVOKE.CPlayerSoundComponent_PlayMove(swigCPtr);
  }

  public void PlayShot() {
    testPINVOKE.CPlayerSoundComponent_PlayShot(swigCPtr);
  }

  public void PlayHolsterIn() {
    testPINVOKE.CPlayerSoundComponent_PlayHolsterIn(swigCPtr);
  }

  public void PlayHolsterOut() {
    testPINVOKE.CPlayerSoundComponent_PlayHolsterOut(swigCPtr);
  }

  public void PlayReload() {
    testPINVOKE.CPlayerSoundComponent_PlayReload(swigCPtr);
  }

}
