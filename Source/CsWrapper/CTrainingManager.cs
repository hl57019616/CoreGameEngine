/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CTrainingManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CTrainingManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CTrainingManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CTrainingManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CTrainingManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static CTrainingManager Instance() {
    IntPtr cPtr = testPINVOKE.CTrainingManager_Instance();
    CTrainingManager ret = (cPtr == IntPtr.Zero) ? null : new CTrainingManager(cPtr, false);
    return ret;
  }

  public bool AddFacility(E_PLAYER_TEAM Team, SWIGTYPE_p_u32 BuildingType) {
    bool ret = testPINVOKE.CTrainingManager_AddFacility(swigCPtr, (int)Team, SWIGTYPE_p_u32.getCPtr(BuildingType));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemoveFacility(E_PLAYER_TEAM Team, SWIGTYPE_p_u32 BuildingType) {
    bool ret = testPINVOKE.CTrainingManager_RemoveFacility(swigCPtr, (int)Team, SWIGTYPE_p_u32.getCPtr(BuildingType));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsCapable(E_PLAYER_TEAM Team, ET_CAPABILITIES Cap) {
    bool ret = testPINVOKE.CTrainingManager_IsCapable(swigCPtr, (int)Team, (int)Cap);
    return ret;
  }

  public bool StartPlayerTraining(CPlayer Player, SWIGTYPE_p_Core__CPlayerAttributesComponent GoalAttributes) {
    bool ret = testPINVOKE.CTrainingManager_StartPlayerTraining(swigCPtr, CPlayer.getCPtr(Player), SWIGTYPE_p_Core__CPlayerAttributesComponent.getCPtr(GoalAttributes));
    return ret;
  }

  public bool StopPlayerTraining(CPlayer Player) {
    bool ret = testPINVOKE.CTrainingManager_StopPlayerTraining(swigCPtr, CPlayer.getCPtr(Player));
    return ret;
  }

  public bool IsPlayerTraining(CPlayer Player) {
    bool ret = testPINVOKE.CTrainingManager_IsPlayerTraining(swigCPtr, CPlayer.getCPtr(Player));
    return ret;
  }

  public void GetPlayerTrainingList(E_PLAYER_TEAM Team, SWIGTYPE_p_VectorT_u32_t List) {
    testPINVOKE.CTrainingManager_GetPlayerTrainingList(swigCPtr, (int)Team, SWIGTYPE_p_VectorT_u32_t.getCPtr(List));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void OnPlayerAttributeUpdate() {
    testPINVOKE.CTrainingManager_OnPlayerAttributeUpdate(swigCPtr);
  }

  public void Update(SWIGTYPE_p_f32 elapsedTime) {
    testPINVOKE.CTrainingManager_Update(swigCPtr, SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

}
