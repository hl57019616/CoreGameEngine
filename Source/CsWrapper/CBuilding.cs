/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CBuilding : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CBuilding(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CBuilding obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CBuilding() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CBuilding(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void Update(SWIGTYPE_p_f32 elapsedTime, SWIGTYPE_p_OIS__Keyboard Keyboard, SWIGTYPE_p_OIS__Mouse Mouse) {
    testPINVOKE.CBuilding_Update(swigCPtr, SWIGTYPE_p_f32.getCPtr(elapsedTime), SWIGTYPE_p_OIS__Keyboard.getCPtr(Keyboard), SWIGTYPE_p_OIS__Mouse.getCPtr(Mouse));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_SceneNode GetNode() {
    IntPtr cPtr = testPINVOKE.CBuilding_GetNode(swigCPtr);
    SWIGTYPE_p_SceneNode ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_SceneNode(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Entity GetEntity() {
    IntPtr cPtr = testPINVOKE.CBuilding_GetEntity(swigCPtr);
    SWIGTYPE_p_Entity ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Entity(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_f32 GetHealth() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CBuilding_GetHealth(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_f32 GetViewRange() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CBuilding_GetViewRange(swigCPtr), true);
    return ret;
  }

  public E_BUILDING_STATE GetState() {
    E_BUILDING_STATE ret = (E_BUILDING_STATE)testPINVOKE.CBuilding_GetState(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Core__AI__CFpsVehicle GetAiVehicle() {
    IntPtr cPtr = testPINVOKE.CBuilding_GetAiVehicle(swigCPtr);
    SWIGTYPE_p_Core__AI__CFpsVehicle ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Core__AI__CFpsVehicle(cPtr, false);
    return ret;
  }

  public E_PLAYER_TEAM GetTeam() {
    E_PLAYER_TEAM ret = (E_PLAYER_TEAM)testPINVOKE.CBuilding_GetTeam(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Vector3 GetPosition() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.CBuilding_GetPosition(swigCPtr), true);
    return ret;
  }

  public string GetName() {
    string ret = testPINVOKE.CBuilding_GetName(swigCPtr);
    return ret;
  }

  public string GetBuildingType() {
    string ret = testPINVOKE.CBuilding_GetBuildingType(swigCPtr);
    return ret;
  }

  public bool GetIsVisible() {
    bool ret = testPINVOKE.CBuilding_GetIsVisible(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_VectorT_Core__CInventoryItem_p_t GetItems() {
    SWIGTYPE_p_VectorT_Core__CInventoryItem_p_t ret = new SWIGTYPE_p_VectorT_Core__CInventoryItem_p_t(testPINVOKE.CBuilding_GetItems(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_Core__AI__CFpsVehicle GetAiTarget() {
    IntPtr cPtr = testPINVOKE.CBuilding_GetAiTarget(swigCPtr);
    SWIGTYPE_p_Core__AI__CFpsVehicle ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Core__AI__CFpsVehicle(cPtr, false);
    return ret;
  }

  public E_LOS_TYPE GetLoSType() {
    E_LOS_TYPE ret = (E_LOS_TYPE)testPINVOKE.CBuilding_GetLoSType(swigCPtr);
    return ret;
  }

  public E_BUILDING_CATEGORY GetCategory() {
    E_BUILDING_CATEGORY ret = (E_BUILDING_CATEGORY)testPINVOKE.CBuilding_GetCategory(swigCPtr);
    return ret;
  }

  public void SetHealth(SWIGTYPE_p_f32 Health) {
    testPINVOKE.CBuilding_SetHealth(swigCPtr, SWIGTYPE_p_f32.getCPtr(Health));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetViewRange(SWIGTYPE_p_f32 ViewRange) {
    testPINVOKE.CBuilding_SetViewRange(swigCPtr, SWIGTYPE_p_f32.getCPtr(ViewRange));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTeam(E_PLAYER_TEAM Team) {
    testPINVOKE.CBuilding_SetTeam(swigCPtr, (int)Team);
  }

  public void SetAiTarget(SWIGTYPE_p_Core__AI__CFpsVehicle Target) {
    testPINVOKE.CBuilding_SetAiTarget(swigCPtr, SWIGTYPE_p_Core__AI__CFpsVehicle.getCPtr(Target));
  }

  public void SetPosition(SWIGTYPE_p_Vector3 Position) {
    testPINVOKE.CBuilding_SetPosition(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Position));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCategory(E_BUILDING_CATEGORY Catetory) {
    testPINVOKE.CBuilding_SetCategory(swigCPtr, (int)Catetory);
  }

  public bool CanSee(SWIGTYPE_p_Vector3 Position) {
    bool ret = testPINVOKE.CBuilding_CanSee(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Position));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddItem(CInventoryItem Item) {
    testPINVOKE.CBuilding_AddItem(swigCPtr, CInventoryItem.getCPtr(Item));
  }

  public void RemoveItem(CInventoryItem Item) {
    testPINVOKE.CBuilding_RemoveItem(swigCPtr, CInventoryItem.getCPtr(Item));
  }

  public void RemoveAllItems() {
    testPINVOKE.CBuilding_RemoveAllItems(swigCPtr);
  }

  public void UseItem(CPlayer Player, CInventoryItem Item) {
    testPINVOKE.CBuilding_UseItem__SWIG_0(swigCPtr, CPlayer.getCPtr(Player), CInventoryItem.getCPtr(Item));
  }

  public void UseItem(CPlayer Player) {
    testPINVOKE.CBuilding_UseItem__SWIG_1(swigCPtr, CPlayer.getCPtr(Player));
  }

  public void UseItem(CGameObject GameObject, CInventoryItem Item) {
    testPINVOKE.CBuilding_UseItem__SWIG_2(swigCPtr, CGameObject.getCPtr(GameObject), CInventoryItem.getCPtr(Item));
  }

  public void UseItem(CGameObject GameObject) {
    testPINVOKE.CBuilding_UseItem__SWIG_3(swigCPtr, CGameObject.getCPtr(GameObject));
  }

  public virtual void OnHit(CProjectile Projectile, SWIGTYPE_p_Vector3 Direction) {
    testPINVOKE.CBuilding_OnHit__SWIG_0(swigCPtr, CProjectile.getCPtr(Projectile), SWIGTYPE_p_Vector3.getCPtr(Direction));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnHit(CInventoryItem InventoryItem, CPlayer Owner, SWIGTYPE_p_Vector3 Direction) {
    testPINVOKE.CBuilding_OnHit__SWIG_1(swigCPtr, CInventoryItem.getCPtr(InventoryItem), CPlayer.getCPtr(Owner), SWIGTYPE_p_Vector3.getCPtr(Direction));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnKill(CPlayer PlayerKilled, CProjectile Projectile) {
    testPINVOKE.CBuilding_OnKill__SWIG_0(swigCPtr, CPlayer.getCPtr(PlayerKilled), CProjectile.getCPtr(Projectile));
  }

  public virtual void OnKill(CPlayer PlayerKilled, CInventoryItem InventoryItem) {
    testPINVOKE.CBuilding_OnKill__SWIG_1(swigCPtr, CPlayer.getCPtr(PlayerKilled), CInventoryItem.getCPtr(InventoryItem));
  }

}
