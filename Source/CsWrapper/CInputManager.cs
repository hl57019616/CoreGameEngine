/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CInputManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CInputManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CInputManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CInputManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CInputManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static CInputManager Instance() {
    IntPtr cPtr = testPINVOKE.CInputManager_Instance();
    CInputManager ret = (cPtr == IntPtr.Zero) ? null : new CInputManager(cPtr, false);
    return ret;
  }

  public void Initialise() {
    testPINVOKE.CInputManager_Initialise(swigCPtr);
  }

  public void Capture() {
    testPINVOKE.CInputManager_Capture(swigCPtr);
  }

  public void AddKeyListener(SWIGTYPE_p_OIS__KeyListener KeyListener, string instanceName) {
    testPINVOKE.CInputManager_AddKeyListener(swigCPtr, SWIGTYPE_p_OIS__KeyListener.getCPtr(KeyListener), instanceName);
  }

  public void AddMouseListener(SWIGTYPE_p_OIS__MouseListener MouseListener, string instanceName) {
    testPINVOKE.CInputManager_AddMouseListener(swigCPtr, SWIGTYPE_p_OIS__MouseListener.getCPtr(MouseListener), instanceName);
  }

  public void AddJoystickListener(SWIGTYPE_p_OIS__JoyStickListener joystickListener, string instanceName) {
    testPINVOKE.CInputManager_AddJoystickListener(swigCPtr, SWIGTYPE_p_OIS__JoyStickListener.getCPtr(joystickListener), instanceName);
  }

  public void RemoveKeyListener(string instanceName) {
    testPINVOKE.CInputManager_RemoveKeyListener__SWIG_0(swigCPtr, instanceName);
  }

  public void RemoveMouseListener(string instanceName) {
    testPINVOKE.CInputManager_RemoveMouseListener__SWIG_0(swigCPtr, instanceName);
  }

  public void RemoveJoystickListener(string instanceName) {
    testPINVOKE.CInputManager_RemoveJoystickListener__SWIG_0(swigCPtr, instanceName);
  }

  public void RemoveKeyListener(SWIGTYPE_p_OIS__KeyListener KeyListener) {
    testPINVOKE.CInputManager_RemoveKeyListener__SWIG_1(swigCPtr, SWIGTYPE_p_OIS__KeyListener.getCPtr(KeyListener));
  }

  public void RemoveMouseListener(SWIGTYPE_p_OIS__MouseListener MouseListener) {
    testPINVOKE.CInputManager_RemoveMouseListener__SWIG_1(swigCPtr, SWIGTYPE_p_OIS__MouseListener.getCPtr(MouseListener));
  }

  public void RemoveJoystickListener(SWIGTYPE_p_OIS__JoyStickListener joystickListener) {
    testPINVOKE.CInputManager_RemoveJoystickListener__SWIG_1(swigCPtr, SWIGTYPE_p_OIS__JoyStickListener.getCPtr(joystickListener));
  }

  public void RemoveAllListeners() {
    testPINVOKE.CInputManager_RemoveAllListeners(swigCPtr);
  }

  public void RemoveAllKeyListeners() {
    testPINVOKE.CInputManager_RemoveAllKeyListeners(swigCPtr);
  }

  public void RemoveAllMouseListeners() {
    testPINVOKE.CInputManager_RemoveAllMouseListeners(swigCPtr);
  }

  public void RemoveAllJoystickListeners() {
    testPINVOKE.CInputManager_RemoveAllJoystickListeners(swigCPtr);
  }

  public void Shutdown() {
    testPINVOKE.CInputManager_Shutdown(swigCPtr);
  }

  public void ResizeWindow(SWIGTYPE_p_RenderWindow rw) {
    testPINVOKE.CInputManager_ResizeWindow(swigCPtr, SWIGTYPE_p_RenderWindow.getCPtr(rw));
  }

  public void SetWindowExtents(SWIGTYPE_p_s32 Width, SWIGTYPE_p_s32 Height) {
    testPINVOKE.CInputManager_SetWindowExtents(swigCPtr, SWIGTYPE_p_s32.getCPtr(Width), SWIGTYPE_p_s32.getCPtr(Height));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetMouseRay(SWIGTYPE_p_Ray ray) {
    testPINVOKE.CInputManager_GetMouseRay(swigCPtr, SWIGTYPE_p_Ray.getCPtr(ray));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_OIS__Mouse GetMouse() {
    IntPtr cPtr = testPINVOKE.CInputManager_GetMouse(swigCPtr);
    SWIGTYPE_p_OIS__Mouse ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_OIS__Mouse(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_OIS__Keyboard GetKeyboard() {
    IntPtr cPtr = testPINVOKE.CInputManager_GetKeyboard(swigCPtr);
    SWIGTYPE_p_OIS__Keyboard ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_OIS__Keyboard(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_OIS__JoyStick GetJoystick(SWIGTYPE_p_u32 Index) {
    IntPtr cPtr = testPINVOKE.CInputManager_GetJoystick(swigCPtr, SWIGTYPE_p_u32.getCPtr(Index));
    SWIGTYPE_p_OIS__JoyStick ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_OIS__JoyStick(cPtr, false);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_u32 GetNumOfJoysticks() {
    SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CInputManager_GetNumOfJoysticks(swigCPtr), true);
    return ret;
  }

}
