/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CCharacterStateManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CCharacterStateManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CCharacterStateManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CCharacterStateManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CCharacterStateManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static CCharacterStateManager Instance() {
    IntPtr cPtr = testPINVOKE.CCharacterStateManager_Instance();
    CCharacterStateManager ret = (cPtr == IntPtr.Zero) ? null : new CCharacterStateManager(cPtr, false);
    return ret;
  }

  public CCharacterState GetState(E_PLAYER_STATE Type, CPlayer Player, SWIGTYPE_p_u32 Level) {
    IntPtr cPtr = testPINVOKE.CCharacterStateManager_GetState__SWIG_0(swigCPtr, (int)Type, CPlayer.getCPtr(Player), SWIGTYPE_p_u32.getCPtr(Level));
    CCharacterState ret = (cPtr == IntPtr.Zero) ? null : new CCharacterState(cPtr, false);
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CCharacterState GetState(E_PLAYER_STATE Type, CPlayer Player) {
    IntPtr cPtr = testPINVOKE.CCharacterStateManager_GetState__SWIG_1(swigCPtr, (int)Type, CPlayer.getCPtr(Player));
    CCharacterState ret = (cPtr == IntPtr.Zero) ? null : new CCharacterState(cPtr, false);
    return ret;
  }

  public CCharacterState GetState(string StateName, CPlayer Player) {
    IntPtr cPtr = testPINVOKE.CCharacterStateManager_GetState__SWIG_2(swigCPtr, StateName, CPlayer.getCPtr(Player));
    CCharacterState ret = (cPtr == IntPtr.Zero) ? null : new CCharacterState(cPtr, false);
    return ret;
  }

  public void GetAllStates(SWIGTYPE_p_VectorT_char_const_p_t States) {
    testPINVOKE.CCharacterStateManager_GetAllStates(swigCPtr, SWIGTYPE_p_VectorT_char_const_p_t.getCPtr(States));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetLoadedStates(SWIGTYPE_p_VectorT_String_t Names) {
    testPINVOKE.CCharacterStateManager_GetLoadedStates(swigCPtr, SWIGTYPE_p_VectorT_String_t.getCPtr(Names));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddPath(string Name, SWIGTYPE_p_VectorT_Vector3_t Paths) {
    testPINVOKE.CCharacterStateManager_AddPath(swigCPtr, Name, SWIGTYPE_p_VectorT_Vector3_t.getCPtr(Paths));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_u32 GetPathCount() {
    SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CCharacterStateManager_GetPathCount(swigCPtr), true);
    return ret;
  }

  public bool GetPathByName(string Name, SWIGTYPE_p_VectorT_Vector3_t Path) {
    bool ret = testPINVOKE.CCharacterStateManager_GetPathByName(swigCPtr, Name, SWIGTYPE_p_VectorT_Vector3_t.getCPtr(Path));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetPathByIndex(SWIGTYPE_p_u32 Index, SWIGTYPE_p_VectorT_Vector3_t Path, SWIGTYPE_p_p_char Name) {
    bool ret = testPINVOKE.CCharacterStateManager_GetPathByIndex__SWIG_0(swigCPtr, SWIGTYPE_p_u32.getCPtr(Index), SWIGTYPE_p_VectorT_Vector3_t.getCPtr(Path), SWIGTYPE_p_p_char.getCPtr(Name));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetPathByIndex(SWIGTYPE_p_u32 Index, SWIGTYPE_p_VectorT_Vector3_t Path) {
    bool ret = testPINVOKE.CCharacterStateManager_GetPathByIndex__SWIG_1(swigCPtr, SWIGTYPE_p_u32.getCPtr(Index), SWIGTYPE_p_VectorT_Vector3_t.getCPtr(Path));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetPathByPoint(SWIGTYPE_p_Vector3 Point, SWIGTYPE_p_VectorT_Vector3_t Path, SWIGTYPE_p_p_char Name) {
    bool ret = testPINVOKE.CCharacterStateManager_GetPathByPoint__SWIG_0(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Point), SWIGTYPE_p_VectorT_Vector3_t.getCPtr(Path), SWIGTYPE_p_p_char.getCPtr(Name));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetPathByPoint(SWIGTYPE_p_Vector3 Point, SWIGTYPE_p_VectorT_Vector3_t Path) {
    bool ret = testPINVOKE.CCharacterStateManager_GetPathByPoint__SWIG_1(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Point), SWIGTYPE_p_VectorT_Vector3_t.getCPtr(Path));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetAllPaths(SWIGTYPE_p_MapT_String_VectorT_Vector3_t_t Paths) {
    testPINVOKE.CCharacterStateManager_GetAllPaths(swigCPtr, SWIGTYPE_p_MapT_String_VectorT_Vector3_t_t.getCPtr(Paths));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool SetName(string OldName, string NewName) {
    bool ret = testPINVOKE.CCharacterStateManager_SetName(swigCPtr, OldName, NewName);
    return ret;
  }

  public E_CHARACTER_STATE_OUTCOME SeekVehicle(CPlayer Player, SWIGTYPE_p_f32 elapsedTime) {
    E_CHARACTER_STATE_OUTCOME ret = (E_CHARACTER_STATE_OUTCOME)testPINVOKE.CCharacterStateManager_SeekVehicle__SWIG_0(swigCPtr, CPlayer.getCPtr(Player), SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public E_CHARACTER_STATE_OUTCOME SeekVehicle(CPlayer Player, SWIGTYPE_p_f32 elapsedTime, SWIGTYPE_p_f32 Radius) {
    E_CHARACTER_STATE_OUTCOME ret = (E_CHARACTER_STATE_OUTCOME)testPINVOKE.CCharacterStateManager_SeekVehicle__SWIG_1(swigCPtr, CPlayer.getCPtr(Player), SWIGTYPE_p_f32.getCPtr(elapsedTime), SWIGTYPE_p_f32.getCPtr(Radius));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public E_CHARACTER_STATE_OUTCOME SeekPosition(CPlayer Player, SWIGTYPE_p_Vector3 Position, SWIGTYPE_p_f32 elapsedTime) {
    E_CHARACTER_STATE_OUTCOME ret = (E_CHARACTER_STATE_OUTCOME)testPINVOKE.CCharacterStateManager_SeekPosition(swigCPtr, CPlayer.getCPtr(Player), SWIGTYPE_p_Vector3.getCPtr(Position), SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public E_CHARACTER_STATE_OUTCOME Wander(CPlayer Player, SWIGTYPE_p_f32 elapsedTime) {
    E_CHARACTER_STATE_OUTCOME ret = (E_CHARACTER_STATE_OUTCOME)testPINVOKE.CCharacterStateManager_Wander(swigCPtr, CPlayer.getCPtr(Player), SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public E_CHARACTER_STATE_OUTCOME Search(CPlayer Player, SWIGTYPE_p_f32 elapsedTime) {
    E_CHARACTER_STATE_OUTCOME ret = (E_CHARACTER_STATE_OUTCOME)testPINVOKE.CCharacterStateManager_Search(swigCPtr, CPlayer.getCPtr(Player), SWIGTYPE_p_f32.getCPtr(elapsedTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public E_CHARACTER_STATE_OUTCOME CenterOfMass(SWIGTYPE_p_VectorT_Core__CPlayer_p_t Group, CPlayer Player, SWIGTYPE_p_f32 elapsedTime, SWIGTYPE_p_f32 MaxDistance, SWIGTYPE_p_f32 CosMaxAngle) {
    E_CHARACTER_STATE_OUTCOME ret = (E_CHARACTER_STATE_OUTCOME)testPINVOKE.CCharacterStateManager_CenterOfMass__SWIG_0(swigCPtr, SWIGTYPE_p_VectorT_Core__CPlayer_p_t.getCPtr(Group), CPlayer.getCPtr(Player), SWIGTYPE_p_f32.getCPtr(elapsedTime), SWIGTYPE_p_f32.getCPtr(MaxDistance), SWIGTYPE_p_f32.getCPtr(CosMaxAngle));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public E_CHARACTER_STATE_OUTCOME CenterOfMass(SWIGTYPE_p_VectorT_Core__CPlayer_p_t Group, CPlayer Player, SWIGTYPE_p_f32 elapsedTime, SWIGTYPE_p_f32 MaxDistance) {
    E_CHARACTER_STATE_OUTCOME ret = (E_CHARACTER_STATE_OUTCOME)testPINVOKE.CCharacterStateManager_CenterOfMass__SWIG_1(swigCPtr, SWIGTYPE_p_VectorT_Core__CPlayer_p_t.getCPtr(Group), CPlayer.getCPtr(Player), SWIGTYPE_p_f32.getCPtr(elapsedTime), SWIGTYPE_p_f32.getCPtr(MaxDistance));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public E_CHARACTER_STATE_OUTCOME AlignWithGroup(SWIGTYPE_p_VectorT_Core__CPlayer_p_t Group, CPlayer Player, SWIGTYPE_p_f32 elapsedTime, SWIGTYPE_p_f32 MaxDistance, SWIGTYPE_p_f32 CosMaxAngle) {
    E_CHARACTER_STATE_OUTCOME ret = (E_CHARACTER_STATE_OUTCOME)testPINVOKE.CCharacterStateManager_AlignWithGroup__SWIG_0(swigCPtr, SWIGTYPE_p_VectorT_Core__CPlayer_p_t.getCPtr(Group), CPlayer.getCPtr(Player), SWIGTYPE_p_f32.getCPtr(elapsedTime), SWIGTYPE_p_f32.getCPtr(MaxDistance), SWIGTYPE_p_f32.getCPtr(CosMaxAngle));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public E_CHARACTER_STATE_OUTCOME AlignWithGroup(SWIGTYPE_p_VectorT_Core__CPlayer_p_t Group, CPlayer Player, SWIGTYPE_p_f32 elapsedTime, SWIGTYPE_p_f32 MaxDistance) {
    E_CHARACTER_STATE_OUTCOME ret = (E_CHARACTER_STATE_OUTCOME)testPINVOKE.CCharacterStateManager_AlignWithGroup__SWIG_1(swigCPtr, SWIGTYPE_p_VectorT_Core__CPlayer_p_t.getCPtr(Group), CPlayer.getCPtr(Player), SWIGTYPE_p_f32.getCPtr(elapsedTime), SWIGTYPE_p_f32.getCPtr(MaxDistance));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public E_CHARACTER_STATE_OUTCOME SeparateFromGroup(SWIGTYPE_p_VectorT_Core__CPlayer_p_t Group, CPlayer Player, SWIGTYPE_p_f32 elapsedTime, SWIGTYPE_p_f32 MaxDistance, SWIGTYPE_p_f32 CosMaxAngle) {
    E_CHARACTER_STATE_OUTCOME ret = (E_CHARACTER_STATE_OUTCOME)testPINVOKE.CCharacterStateManager_SeparateFromGroup__SWIG_0(swigCPtr, SWIGTYPE_p_VectorT_Core__CPlayer_p_t.getCPtr(Group), CPlayer.getCPtr(Player), SWIGTYPE_p_f32.getCPtr(elapsedTime), SWIGTYPE_p_f32.getCPtr(MaxDistance), SWIGTYPE_p_f32.getCPtr(CosMaxAngle));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public E_CHARACTER_STATE_OUTCOME SeparateFromGroup(SWIGTYPE_p_VectorT_Core__CPlayer_p_t Group, CPlayer Player, SWIGTYPE_p_f32 elapsedTime, SWIGTYPE_p_f32 MaxDistance) {
    E_CHARACTER_STATE_OUTCOME ret = (E_CHARACTER_STATE_OUTCOME)testPINVOKE.CCharacterStateManager_SeparateFromGroup__SWIG_1(swigCPtr, SWIGTYPE_p_VectorT_Core__CPlayer_p_t.getCPtr(Group), CPlayer.getCPtr(Player), SWIGTYPE_p_f32.getCPtr(elapsedTime), SWIGTYPE_p_f32.getCPtr(MaxDistance));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public E_CHARACTER_STATE_OUTCOME EvadeVehicle(CPlayer Player, CPlayer Menace, SWIGTYPE_p_f32 elapsedTime, SWIGTYPE_p_f32 MaxPredictionTime) {
    E_CHARACTER_STATE_OUTCOME ret = (E_CHARACTER_STATE_OUTCOME)testPINVOKE.CCharacterStateManager_EvadeVehicle(swigCPtr, CPlayer.getCPtr(Player), CPlayer.getCPtr(Menace), SWIGTYPE_p_f32.getCPtr(elapsedTime), SWIGTYPE_p_f32.getCPtr(MaxPredictionTime));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
