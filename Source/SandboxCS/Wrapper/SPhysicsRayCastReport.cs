/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class SPhysicsRayCastReport : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SPhysicsRayCastReport(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SPhysicsRayCastReport obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SPhysicsRayCastReport() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_SPhysicsRayCastReport(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SPhysicsRayCastReport() : this(testPINVOKE.new_SPhysicsRayCastReport(), true) {
  }

  public SWIGTYPE_p_void Data {
    set {
      testPINVOKE.SPhysicsRayCastReport_Data_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = testPINVOKE.SPhysicsRayCastReport_Data_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public E_BODY_TYPE BodyType {
    set {
      testPINVOKE.SPhysicsRayCastReport_BodyType_set(swigCPtr, (int)value);
    } 
    get {
      E_BODY_TYPE ret = (E_BODY_TYPE)testPINVOKE.SPhysicsRayCastReport_BodyType_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector3 Position {
    set {
      testPINVOKE.SPhysicsRayCastReport_Position_set(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.SPhysicsRayCastReport_Position_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
