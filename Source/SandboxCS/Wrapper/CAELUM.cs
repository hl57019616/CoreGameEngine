/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CAELUM : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CAELUM(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CAELUM obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CAELUM() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CAELUM(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_String Name {
    set {
      testPINVOKE.CAELUM_Name_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.CAELUM_Name_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 TimeDay {
    set {
      testPINVOKE.CAELUM_TimeDay_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_TimeDay_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 TimeHour {
    set {
      testPINVOKE.CAELUM_TimeHour_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_TimeHour_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 TimeMinute {
    set {
      testPINVOKE.CAELUM_TimeMinute_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_TimeMinute_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 TimeMonth {
    set {
      testPINVOKE.CAELUM_TimeMonth_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_TimeMonth_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 TimeSec {
    set {
      testPINVOKE.CAELUM_TimeSec_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_TimeSec_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 TimeSpeed {
    set {
      testPINVOKE.CAELUM_TimeSpeed_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_TimeSpeed_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 TimeYear {
    set {
      testPINVOKE.CAELUM_TimeYear_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_TimeYear_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isClouds {
    set {
      testPINVOKE.CAELUM_isClouds_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CAELUM_isClouds_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 LayerOfClouds {
    set {
      testPINVOKE.CAELUM_LayerOfClouds_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_LayerOfClouds_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 FogDenMultiplier {
    set {
      testPINVOKE.CAELUM_FogDenMultiplier_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_FogDenMultiplier_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isManageFog {
    set {
      testPINVOKE.CAELUM_isManageFog_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CAELUM_isManageFog_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 Layer {
    set {
      testPINVOKE.CAELUM_Layer_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_Layer_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isSingleLightSource {
    set {
      testPINVOKE.CAELUM_isSingleLightSource_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CAELUM_isSingleLightSource_get(swigCPtr);
      return ret;
    } 
  }

  public bool isSingleShadowSource {
    set {
      testPINVOKE.CAELUM_isSingleShadowSource_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CAELUM_isSingleShadowSource_get(swigCPtr);
      return ret;
    } 
  }

  public bool isManageAmbientLight {
    set {
      testPINVOKE.CAELUM_isManageAmbientLight_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CAELUM_isManageAmbientLight_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_ColourValue MinAmbientLight {
    set {
      testPINVOKE.CAELUM_MinAmbientLight_set(swigCPtr, SWIGTYPE_p_ColourValue.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ColourValue ret = new SWIGTYPE_p_ColourValue(testPINVOKE.CAELUM_MinAmbientLight_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ColourValue MoonAmbientMultipler {
    set {
      testPINVOKE.CAELUM_MoonAmbientMultipler_set(swigCPtr, SWIGTYPE_p_ColourValue.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ColourValue ret = new SWIGTYPE_p_ColourValue(testPINVOKE.CAELUM_MoonAmbientMultipler_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 MoonAttMultipler {
    set {
      testPINVOKE.CAELUM_MoonAttMultipler_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_MoonAttMultipler_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 MoonAttDistance {
    set {
      testPINVOKE.CAELUM_MoonAttDistance_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_MoonAttDistance_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 MoonAttLinearMultipler {
    set {
      testPINVOKE.CAELUM_MoonAttLinearMultipler_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_MoonAttLinearMultipler_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 MoonQuadMultipler {
    set {
      testPINVOKE.CAELUM_MoonQuadMultipler_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_MoonQuadMultipler_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isMoonAutoDisable {
    set {
      testPINVOKE.CAELUM_isMoonAutoDisable_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CAELUM_isMoonAutoDisable_get(swigCPtr);
      return ret;
    } 
  }

  public bool isMoonCastShadow {
    set {
      testPINVOKE.CAELUM_isMoonCastShadow_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CAELUM_isMoonCastShadow_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_ColourValue MoonDiffuseMultipler {
    set {
      testPINVOKE.CAELUM_MoonDiffuseMultipler_set(swigCPtr, SWIGTYPE_p_ColourValue.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ColourValue ret = new SWIGTYPE_p_ColourValue(testPINVOKE.CAELUM_MoonDiffuseMultipler_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isMoonEnabled {
    set {
      testPINVOKE.CAELUM_isMoonEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CAELUM_isMoonEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_ColourValue MoonSpecularMultipler {
    set {
      testPINVOKE.CAELUM_MoonSpecularMultipler_set(swigCPtr, SWIGTYPE_p_ColourValue.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ColourValue ret = new SWIGTYPE_p_ColourValue(testPINVOKE.CAELUM_MoonSpecularMultipler_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 ObserverLatitude {
    set {
      testPINVOKE.CAELUM_ObserverLatitude_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_ObserverLatitude_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 ObserverLongitude {
    set {
      testPINVOKE.CAELUM_ObserverLongitude_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_ObserverLongitude_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isStarsEnabled {
    set {
      testPINVOKE.CAELUM_isStarsEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CAELUM_isStarsEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 StarsMag0PixelSize {
    set {
      testPINVOKE.CAELUM_StarsMag0PixelSize_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_StarsMag0PixelSize_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 StarsMagScale {
    set {
      testPINVOKE.CAELUM_StarsMagScale_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CAELUM_StarsMagScale_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 StarsMaxPixelSize {
    set {
      testPINVOKE.CAELUM_StarsMaxPixelSize_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_StarsMaxPixelSize_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 StarsMinPixelSize {
    set {
      testPINVOKE.CAELUM_StarsMinPixelSize_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_StarsMinPixelSize_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ColourValue SunAmbientMultipler {
    set {
      testPINVOKE.CAELUM_SunAmbientMultipler_set(swigCPtr, SWIGTYPE_p_ColourValue.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ColourValue ret = new SWIGTYPE_p_ColourValue(testPINVOKE.CAELUM_SunAmbientMultipler_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 SunAttMultipler {
    set {
      testPINVOKE.CAELUM_SunAttMultipler_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_SunAttMultipler_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 SunDistance {
    set {
      testPINVOKE.CAELUM_SunDistance_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_SunDistance_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 SunAttLinearMultipler {
    set {
      testPINVOKE.CAELUM_SunAttLinearMultipler_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_SunAttLinearMultipler_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_u32 SunQuadMultipler {
    set {
      testPINVOKE.CAELUM_SunQuadMultipler_set(swigCPtr, SWIGTYPE_p_u32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_u32 ret = new SWIGTYPE_p_u32(testPINVOKE.CAELUM_SunQuadMultipler_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isSunAutoDisable {
    set {
      testPINVOKE.CAELUM_isSunAutoDisable_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CAELUM_isSunAutoDisable_get(swigCPtr);
      return ret;
    } 
  }

  public bool isSunCastShadow {
    set {
      testPINVOKE.CAELUM_isSunCastShadow_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CAELUM_isSunCastShadow_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector3 SunColor {
    set {
      testPINVOKE.CAELUM_SunColor_set(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.CAELUM_SunColor_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ColourValue SunDiffuseMultipler {
    set {
      testPINVOKE.CAELUM_SunDiffuseMultipler_set(swigCPtr, SWIGTYPE_p_ColourValue.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ColourValue ret = new SWIGTYPE_p_ColourValue(testPINVOKE.CAELUM_SunDiffuseMultipler_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isSunEnabled {
    set {
      testPINVOKE.CAELUM_isSunEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.CAELUM_isSunEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector3 SunLightColor {
    set {
      testPINVOKE.CAELUM_SunLightColor_set(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.CAELUM_SunLightColor_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector3 SunPosition {
    set {
      testPINVOKE.CAELUM_SunPosition_set(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(testPINVOKE.CAELUM_SunPosition_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ColourValue SunSpecularMultipler {
    set {
      testPINVOKE.CAELUM_SunSpecularMultipler_set(swigCPtr, SWIGTYPE_p_ColourValue.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ColourValue ret = new SWIGTYPE_p_ColourValue(testPINVOKE.CAELUM_SunSpecularMultipler_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public CAELUM() : this(testPINVOKE.new_CAELUM(), true) {
  }

}
