/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class VolumePackage : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VolumePackage(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(VolumePackage obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~VolumePackage() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_VolumePackage(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public VolumePackage() : this(testPINVOKE.new_VolumePackage(), true) {
  }

  public CPhysicsProfile Profile {
    set {
      testPINVOKE.VolumePackage_Profile_set(swigCPtr, CPhysicsProfile.getCPtr(value));
    } 
    get {
      IntPtr cPtr = testPINVOKE.VolumePackage_Profile_get(swigCPtr);
      CPhysicsProfile ret = (cPtr == IntPtr.Zero) ? null : new CPhysicsProfile(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_Core__Physics__IPhysicsStrategy Strategy {
    set {
      testPINVOKE.VolumePackage_Strategy_set(swigCPtr, SWIGTYPE_p_Core__Physics__IPhysicsStrategy.getCPtr(value));
    } 
    get {
      IntPtr cPtr = testPINVOKE.VolumePackage_Strategy_get(swigCPtr);
      SWIGTYPE_p_Core__Physics__IPhysicsStrategy ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Core__Physics__IPhysicsStrategy(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_f32 Scale {
    set {
      testPINVOKE.VolumePackage_Scale_set(swigCPtr, SWIGTYPE_p_f32.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.VolumePackage_Scale_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isRemoveCallback {
    set {
      testPINVOKE.VolumePackage_isRemoveCallback_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.VolumePackage_isRemoveCallback_get(swigCPtr);
      return ret;
    } 
  }

  public bool EnableRaycast {
    set {
      testPINVOKE.VolumePackage_EnableRaycast_set(swigCPtr, value);
    } 
    get {
      bool ret = testPINVOKE.VolumePackage_EnableRaycast_get(swigCPtr);
      return ret;
    } 
  }

}
