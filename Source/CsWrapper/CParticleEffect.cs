/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CParticleEffect : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CParticleEffect(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CParticleEffect obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CParticleEffect() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          testPINVOKE.delete_CParticleEffect(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void StartTimer() {
    testPINVOKE.CParticleEffect_StartTimer(swigCPtr);
  }

  public virtual void Update(SWIGTYPE_p_f32 timeSinceLastFrame) {
    testPINVOKE.CParticleEffect_Update(swigCPtr, SWIGTYPE_p_f32.getCPtr(timeSinceLastFrame));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void UpdateAll(SWIGTYPE_p_f32 timeSinceLastFrame) {
    testPINVOKE.CParticleEffect_UpdateAll(SWIGTYPE_p_f32.getCPtr(timeSinceLastFrame));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddDynamicEffect(CParticleEffect e) {
    testPINVOKE.CParticleEffect_AddDynamicEffect(CParticleEffect.getCPtr(e));
  }

  public SWIGTYPE_p_f32 GetTimer() {
    SWIGTYPE_p_f32 ret = new SWIGTYPE_p_f32(testPINVOKE.CParticleEffect_GetTimer(swigCPtr), true);
    return ret;
  }

  public void SetTimer(SWIGTYPE_p_f32 Timer) {
    testPINVOKE.CParticleEffect_SetTimer(swigCPtr, SWIGTYPE_p_f32.getCPtr(Timer));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPosition(SWIGTYPE_p_Vector3 Position) {
    testPINVOKE.CParticleEffect_SetPosition__SWIG_0(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(Position));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPosition(SWIGTYPE_p_f32 X, SWIGTYPE_p_f32 Y, SWIGTYPE_p_f32 Z) {
    testPINVOKE.CParticleEffect_SetPosition__SWIG_1(swigCPtr, SWIGTYPE_p_f32.getCPtr(X), SWIGTYPE_p_f32.getCPtr(Y), SWIGTYPE_p_f32.getCPtr(Z));
    if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_String LabelName {
    set {
      testPINVOKE.CParticleEffect_LabelName_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.CParticleEffect_LabelName_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_String ParticleName {
    set {
      testPINVOKE.CParticleEffect_ParticleName_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(testPINVOKE.CParticleEffect_ParticleName_get(swigCPtr), true);
      if (testPINVOKE.SWIGPendingException.Pending) throw testPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
